
NUCLEO-G474RE-AEI_Base_TP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f44  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f0  08009124  08009124  00019124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009714  08009714  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08009714  08009714  00019714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800971c  0800971c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800971c  0800971c  0001971c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009720  08009720  00019720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009724  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  20000070  08009794  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08009794  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c385  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003708  00000000  00000000  0003c425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001630  00000000  00000000  0003fb30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014b8  00000000  00000000  00041160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a6e5  00000000  00000000  00042618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001acdd  00000000  00000000  0006ccfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113f30  00000000  00000000  000879da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019b90a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006998  00000000  00000000  0019b95c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800910c 	.word	0x0800910c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	0800910c 	.word	0x0800910c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08c      	sub	sp, #48	; 0x30
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2220      	movs	r2, #32
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f007 faab 	bl	8007b58 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000602:	4b32      	ldr	r3, [pc, #200]	; (80006cc <MX_ADC1_Init+0xe8>)
 8000604:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000608:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800060a:	4b30      	ldr	r3, [pc, #192]	; (80006cc <MX_ADC1_Init+0xe8>)
 800060c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000610:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000612:	4b2e      	ldr	r3, [pc, #184]	; (80006cc <MX_ADC1_Init+0xe8>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000618:	4b2c      	ldr	r3, [pc, #176]	; (80006cc <MX_ADC1_Init+0xe8>)
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800061e:	4b2b      	ldr	r3, [pc, #172]	; (80006cc <MX_ADC1_Init+0xe8>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000624:	4b29      	ldr	r3, [pc, #164]	; (80006cc <MX_ADC1_Init+0xe8>)
 8000626:	2200      	movs	r2, #0
 8000628:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800062a:	4b28      	ldr	r3, [pc, #160]	; (80006cc <MX_ADC1_Init+0xe8>)
 800062c:	2204      	movs	r2, #4
 800062e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000630:	4b26      	ldr	r3, [pc, #152]	; (80006cc <MX_ADC1_Init+0xe8>)
 8000632:	2200      	movs	r2, #0
 8000634:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000636:	4b25      	ldr	r3, [pc, #148]	; (80006cc <MX_ADC1_Init+0xe8>)
 8000638:	2200      	movs	r2, #0
 800063a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800063c:	4b23      	ldr	r3, [pc, #140]	; (80006cc <MX_ADC1_Init+0xe8>)
 800063e:	2201      	movs	r2, #1
 8000640:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000642:	4b22      	ldr	r3, [pc, #136]	; (80006cc <MX_ADC1_Init+0xe8>)
 8000644:	2200      	movs	r2, #0
 8000646:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800064a:	4b20      	ldr	r3, [pc, #128]	; (80006cc <MX_ADC1_Init+0xe8>)
 800064c:	2200      	movs	r2, #0
 800064e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000650:	4b1e      	ldr	r3, [pc, #120]	; (80006cc <MX_ADC1_Init+0xe8>)
 8000652:	2200      	movs	r2, #0
 8000654:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000656:	4b1d      	ldr	r3, [pc, #116]	; (80006cc <MX_ADC1_Init+0xe8>)
 8000658:	2200      	movs	r2, #0
 800065a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800065e:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <MX_ADC1_Init+0xe8>)
 8000660:	2200      	movs	r2, #0
 8000662:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000664:	4b19      	ldr	r3, [pc, #100]	; (80006cc <MX_ADC1_Init+0xe8>)
 8000666:	2200      	movs	r2, #0
 8000668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800066c:	4817      	ldr	r0, [pc, #92]	; (80006cc <MX_ADC1_Init+0xe8>)
 800066e:	f001 f99f 	bl	80019b0 <HAL_ADC_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000678:	f000 f992 	bl	80009a0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800067c:	2300      	movs	r3, #0
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000684:	4619      	mov	r1, r3
 8000686:	4811      	ldr	r0, [pc, #68]	; (80006cc <MX_ADC1_Init+0xe8>)
 8000688:	f001 ffba 	bl	8002600 <HAL_ADCEx_MultiModeConfigChannel>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000692:	f000 f985 	bl	80009a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MX_ADC1_Init+0xec>)
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800069a:	2306      	movs	r3, #6
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006a2:	237f      	movs	r3, #127	; 0x7f
 80006a4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a6:	2304      	movs	r3, #4
 80006a8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	4619      	mov	r1, r3
 80006b2:	4806      	ldr	r0, [pc, #24]	; (80006cc <MX_ADC1_Init+0xe8>)
 80006b4:	f001 fb3e 	bl	8001d34 <HAL_ADC_ConfigChannel>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006be:	f000 f96f 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	3730      	adds	r7, #48	; 0x30
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	2000008c 	.word	0x2000008c
 80006d0:	04300002 	.word	0x04300002

080006d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b09e      	sub	sp, #120	; 0x78
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006ec:	f107 0310 	add.w	r3, r7, #16
 80006f0:	2254      	movs	r2, #84	; 0x54
 80006f2:	2100      	movs	r1, #0
 80006f4:	4618      	mov	r0, r3
 80006f6:	f007 fa2f 	bl	8007b58 <memset>
  if(adcHandle->Instance==ADC1)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000702:	d134      	bne.n	800076e <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000704:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000708:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800070a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800070e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000710:	f107 0310 	add.w	r3, r7, #16
 8000714:	4618      	mov	r0, r3
 8000716:	f003 fa0d 	bl	8003b34 <HAL_RCCEx_PeriphCLKConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000720:	f000 f93e 	bl	80009a0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000724:	4b14      	ldr	r3, [pc, #80]	; (8000778 <HAL_ADC_MspInit+0xa4>)
 8000726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000728:	4a13      	ldr	r2, [pc, #76]	; (8000778 <HAL_ADC_MspInit+0xa4>)
 800072a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800072e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000730:	4b11      	ldr	r3, [pc, #68]	; (8000778 <HAL_ADC_MspInit+0xa4>)
 8000732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000734:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800073c:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <HAL_ADC_MspInit+0xa4>)
 800073e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000740:	4a0d      	ldr	r2, [pc, #52]	; (8000778 <HAL_ADC_MspInit+0xa4>)
 8000742:	f043 0301 	orr.w	r3, r3, #1
 8000746:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000748:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <HAL_ADC_MspInit+0xa4>)
 800074a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074c:	f003 0301 	and.w	r3, r3, #1
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000754:	2303      	movs	r3, #3
 8000756:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000758:	2303      	movs	r3, #3
 800075a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000760:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000764:	4619      	mov	r1, r3
 8000766:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800076a:	f002 f9f1 	bl	8002b50 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800076e:	bf00      	nop
 8000770:	3778      	adds	r7, #120	; 0x78
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40021000 	.word	0x40021000

0800077c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b088      	sub	sp, #32
 8000780:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000792:	4b33      	ldr	r3, [pc, #204]	; (8000860 <MX_GPIO_Init+0xe4>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	4a32      	ldr	r2, [pc, #200]	; (8000860 <MX_GPIO_Init+0xe4>)
 8000798:	f043 0304 	orr.w	r3, r3, #4
 800079c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079e:	4b30      	ldr	r3, [pc, #192]	; (8000860 <MX_GPIO_Init+0xe4>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	f003 0304 	and.w	r3, r3, #4
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007aa:	4b2d      	ldr	r3, [pc, #180]	; (8000860 <MX_GPIO_Init+0xe4>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	4a2c      	ldr	r2, [pc, #176]	; (8000860 <MX_GPIO_Init+0xe4>)
 80007b0:	f043 0320 	orr.w	r3, r3, #32
 80007b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b6:	4b2a      	ldr	r3, [pc, #168]	; (8000860 <MX_GPIO_Init+0xe4>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	f003 0320 	and.w	r3, r3, #32
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	4b27      	ldr	r3, [pc, #156]	; (8000860 <MX_GPIO_Init+0xe4>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	4a26      	ldr	r2, [pc, #152]	; (8000860 <MX_GPIO_Init+0xe4>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ce:	4b24      	ldr	r3, [pc, #144]	; (8000860 <MX_GPIO_Init+0xe4>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2108      	movs	r1, #8
 80007de:	4821      	ldr	r0, [pc, #132]	; (8000864 <MX_GPIO_Init+0xe8>)
 80007e0:	f002 fb38 	bl	8002e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2120      	movs	r1, #32
 80007e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ec:	f002 fb32 	bl	8002e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80007f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	4619      	mov	r1, r3
 8000806:	4817      	ldr	r0, [pc, #92]	; (8000864 <MX_GPIO_Init+0xe8>)
 8000808:	f002 f9a2 	bl	8002b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ISO_RESET_Pin;
 800080c:	2308      	movs	r3, #8
 800080e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000810:	2301      	movs	r3, #1
 8000812:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ISO_RESET_GPIO_Port, &GPIO_InitStruct);
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	4619      	mov	r1, r3
 8000822:	4810      	ldr	r0, [pc, #64]	; (8000864 <MX_GPIO_Init+0xe8>)
 8000824:	f002 f994 	bl	8002b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000828:	2320      	movs	r3, #32
 800082a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082c:	2301      	movs	r3, #1
 800082e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	4619      	mov	r1, r3
 800083e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000842:	f002 f985 	bl	8002b50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	2100      	movs	r1, #0
 800084a:	2028      	movs	r0, #40	; 0x28
 800084c:	f002 f898 	bl	8002980 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000850:	2028      	movs	r0, #40	; 0x28
 8000852:	f002 f8af 	bl	80029b4 <HAL_NVIC_EnableIRQ>

}
 8000856:	bf00      	nop
 8000858:	3720      	adds	r7, #32
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40021000 	.word	0x40021000
 8000864:	48000800 	.word	0x48000800

08000868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800086c:	f000 fe6d 	bl	800154a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000870:	f000 f83a 	bl	80008e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000874:	f7ff ff82 	bl	800077c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000878:	f000 fc58 	bl	800112c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800087c:	f000 fd90 	bl	80013a0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000880:	f7ff feb0 	bl	80005e4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000884:	2201      	movs	r2, #1
 8000886:	4914      	ldr	r1, [pc, #80]	; (80008d8 <main+0x70>)
 8000888:	4814      	ldr	r0, [pc, #80]	; (80008dc <main+0x74>)
 800088a:	f005 f9a7 	bl	8005bdc <HAL_UART_Receive_IT>
	HAL_Delay(1);
 800088e:	2001      	movs	r0, #1
 8000890:	f000 fe92 	bl	80015b8 <HAL_Delay>
	shellInit();
 8000894:	f000 f8d2 	bl	8000a3c <shellInit>
	StartPWM();
 8000898:	f000 f888 	bl	80009ac <StartPWM>
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, SET);
 800089c:	2201      	movs	r2, #1
 800089e:	2108      	movs	r1, #8
 80008a0:	480f      	ldr	r0, [pc, #60]	; (80008e0 <main+0x78>)
 80008a2:	f002 fad7 	bl	8002e54 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80008a6:	2001      	movs	r0, #1
 80008a8:	f000 fe86 	bl	80015b8 <HAL_Delay>
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2108      	movs	r1, #8
 80008b0:	480b      	ldr	r0, [pc, #44]	; (80008e0 <main+0x78>)
 80008b2:	f002 facf 	bl	8002e54 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		// SuperLoop inside the while(1), only flag changed from interrupt could launch functions
		if(uartRxReceived){
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <main+0x7c>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d0fb      	beq.n	80008b6 <main+0x4e>
			if(shellGetChar()){
 80008be:	f000 f8f5 	bl	8000aac <shellGetChar>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d003      	beq.n	80008d0 <main+0x68>
				shellExec();
 80008c8:	f000 f964 	bl	8000b94 <shellExec>
				shellPrompt();
 80008cc:	f000 f8ce 	bl	8000a6c <shellPrompt>
			}
			uartRxReceived = 0;
 80008d0:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <main+0x7c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	701a      	strb	r2, [r3, #0]
		if(uartRxReceived){
 80008d6:	e7ee      	b.n	80008b6 <main+0x4e>
 80008d8:	20000204 	.word	0x20000204
 80008dc:	2000024c 	.word	0x2000024c
 80008e0:	48000800 	.word	0x48000800
 80008e4:	20000200 	.word	0x20000200

080008e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b094      	sub	sp, #80	; 0x50
 80008ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ee:	f107 0318 	add.w	r3, r7, #24
 80008f2:	2238      	movs	r2, #56	; 0x38
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f007 f92e 	bl	8007b58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]
 8000908:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800090a:	2000      	movs	r0, #0
 800090c:	f002 faf8 	bl	8002f00 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000910:	2301      	movs	r3, #1
 8000912:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000914:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000918:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091a:	2302      	movs	r3, #2
 800091c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800091e:	2303      	movs	r3, #3
 8000920:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000922:	2306      	movs	r3, #6
 8000924:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000926:	2355      	movs	r3, #85	; 0x55
 8000928:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800092a:	2302      	movs	r3, #2
 800092c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800092e:	2302      	movs	r3, #2
 8000930:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000932:	2302      	movs	r3, #2
 8000934:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000936:	f107 0318 	add.w	r3, r7, #24
 800093a:	4618      	mov	r0, r3
 800093c:	f002 fb94 	bl	8003068 <HAL_RCC_OscConfig>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000946:	f000 f82b 	bl	80009a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094a:	230f      	movs	r3, #15
 800094c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800094e:	2303      	movs	r3, #3
 8000950:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000956:	2300      	movs	r3, #0
 8000958:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800095a:	2300      	movs	r3, #0
 800095c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	2104      	movs	r1, #4
 8000962:	4618      	mov	r0, r3
 8000964:	f002 fe98 	bl	8003698 <HAL_RCC_ClockConfig>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800096e:	f000 f817 	bl	80009a0 <Error_Handler>
  }
}
 8000972:	bf00      	nop
 8000974:	3750      	adds	r7, #80	; 0x50
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a04      	ldr	r2, [pc, #16]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d101      	bne.n	8000992 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800098e:	f000 fdf5 	bl	800157c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40001000 	.word	0x40001000

080009a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a4:	b672      	cpsid	i
}
 80009a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80009a8:	e7fe      	b.n	80009a8 <Error_Handler+0x8>
	...

080009ac <StartPWM>:
  * @brief  Switch on the motor driver
  * @retval None
  */

void StartPWM(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80009b0:	2100      	movs	r1, #0
 80009b2:	4808      	ldr	r0, [pc, #32]	; (80009d4 <StartPWM+0x28>)
 80009b4:	f003 fc3e 	bl	8004234 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 80009b8:	2104      	movs	r1, #4
 80009ba:	4806      	ldr	r0, [pc, #24]	; (80009d4 <StartPWM+0x28>)
 80009bc:	f003 fc3a 	bl	8004234 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 80009c0:	2100      	movs	r1, #0
 80009c2:	4804      	ldr	r0, [pc, #16]	; (80009d4 <StartPWM+0x28>)
 80009c4:	f004 fdae 	bl	8005524 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 80009c8:	2104      	movs	r1, #4
 80009ca:	4802      	ldr	r0, [pc, #8]	; (80009d4 <StartPWM+0x28>)
 80009cc:	f004 fdaa 	bl	8005524 <HAL_TIMEx_PWMN_Start>
}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	200001b4 	.word	0x200001b4

080009d8 <motorPowerOn>:

void motorPowerOn(void){
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // just for test, you can delete it
 80009dc:	2120      	movs	r1, #32
 80009de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e2:	f002 fa4f 	bl	8002e84 <HAL_GPIO_TogglePin>
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}

080009ea <motorPowerOff>:

/**
  * @brief  Switch off the motor driver
  * @retval None
  */
void motorPowerOff(void){
 80009ea:	b580      	push	{r7, lr}
 80009ec:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // just for test, you can delete it
 80009ee:	2120      	movs	r1, #32
 80009f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f4:	f002 fa46 	bl	8002e84 <HAL_GPIO_TogglePin>
}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}

080009fc <motorSetSpeed>:
/**
  * @brief  Set the motor speed
  * @param  speed : target speed of the motor
  * @retval None
  */
void motorSetSpeed(int speed){
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000a04:	2120      	movs	r1, #32
 8000a06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0a:	f002 fa3b 	bl	8002e84 <HAL_GPIO_TogglePin>
	// just for test, you can delete it
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,speed);
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <motorSetSpeed+0x38>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR1 = speed;
 8000a16:	4a08      	ldr	r2, [pc, #32]	; (8000a38 <motorSetSpeed+0x3c>)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6353      	str	r3, [r2, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1023-speed);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8000a22:	3303      	adds	r3, #3
 8000a24:	4a03      	ldr	r2, [pc, #12]	; (8000a34 <motorSetSpeed+0x38>)
 8000a26:	6812      	ldr	r2, [r2, #0]
 8000a28:	6393      	str	r3, [r2, #56]	; 0x38

}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200001b4 	.word	0x200001b4
 8000a38:	40012c00 	.word	0x40012c00

08000a3c <shellInit>:

/**
  * @brief  Send a stating message
  * @retval None
  */
void shellInit(void){
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 8000a40:	f04f 33ff 	mov.w	r3, #4294967295
 8000a44:	226c      	movs	r2, #108	; 0x6c
 8000a46:	4906      	ldr	r1, [pc, #24]	; (8000a60 <shellInit+0x24>)
 8000a48:	4806      	ldr	r0, [pc, #24]	; (8000a64 <shellInit+0x28>)
 8000a4a:	f005 f830 	bl	8005aae <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a52:	221a      	movs	r2, #26
 8000a54:	4904      	ldr	r1, [pc, #16]	; (8000a68 <shellInit+0x2c>)
 8000a56:	4803      	ldr	r0, [pc, #12]	; (8000a64 <shellInit+0x28>)
 8000a58:	f005 f829 	bl	8005aae <HAL_UART_Transmit>
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	08009198 	.word	0x08009198
 8000a64:	2000024c 	.word	0x2000024c
 8000a68:	0800917c 	.word	0x0800917c

08000a6c <shellPrompt>:

/**
  * @brief  Send the prompt
  * @retval None
  */
void shellPrompt(void){
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000a70:	f04f 33ff 	mov.w	r3, #4294967295
 8000a74:	221a      	movs	r2, #26
 8000a76:	4903      	ldr	r1, [pc, #12]	; (8000a84 <shellPrompt+0x18>)
 8000a78:	4803      	ldr	r0, [pc, #12]	; (8000a88 <shellPrompt+0x1c>)
 8000a7a:	f005 f818 	bl	8005aae <HAL_UART_Transmit>
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	0800917c 	.word	0x0800917c
 8000a88:	2000024c 	.word	0x2000024c

08000a8c <shellCmdNotFound>:

/**
  * @brief  Send the default message if the command is not found
  * @retval None
  */
void shellCmdNotFound(void){
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000a90:	f04f 33ff 	mov.w	r3, #4294967295
 8000a94:	2214      	movs	r2, #20
 8000a96:	4903      	ldr	r1, [pc, #12]	; (8000aa4 <shellCmdNotFound+0x18>)
 8000a98:	4803      	ldr	r0, [pc, #12]	; (8000aa8 <shellCmdNotFound+0x1c>)
 8000a9a:	f005 f808 	bl	8005aae <HAL_UART_Transmit>
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	08009478 	.word	0x08009478
 8000aa8:	2000024c 	.word	0x2000024c

08000aac <shellGetChar>:

/**
  * @brief  Function called for saving the new character and call and setup argc and argv variable if ENTER is pressed
  * @retval 1 if a new command is available, 0 if not.
  */
uint8_t shellGetChar(void){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
	uint8_t newCmdReady = 0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	71fb      	strb	r3, [r7, #7]
	char* token;

	switch(uartRxBuffer[0]){
 8000ab6:	4b2f      	ldr	r3, [pc, #188]	; (8000b74 <shellGetChar+0xc8>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b08      	cmp	r3, #8
 8000abc:	d030      	beq.n	8000b20 <shellGetChar+0x74>
 8000abe:	2b0d      	cmp	r3, #13
 8000ac0:	d140      	bne.n	8000b44 <shellGetChar+0x98>
		// If Enter, update argc and argv
	case ASCII_CR:
		HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8000ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac6:	2203      	movs	r2, #3
 8000ac8:	492b      	ldr	r1, [pc, #172]	; (8000b78 <shellGetChar+0xcc>)
 8000aca:	482c      	ldr	r0, [pc, #176]	; (8000b7c <shellGetChar+0xd0>)
 8000acc:	f004 ffef 	bl	8005aae <HAL_UART_Transmit>
		cmdBuffer[idxCmd] = '\0';
 8000ad0:	4b2b      	ldr	r3, [pc, #172]	; (8000b80 <shellGetChar+0xd4>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4b2b      	ldr	r3, [pc, #172]	; (8000b84 <shellGetChar+0xd8>)
 8000ad8:	2100      	movs	r1, #0
 8000ada:	5499      	strb	r1, [r3, r2]
		argc = 0;
 8000adc:	4b2a      	ldr	r3, [pc, #168]	; (8000b88 <shellGetChar+0xdc>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	701a      	strb	r2, [r3, #0]
		token = (char*)strtok(cmdBuffer, " ");
 8000ae2:	492a      	ldr	r1, [pc, #168]	; (8000b8c <shellGetChar+0xe0>)
 8000ae4:	4827      	ldr	r0, [pc, #156]	; (8000b84 <shellGetChar+0xd8>)
 8000ae6:	f007 f873 	bl	8007bd0 <strtok>
 8000aea:	6038      	str	r0, [r7, #0]
		while(token!=NULL){
 8000aec:	e00f      	b.n	8000b0e <shellGetChar+0x62>
			argv[argc++] = token;
 8000aee:	4b26      	ldr	r3, [pc, #152]	; (8000b88 <shellGetChar+0xdc>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	1c5a      	adds	r2, r3, #1
 8000af4:	b2d1      	uxtb	r1, r2
 8000af6:	4a24      	ldr	r2, [pc, #144]	; (8000b88 <shellGetChar+0xdc>)
 8000af8:	7011      	strb	r1, [r2, #0]
 8000afa:	4619      	mov	r1, r3
 8000afc:	4a24      	ldr	r2, [pc, #144]	; (8000b90 <shellGetChar+0xe4>)
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			token = (char*)strtok(NULL, " ");
 8000b04:	4921      	ldr	r1, [pc, #132]	; (8000b8c <shellGetChar+0xe0>)
 8000b06:	2000      	movs	r0, #0
 8000b08:	f007 f862 	bl	8007bd0 <strtok>
 8000b0c:	6038      	str	r0, [r7, #0]
		while(token!=NULL){
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d1ec      	bne.n	8000aee <shellGetChar+0x42>
		}

		idxCmd = 0;
 8000b14:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <shellGetChar+0xd4>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	701a      	strb	r2, [r3, #0]
		newCmdReady = 1;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	71fb      	strb	r3, [r7, #7]
		break;
 8000b1e:	e023      	b.n	8000b68 <shellGetChar+0xbc>
		// Delete last character if "return" is pressed
	case ASCII_BS:
		cmdBuffer[idxCmd--] = '\0';
 8000b20:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <shellGetChar+0xd4>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	1e5a      	subs	r2, r3, #1
 8000b26:	b2d1      	uxtb	r1, r2
 8000b28:	4a15      	ldr	r2, [pc, #84]	; (8000b80 <shellGetChar+0xd4>)
 8000b2a:	7011      	strb	r1, [r2, #0]
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <shellGetChar+0xd8>)
 8000b30:	2100      	movs	r1, #0
 8000b32:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart2, uartRxBuffer, 1, HAL_MAX_DELAY);
 8000b34:	f04f 33ff 	mov.w	r3, #4294967295
 8000b38:	2201      	movs	r2, #1
 8000b3a:	490e      	ldr	r1, [pc, #56]	; (8000b74 <shellGetChar+0xc8>)
 8000b3c:	480f      	ldr	r0, [pc, #60]	; (8000b7c <shellGetChar+0xd0>)
 8000b3e:	f004 ffb6 	bl	8005aae <HAL_UART_Transmit>
		break;
 8000b42:	e011      	b.n	8000b68 <shellGetChar+0xbc>
		// Default state : add new character to the command buffer
	default:
		cmdBuffer[idxCmd++] = uartRxBuffer[0];
 8000b44:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <shellGetChar+0xd4>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	1c5a      	adds	r2, r3, #1
 8000b4a:	b2d1      	uxtb	r1, r2
 8000b4c:	4a0c      	ldr	r2, [pc, #48]	; (8000b80 <shellGetChar+0xd4>)
 8000b4e:	7011      	strb	r1, [r2, #0]
 8000b50:	461a      	mov	r2, r3
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <shellGetChar+0xc8>)
 8000b54:	7819      	ldrb	r1, [r3, #0]
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <shellGetChar+0xd8>)
 8000b58:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart2, uartRxBuffer, 1, HAL_MAX_DELAY);
 8000b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5e:	2201      	movs	r2, #1
 8000b60:	4904      	ldr	r1, [pc, #16]	; (8000b74 <shellGetChar+0xc8>)
 8000b62:	4806      	ldr	r0, [pc, #24]	; (8000b7c <shellGetChar+0xd0>)
 8000b64:	f004 ffa3 	bl	8005aae <HAL_UART_Transmit>
	}

	return newCmdReady;
 8000b68:	79fb      	ldrb	r3, [r7, #7]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000204 	.word	0x20000204
 8000b78:	08009204 	.word	0x08009204
 8000b7c:	2000024c 	.word	0x2000024c
 8000b80:	20000138 	.word	0x20000138
 8000b84:	200000f8 	.word	0x200000f8
 8000b88:	20000160 	.word	0x20000160
 8000b8c:	08009124 	.word	0x08009124
 8000b90:	2000013c 	.word	0x2000013c

08000b94 <shellExec>:

/**
  * @brief  Call function depends of the value of argc and argv
  * @retval None
  */
void shellExec(void){
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	if(strcmp(argv[0],"set")==0){
 8000b98:	4b6c      	ldr	r3, [pc, #432]	; (8000d4c <shellExec+0x1b8>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	496c      	ldr	r1, [pc, #432]	; (8000d50 <shellExec+0x1bc>)
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fb3e 	bl	8000220 <strcmp>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d16f      	bne.n	8000c8a <shellExec+0xf6>
		if(strcmp(argv[1],"PA5")==0 && ((strcmp(argv[2],"0")==0)||(strcmp(argv[2],"1")==0)) ){
 8000baa:	4b68      	ldr	r3, [pc, #416]	; (8000d4c <shellExec+0x1b8>)
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	4969      	ldr	r1, [pc, #420]	; (8000d54 <shellExec+0x1c0>)
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fb35 	bl	8000220 <strcmp>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d137      	bne.n	8000c2c <shellExec+0x98>
 8000bbc:	4b63      	ldr	r3, [pc, #396]	; (8000d4c <shellExec+0x1b8>)
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	4965      	ldr	r1, [pc, #404]	; (8000d58 <shellExec+0x1c4>)
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff fb2c 	bl	8000220 <strcmp>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d008      	beq.n	8000be0 <shellExec+0x4c>
 8000bce:	4b5f      	ldr	r3, [pc, #380]	; (8000d4c <shellExec+0x1b8>)
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	4962      	ldr	r1, [pc, #392]	; (8000d5c <shellExec+0x1c8>)
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fb23 	bl	8000220 <strcmp>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d125      	bne.n	8000c2c <shellExec+0x98>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, atoi(argv[2]));
 8000be0:	4b5a      	ldr	r3, [pc, #360]	; (8000d4c <shellExec+0x1b8>)
 8000be2:	689b      	ldr	r3, [r3, #8]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f006 ff89 	bl	8007afc <atoi>
 8000bea:	4603      	mov	r3, r0
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	461a      	mov	r2, r3
 8000bf0:	2120      	movs	r1, #32
 8000bf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf6:	f002 f92d 	bl	8002e54 <HAL_GPIO_WritePin>
			stringSize = snprintf((char*)uartTxBuffer,UART_TX_BUFFER_SIZE,"Switch on/off led : %d\r\n",atoi(argv[2]));
 8000bfa:	4b54      	ldr	r3, [pc, #336]	; (8000d4c <shellExec+0x1b8>)
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f006 ff7c 	bl	8007afc <atoi>
 8000c04:	4603      	mov	r3, r0
 8000c06:	4a56      	ldr	r2, [pc, #344]	; (8000d60 <shellExec+0x1cc>)
 8000c08:	2140      	movs	r1, #64	; 0x40
 8000c0a:	4856      	ldr	r0, [pc, #344]	; (8000d64 <shellExec+0x1d0>)
 8000c0c:	f006 ffac 	bl	8007b68 <sniprintf>
 8000c10:	4603      	mov	r3, r0
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	4b54      	ldr	r3, [pc, #336]	; (8000d68 <shellExec+0x1d4>)
 8000c16:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, uartTxBuffer, stringSize, HAL_MAX_DELAY);
 8000c18:	4b53      	ldr	r3, [pc, #332]	; (8000d68 <shellExec+0x1d4>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	b29a      	uxth	r2, r3
 8000c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c22:	4950      	ldr	r1, [pc, #320]	; (8000d64 <shellExec+0x1d0>)
 8000c24:	4851      	ldr	r0, [pc, #324]	; (8000d6c <shellExec+0x1d8>)
 8000c26:	f004 ff42 	bl	8005aae <HAL_UART_Transmit>
 8000c2a:	e08d      	b.n	8000d48 <shellExec+0x1b4>
		}
		else if(strcmp(argv[1],"speed")==0){
 8000c2c:	4b47      	ldr	r3, [pc, #284]	; (8000d4c <shellExec+0x1b8>)
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	494f      	ldr	r1, [pc, #316]	; (8000d70 <shellExec+0x1dc>)
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff faf4 	bl	8000220 <strcmp>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d122      	bne.n	8000c84 <shellExec+0xf0>
			if(atoi(argv[2])==0 && strcmp(argv[2],"0")!=0){
 8000c3e:	4b43      	ldr	r3, [pc, #268]	; (8000d4c <shellExec+0x1b8>)
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	4618      	mov	r0, r3
 8000c44:	f006 ff5a 	bl	8007afc <atoi>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d110      	bne.n	8000c70 <shellExec+0xdc>
 8000c4e:	4b3f      	ldr	r3, [pc, #252]	; (8000d4c <shellExec+0x1b8>)
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	4941      	ldr	r1, [pc, #260]	; (8000d58 <shellExec+0x1c4>)
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff fae3 	bl	8000220 <strcmp>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d007      	beq.n	8000c70 <shellExec+0xdc>
				HAL_UART_Transmit(&huart2, motorSpeedInst, sizeof(motorSpeedInst), HAL_MAX_DELAY);
 8000c60:	f04f 33ff 	mov.w	r3, #4294967295
 8000c64:	2230      	movs	r2, #48	; 0x30
 8000c66:	4943      	ldr	r1, [pc, #268]	; (8000d74 <shellExec+0x1e0>)
 8000c68:	4840      	ldr	r0, [pc, #256]	; (8000d6c <shellExec+0x1d8>)
 8000c6a:	f004 ff20 	bl	8005aae <HAL_UART_Transmit>
 8000c6e:	e06b      	b.n	8000d48 <shellExec+0x1b4>
			}
			else{
				motorSetSpeed(atoi(argv[2]));
 8000c70:	4b36      	ldr	r3, [pc, #216]	; (8000d4c <shellExec+0x1b8>)
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f006 ff41 	bl	8007afc <atoi>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff febd 	bl	80009fc <motorSetSpeed>
		motorPowerOff();
	}
	else{
		shellCmdNotFound();
	}
}
 8000c82:	e061      	b.n	8000d48 <shellExec+0x1b4>
			shellCmdNotFound();
 8000c84:	f7ff ff02 	bl	8000a8c <shellCmdNotFound>
}
 8000c88:	e05e      	b.n	8000d48 <shellExec+0x1b4>
	else if(strcmp(argv[0],"help")==0)
 8000c8a:	4b30      	ldr	r3, [pc, #192]	; (8000d4c <shellExec+0x1b8>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	493a      	ldr	r1, [pc, #232]	; (8000d78 <shellExec+0x1e4>)
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff fac5 	bl	8000220 <strcmp>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d108      	bne.n	8000cae <shellExec+0x11a>
		HAL_UART_Transmit(&huart2, help, sizeof(help), HAL_MAX_DELAY);
 8000c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca0:	f44f 7281 	mov.w	r2, #258	; 0x102
 8000ca4:	4935      	ldr	r1, [pc, #212]	; (8000d7c <shellExec+0x1e8>)
 8000ca6:	4831      	ldr	r0, [pc, #196]	; (8000d6c <shellExec+0x1d8>)
 8000ca8:	f004 ff01 	bl	8005aae <HAL_UART_Transmit>
}
 8000cac:	e04c      	b.n	8000d48 <shellExec+0x1b4>
	else if(strcmp(argv[0],"pinout")==0)
 8000cae:	4b27      	ldr	r3, [pc, #156]	; (8000d4c <shellExec+0x1b8>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4933      	ldr	r1, [pc, #204]	; (8000d80 <shellExec+0x1ec>)
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fab3 	bl	8000220 <strcmp>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d108      	bne.n	8000cd2 <shellExec+0x13e>
		HAL_UART_Transmit(&huart2, pinout, sizeof(pinout), HAL_MAX_DELAY);
 8000cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc4:	f44f 7281 	mov.w	r2, #258	; 0x102
 8000cc8:	492e      	ldr	r1, [pc, #184]	; (8000d84 <shellExec+0x1f0>)
 8000cca:	4828      	ldr	r0, [pc, #160]	; (8000d6c <shellExec+0x1d8>)
 8000ccc:	f004 feef 	bl	8005aae <HAL_UART_Transmit>
}
 8000cd0:	e03a      	b.n	8000d48 <shellExec+0x1b4>
	else if((strcmp(argv[0],"power")==0)&&(strcmp(argv[1],"on")==0))
 8000cd2:	4b1e      	ldr	r3, [pc, #120]	; (8000d4c <shellExec+0x1b8>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	492c      	ldr	r1, [pc, #176]	; (8000d88 <shellExec+0x1f4>)
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff faa1 	bl	8000220 <strcmp>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d112      	bne.n	8000d0a <shellExec+0x176>
 8000ce4:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <shellExec+0x1b8>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	4928      	ldr	r1, [pc, #160]	; (8000d8c <shellExec+0x1f8>)
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fa98 	bl	8000220 <strcmp>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d109      	bne.n	8000d0a <shellExec+0x176>
		HAL_UART_Transmit(&huart2, powerOn, sizeof(powerOn), HAL_MAX_DELAY);
 8000cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfa:	221a      	movs	r2, #26
 8000cfc:	4924      	ldr	r1, [pc, #144]	; (8000d90 <shellExec+0x1fc>)
 8000cfe:	481b      	ldr	r0, [pc, #108]	; (8000d6c <shellExec+0x1d8>)
 8000d00:	f004 fed5 	bl	8005aae <HAL_UART_Transmit>
		motorPowerOn();
 8000d04:	f7ff fe68 	bl	80009d8 <motorPowerOn>
 8000d08:	e01e      	b.n	8000d48 <shellExec+0x1b4>
	else if((strcmp(argv[0],"power")==0)&&(strcmp(argv[1],"off")==0))
 8000d0a:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <shellExec+0x1b8>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	491e      	ldr	r1, [pc, #120]	; (8000d88 <shellExec+0x1f4>)
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff fa85 	bl	8000220 <strcmp>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d112      	bne.n	8000d42 <shellExec+0x1ae>
 8000d1c:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <shellExec+0x1b8>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	491c      	ldr	r1, [pc, #112]	; (8000d94 <shellExec+0x200>)
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fa7c 	bl	8000220 <strcmp>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d109      	bne.n	8000d42 <shellExec+0x1ae>
		HAL_UART_Transmit(&huart2, powerOff, sizeof(powerOff), HAL_MAX_DELAY);
 8000d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d32:	221b      	movs	r2, #27
 8000d34:	4918      	ldr	r1, [pc, #96]	; (8000d98 <shellExec+0x204>)
 8000d36:	480d      	ldr	r0, [pc, #52]	; (8000d6c <shellExec+0x1d8>)
 8000d38:	f004 feb9 	bl	8005aae <HAL_UART_Transmit>
		motorPowerOff();
 8000d3c:	f7ff fe55 	bl	80009ea <motorPowerOff>
 8000d40:	e002      	b.n	8000d48 <shellExec+0x1b4>
		shellCmdNotFound();
 8000d42:	f7ff fea3 	bl	8000a8c <shellCmdNotFound>
}
 8000d46:	e7ff      	b.n	8000d48 <shellExec+0x1b4>
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	2000013c 	.word	0x2000013c
 8000d50:	08009128 	.word	0x08009128
 8000d54:	0800912c 	.word	0x0800912c
 8000d58:	08009130 	.word	0x08009130
 8000d5c:	08009134 	.word	0x08009134
 8000d60:	08009138 	.word	0x08009138
 8000d64:	20000208 	.word	0x20000208
 8000d68:	20000248 	.word	0x20000248
 8000d6c:	2000024c 	.word	0x2000024c
 8000d70:	08009154 	.word	0x08009154
 8000d74:	08009448 	.word	0x08009448
 8000d78:	0800915c 	.word	0x0800915c
 8000d7c:	08009208 	.word	0x08009208
 8000d80:	08009164 	.word	0x08009164
 8000d84:	0800930c 	.word	0x0800930c
 8000d88:	0800916c 	.word	0x0800916c
 8000d8c:	08009174 	.word	0x08009174
 8000d90:	08009410 	.word	0x08009410
 8000d94:	08009178 	.word	0x08009178
 8000d98:	0800942c 	.word	0x0800942c

08000d9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da2:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <HAL_MspInit+0x44>)
 8000da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000da6:	4a0e      	ldr	r2, [pc, #56]	; (8000de0 <HAL_MspInit+0x44>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6613      	str	r3, [r2, #96]	; 0x60
 8000dae:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <HAL_MspInit+0x44>)
 8000db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <HAL_MspInit+0x44>)
 8000dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dbe:	4a08      	ldr	r2, [pc, #32]	; (8000de0 <HAL_MspInit+0x44>)
 8000dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	6593      	str	r3, [r2, #88]	; 0x58
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_MspInit+0x44>)
 8000dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000dd2:	f002 f939 	bl	8003048 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40021000 	.word	0x40021000

08000de4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08c      	sub	sp, #48	; 0x30
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000df4:	2300      	movs	r3, #0
 8000df6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000dfa:	4b2d      	ldr	r3, [pc, #180]	; (8000eb0 <HAL_InitTick+0xcc>)
 8000dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfe:	4a2c      	ldr	r2, [pc, #176]	; (8000eb0 <HAL_InitTick+0xcc>)
 8000e00:	f043 0310 	orr.w	r3, r3, #16
 8000e04:	6593      	str	r3, [r2, #88]	; 0x58
 8000e06:	4b2a      	ldr	r3, [pc, #168]	; (8000eb0 <HAL_InitTick+0xcc>)
 8000e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0a:	f003 0310 	and.w	r3, r3, #16
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e12:	f107 020c 	add.w	r2, r7, #12
 8000e16:	f107 0310 	add.w	r3, r7, #16
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f002 fe11 	bl	8003a44 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e22:	f002 fde3 	bl	80039ec <HAL_RCC_GetPCLK1Freq>
 8000e26:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e2a:	4a22      	ldr	r2, [pc, #136]	; (8000eb4 <HAL_InitTick+0xd0>)
 8000e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e30:	0c9b      	lsrs	r3, r3, #18
 8000e32:	3b01      	subs	r3, #1
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e36:	4b20      	ldr	r3, [pc, #128]	; (8000eb8 <HAL_InitTick+0xd4>)
 8000e38:	4a20      	ldr	r2, [pc, #128]	; (8000ebc <HAL_InitTick+0xd8>)
 8000e3a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e3c:	4b1e      	ldr	r3, [pc, #120]	; (8000eb8 <HAL_InitTick+0xd4>)
 8000e3e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e42:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e44:	4a1c      	ldr	r2, [pc, #112]	; (8000eb8 <HAL_InitTick+0xd4>)
 8000e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e48:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e4a:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <HAL_InitTick+0xd4>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e50:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <HAL_InitTick+0xd4>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000e56:	4818      	ldr	r0, [pc, #96]	; (8000eb8 <HAL_InitTick+0xd4>)
 8000e58:	f003 f8ba 	bl	8003fd0 <HAL_TIM_Base_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000e62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d11b      	bne.n	8000ea2 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e6a:	4813      	ldr	r0, [pc, #76]	; (8000eb8 <HAL_InitTick+0xd4>)
 8000e6c:	f003 f908 	bl	8004080 <HAL_TIM_Base_Start_IT>
 8000e70:	4603      	mov	r3, r0
 8000e72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000e76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d111      	bne.n	8000ea2 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e7e:	2036      	movs	r0, #54	; 0x36
 8000e80:	f001 fd98 	bl	80029b4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2b0f      	cmp	r3, #15
 8000e88:	d808      	bhi.n	8000e9c <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	6879      	ldr	r1, [r7, #4]
 8000e8e:	2036      	movs	r0, #54	; 0x36
 8000e90:	f001 fd76 	bl	8002980 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e94:	4a0a      	ldr	r2, [pc, #40]	; (8000ec0 <HAL_InitTick+0xdc>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6013      	str	r3, [r2, #0]
 8000e9a:	e002      	b.n	8000ea2 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ea2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3730      	adds	r7, #48	; 0x30
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	431bde83 	.word	0x431bde83
 8000eb8:	20000164 	.word	0x20000164
 8000ebc:	40001000 	.word	0x40001000
 8000ec0:	20000004 	.word	0x20000004

08000ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <NMI_Handler+0x4>

08000eca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ece:	e7fe      	b.n	8000ece <HardFault_Handler+0x4>

08000ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <MemManage_Handler+0x4>

08000ed6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eda:	e7fe      	b.n	8000eda <BusFault_Handler+0x4>

08000edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <UsageFault_Handler+0x4>

08000ee2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
	...

08000f1c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f20:	4802      	ldr	r0, [pc, #8]	; (8000f2c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8000f22:	f003 fa99 	bl	8004458 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	200001b4 	.word	0x200001b4

08000f30 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f34:	4802      	ldr	r0, [pc, #8]	; (8000f40 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000f36:	f003 fa8f 	bl	8004458 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	200001b4 	.word	0x200001b4

08000f44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f48:	4802      	ldr	r0, [pc, #8]	; (8000f54 <USART2_IRQHandler+0x10>)
 8000f4a:	f004 fe9d 	bl	8005c88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	2000024c 	.word	0x2000024c

08000f58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8000f5c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f60:	f001 ffaa 	bl	8002eb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f6c:	4802      	ldr	r0, [pc, #8]	; (8000f78 <TIM6_DAC_IRQHandler+0x10>)
 8000f6e:	f003 fa73 	bl	8004458 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000164 	.word	0x20000164

08000f7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
	return 1;
 8000f80:	2301      	movs	r3, #1
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <_kill>:

int _kill(int pid, int sig)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f96:	f006 fdb5 	bl	8007b04 <__errno>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2216      	movs	r2, #22
 8000f9e:	601a      	str	r2, [r3, #0]
	return -1;
 8000fa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <_exit>:

void _exit (int status)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff ffe7 	bl	8000f8c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000fbe:	e7fe      	b.n	8000fbe <_exit+0x12>

08000fc0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
 8000fd0:	e00a      	b.n	8000fe8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fd2:	f3af 8000 	nop.w
 8000fd6:	4601      	mov	r1, r0
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	1c5a      	adds	r2, r3, #1
 8000fdc:	60ba      	str	r2, [r7, #8]
 8000fde:	b2ca      	uxtb	r2, r1
 8000fe0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	617b      	str	r3, [r7, #20]
 8000fe8:	697a      	ldr	r2, [r7, #20]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	dbf0      	blt.n	8000fd2 <_read+0x12>
	}

return len;
 8000ff0:	687b      	ldr	r3, [r7, #4]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b086      	sub	sp, #24
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	60f8      	str	r0, [r7, #12]
 8001002:	60b9      	str	r1, [r7, #8]
 8001004:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
 800100a:	e009      	b.n	8001020 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	1c5a      	adds	r2, r3, #1
 8001010:	60ba      	str	r2, [r7, #8]
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	4618      	mov	r0, r3
 8001016:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	3301      	adds	r3, #1
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	697a      	ldr	r2, [r7, #20]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	429a      	cmp	r2, r3
 8001026:	dbf1      	blt.n	800100c <_write+0x12>
	}
	return len;
 8001028:	687b      	ldr	r3, [r7, #4]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <_close>:

int _close(int file)
{
 8001032:	b480      	push	{r7}
 8001034:	b083      	sub	sp, #12
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
	return -1;
 800103a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800103e:	4618      	mov	r0, r3
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800104a:	b480      	push	{r7}
 800104c:	b083      	sub	sp, #12
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
 8001052:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800105a:	605a      	str	r2, [r3, #4]
	return 0;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <_isatty>:

int _isatty(int file)
{
 800106a:	b480      	push	{r7}
 800106c:	b083      	sub	sp, #12
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
	return 1;
 8001072:	2301      	movs	r3, #1
}
 8001074:	4618      	mov	r0, r3
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
	return 0;
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3714      	adds	r7, #20
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
	...

0800109c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010a4:	4a14      	ldr	r2, [pc, #80]	; (80010f8 <_sbrk+0x5c>)
 80010a6:	4b15      	ldr	r3, [pc, #84]	; (80010fc <_sbrk+0x60>)
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b0:	4b13      	ldr	r3, [pc, #76]	; (8001100 <_sbrk+0x64>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d102      	bne.n	80010be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010b8:	4b11      	ldr	r3, [pc, #68]	; (8001100 <_sbrk+0x64>)
 80010ba:	4a12      	ldr	r2, [pc, #72]	; (8001104 <_sbrk+0x68>)
 80010bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010be:	4b10      	ldr	r3, [pc, #64]	; (8001100 <_sbrk+0x64>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d207      	bcs.n	80010dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010cc:	f006 fd1a 	bl	8007b04 <__errno>
 80010d0:	4603      	mov	r3, r0
 80010d2:	220c      	movs	r2, #12
 80010d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295
 80010da:	e009      	b.n	80010f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <_sbrk+0x64>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010e2:	4b07      	ldr	r3, [pc, #28]	; (8001100 <_sbrk+0x64>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4413      	add	r3, r2
 80010ea:	4a05      	ldr	r2, [pc, #20]	; (8001100 <_sbrk+0x64>)
 80010ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ee:	68fb      	ldr	r3, [r7, #12]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20020000 	.word	0x20020000
 80010fc:	00000400 	.word	0x00000400
 8001100:	200001b0 	.word	0x200001b0
 8001104:	200002f0 	.word	0x200002f0

08001108 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <SystemInit+0x20>)
 800110e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001112:	4a05      	ldr	r2, [pc, #20]	; (8001128 <SystemInit+0x20>)
 8001114:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001118:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b09c      	sub	sp, #112	; 0x70
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001132:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001140:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800114c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
 800115c:	615a      	str	r2, [r3, #20]
 800115e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	2234      	movs	r2, #52	; 0x34
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f006 fcf6 	bl	8007b58 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800116c:	4b4c      	ldr	r3, [pc, #304]	; (80012a0 <MX_TIM1_Init+0x174>)
 800116e:	4a4d      	ldr	r2, [pc, #308]	; (80012a4 <MX_TIM1_Init+0x178>)
 8001170:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10;
 8001172:	4b4b      	ldr	r3, [pc, #300]	; (80012a0 <MX_TIM1_Init+0x174>)
 8001174:	220a      	movs	r2, #10
 8001176:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001178:	4b49      	ldr	r3, [pc, #292]	; (80012a0 <MX_TIM1_Init+0x174>)
 800117a:	2220      	movs	r2, #32
 800117c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 800117e:	4b48      	ldr	r3, [pc, #288]	; (80012a0 <MX_TIM1_Init+0x174>)
 8001180:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001184:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001186:	4b46      	ldr	r3, [pc, #280]	; (80012a0 <MX_TIM1_Init+0x174>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800118c:	4b44      	ldr	r3, [pc, #272]	; (80012a0 <MX_TIM1_Init+0x174>)
 800118e:	2200      	movs	r2, #0
 8001190:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001192:	4b43      	ldr	r3, [pc, #268]	; (80012a0 <MX_TIM1_Init+0x174>)
 8001194:	2200      	movs	r2, #0
 8001196:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001198:	4841      	ldr	r0, [pc, #260]	; (80012a0 <MX_TIM1_Init+0x174>)
 800119a:	f002 ff19 	bl	8003fd0 <HAL_TIM_Base_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80011a4:	f7ff fbfc 	bl	80009a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ac:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011ae:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011b2:	4619      	mov	r1, r3
 80011b4:	483a      	ldr	r0, [pc, #232]	; (80012a0 <MX_TIM1_Init+0x174>)
 80011b6:	f003 fbe3 	bl	8004980 <HAL_TIM_ConfigClockSource>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80011c0:	f7ff fbee 	bl	80009a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011c4:	4836      	ldr	r0, [pc, #216]	; (80012a0 <MX_TIM1_Init+0x174>)
 80011c6:	f002 ffd3 	bl	8004170 <HAL_TIM_PWM_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80011d0:	f7ff fbe6 	bl	80009a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d4:	2300      	movs	r3, #0
 80011d6:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011d8:	2300      	movs	r3, #0
 80011da:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011e4:	4619      	mov	r1, r3
 80011e6:	482e      	ldr	r0, [pc, #184]	; (80012a0 <MX_TIM1_Init+0x174>)
 80011e8:	f004 fa5e 	bl	80056a8 <HAL_TIMEx_MasterConfigSynchronization>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80011f2:	f7ff fbd5 	bl	80009a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011f6:	2360      	movs	r3, #96	; 0x60
 80011f8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 512;
 80011fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001200:	2300      	movs	r3, #0
 8001202:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001204:	2300      	movs	r3, #0
 8001206:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001208:	2300      	movs	r3, #0
 800120a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800120c:	2300      	movs	r3, #0
 800120e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001210:	2300      	movs	r3, #0
 8001212:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001214:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001218:	2200      	movs	r2, #0
 800121a:	4619      	mov	r1, r3
 800121c:	4820      	ldr	r0, [pc, #128]	; (80012a0 <MX_TIM1_Init+0x174>)
 800121e:	f003 fa9b 	bl	8004758 <HAL_TIM_PWM_ConfigChannel>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001228:	f7ff fbba 	bl	80009a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800122c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001230:	2204      	movs	r2, #4
 8001232:	4619      	mov	r1, r3
 8001234:	481a      	ldr	r0, [pc, #104]	; (80012a0 <MX_TIM1_Init+0x174>)
 8001236:	f003 fa8f 	bl	8004758 <HAL_TIM_PWM_ConfigChannel>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001240:	f7ff fbae 	bl	80009a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001248:	2300      	movs	r3, #0
 800124a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800124c:	2300      	movs	r3, #0
 800124e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 202;
 8001250:	23ca      	movs	r3, #202	; 0xca
 8001252:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001258:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800125c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001262:	2300      	movs	r3, #0
 8001264:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001266:	2300      	movs	r3, #0
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800126a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800126e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001274:	2300      	movs	r3, #0
 8001276:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001278:	2300      	movs	r3, #0
 800127a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	4619      	mov	r1, r3
 8001280:	4807      	ldr	r0, [pc, #28]	; (80012a0 <MX_TIM1_Init+0x174>)
 8001282:	f004 faa7 	bl	80057d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 800128c:	f7ff fb88 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001290:	4803      	ldr	r0, [pc, #12]	; (80012a0 <MX_TIM1_Init+0x174>)
 8001292:	f000 f837 	bl	8001304 <HAL_TIM_MspPostInit>

}
 8001296:	bf00      	nop
 8001298:	3770      	adds	r7, #112	; 0x70
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	200001b4 	.word	0x200001b4
 80012a4:	40012c00 	.word	0x40012c00

080012a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a11      	ldr	r2, [pc, #68]	; (80012fc <HAL_TIM_Base_MspInit+0x54>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d11b      	bne.n	80012f2 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012ba:	4b11      	ldr	r3, [pc, #68]	; (8001300 <HAL_TIM_Base_MspInit+0x58>)
 80012bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012be:	4a10      	ldr	r2, [pc, #64]	; (8001300 <HAL_TIM_Base_MspInit+0x58>)
 80012c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012c4:	6613      	str	r3, [r2, #96]	; 0x60
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <HAL_TIM_Base_MspInit+0x58>)
 80012c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2100      	movs	r1, #0
 80012d6:	2018      	movs	r0, #24
 80012d8:	f001 fb52 	bl	8002980 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80012dc:	2018      	movs	r0, #24
 80012de:	f001 fb69 	bl	80029b4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2100      	movs	r1, #0
 80012e6:	2019      	movs	r0, #25
 80012e8:	f001 fb4a 	bl	8002980 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80012ec:	2019      	movs	r0, #25
 80012ee:	f001 fb61 	bl	80029b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40012c00 	.word	0x40012c00
 8001300:	40021000 	.word	0x40021000

08001304 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b088      	sub	sp, #32
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130c:	f107 030c 	add.w	r3, r7, #12
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a12      	ldr	r2, [pc, #72]	; (800136c <HAL_TIM_MspPostInit+0x68>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d11d      	bne.n	8001362 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001326:	4b12      	ldr	r3, [pc, #72]	; (8001370 <HAL_TIM_MspPostInit+0x6c>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132a:	4a11      	ldr	r2, [pc, #68]	; (8001370 <HAL_TIM_MspPostInit+0x6c>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001332:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <HAL_TIM_MspPostInit+0x6c>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 800133e:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8001342:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001344:	2302      	movs	r3, #2
 8001346:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2300      	movs	r3, #0
 800134e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001350:	2306      	movs	r3, #6
 8001352:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001354:	f107 030c 	add.w	r3, r7, #12
 8001358:	4619      	mov	r1, r3
 800135a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800135e:	f001 fbf7 	bl	8002b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001362:	bf00      	nop
 8001364:	3720      	adds	r7, #32
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40012c00 	.word	0x40012c00
 8001370:	40021000 	.word	0x40021000

08001374 <HAL_UART_RxCpltCallback>:

/**
  * @brief  Function called at each new character received
  * @retval None
  */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <HAL_UART_RxCpltCallback+0x20>)
 800137e:	2201      	movs	r2, #1
 8001380:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001382:	2201      	movs	r2, #1
 8001384:	4904      	ldr	r1, [pc, #16]	; (8001398 <HAL_UART_RxCpltCallback+0x24>)
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <HAL_UART_RxCpltCallback+0x28>)
 8001388:	f004 fc28 	bl	8005bdc <HAL_UART_Receive_IT>
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000200 	.word	0x20000200
 8001398:	20000204 	.word	0x20000204
 800139c:	2000024c 	.word	0x2000024c

080013a0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013a4:	4b22      	ldr	r3, [pc, #136]	; (8001430 <MX_USART2_UART_Init+0x90>)
 80013a6:	4a23      	ldr	r2, [pc, #140]	; (8001434 <MX_USART2_UART_Init+0x94>)
 80013a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013aa:	4b21      	ldr	r3, [pc, #132]	; (8001430 <MX_USART2_UART_Init+0x90>)
 80013ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013b2:	4b1f      	ldr	r3, [pc, #124]	; (8001430 <MX_USART2_UART_Init+0x90>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013b8:	4b1d      	ldr	r3, [pc, #116]	; (8001430 <MX_USART2_UART_Init+0x90>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013be:	4b1c      	ldr	r3, [pc, #112]	; (8001430 <MX_USART2_UART_Init+0x90>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013c4:	4b1a      	ldr	r3, [pc, #104]	; (8001430 <MX_USART2_UART_Init+0x90>)
 80013c6:	220c      	movs	r2, #12
 80013c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ca:	4b19      	ldr	r3, [pc, #100]	; (8001430 <MX_USART2_UART_Init+0x90>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d0:	4b17      	ldr	r3, [pc, #92]	; (8001430 <MX_USART2_UART_Init+0x90>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013d6:	4b16      	ldr	r3, [pc, #88]	; (8001430 <MX_USART2_UART_Init+0x90>)
 80013d8:	2200      	movs	r2, #0
 80013da:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013dc:	4b14      	ldr	r3, [pc, #80]	; (8001430 <MX_USART2_UART_Init+0x90>)
 80013de:	2200      	movs	r2, #0
 80013e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013e2:	4b13      	ldr	r3, [pc, #76]	; (8001430 <MX_USART2_UART_Init+0x90>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013e8:	4811      	ldr	r0, [pc, #68]	; (8001430 <MX_USART2_UART_Init+0x90>)
 80013ea:	f004 fb10 	bl	8005a0e <HAL_UART_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80013f4:	f7ff fad4 	bl	80009a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013f8:	2100      	movs	r1, #0
 80013fa:	480d      	ldr	r0, [pc, #52]	; (8001430 <MX_USART2_UART_Init+0x90>)
 80013fc:	f006 fab3 	bl	8007966 <HAL_UARTEx_SetTxFifoThreshold>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001406:	f7ff facb 	bl	80009a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800140a:	2100      	movs	r1, #0
 800140c:	4808      	ldr	r0, [pc, #32]	; (8001430 <MX_USART2_UART_Init+0x90>)
 800140e:	f006 fae8 	bl	80079e2 <HAL_UARTEx_SetRxFifoThreshold>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001418:	f7ff fac2 	bl	80009a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800141c:	4804      	ldr	r0, [pc, #16]	; (8001430 <MX_USART2_UART_Init+0x90>)
 800141e:	f006 fa69 	bl	80078f4 <HAL_UARTEx_DisableFifoMode>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001428:	f7ff faba 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	2000024c 	.word	0x2000024c
 8001434:	40004400 	.word	0x40004400

08001438 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b09e      	sub	sp, #120	; 0x78
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001450:	f107 0310 	add.w	r3, r7, #16
 8001454:	2254      	movs	r2, #84	; 0x54
 8001456:	2100      	movs	r1, #0
 8001458:	4618      	mov	r0, r3
 800145a:	f006 fb7d 	bl	8007b58 <memset>
  if(uartHandle->Instance==USART2)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a23      	ldr	r2, [pc, #140]	; (80014f0 <HAL_UART_MspInit+0xb8>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d13e      	bne.n	80014e6 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001468:	2302      	movs	r3, #2
 800146a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800146c:	2300      	movs	r3, #0
 800146e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001470:	f107 0310 	add.w	r3, r7, #16
 8001474:	4618      	mov	r0, r3
 8001476:	f002 fb5d 	bl	8003b34 <HAL_RCCEx_PeriphCLKConfig>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001480:	f7ff fa8e 	bl	80009a0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001484:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <HAL_UART_MspInit+0xbc>)
 8001486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001488:	4a1a      	ldr	r2, [pc, #104]	; (80014f4 <HAL_UART_MspInit+0xbc>)
 800148a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800148e:	6593      	str	r3, [r2, #88]	; 0x58
 8001490:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <HAL_UART_MspInit+0xbc>)
 8001492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149c:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <HAL_UART_MspInit+0xbc>)
 800149e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a0:	4a14      	ldr	r2, [pc, #80]	; (80014f4 <HAL_UART_MspInit+0xbc>)
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <HAL_UART_MspInit+0xbc>)
 80014aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014b4:	230c      	movs	r3, #12
 80014b6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2300      	movs	r3, #0
 80014c2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014c4:	2307      	movs	r3, #7
 80014c6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80014cc:	4619      	mov	r1, r3
 80014ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d2:	f001 fb3d 	bl	8002b50 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2100      	movs	r1, #0
 80014da:	2026      	movs	r0, #38	; 0x26
 80014dc:	f001 fa50 	bl	8002980 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014e0:	2026      	movs	r0, #38	; 0x26
 80014e2:	f001 fa67 	bl	80029b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80014e6:	bf00      	nop
 80014e8:	3778      	adds	r7, #120	; 0x78
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40004400 	.word	0x40004400
 80014f4:	40021000 	.word	0x40021000

080014f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014f8:	480d      	ldr	r0, [pc, #52]	; (8001530 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014fa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014fc:	480d      	ldr	r0, [pc, #52]	; (8001534 <LoopForever+0x6>)
  ldr r1, =_edata
 80014fe:	490e      	ldr	r1, [pc, #56]	; (8001538 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001500:	4a0e      	ldr	r2, [pc, #56]	; (800153c <LoopForever+0xe>)
  movs r3, #0
 8001502:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001504:	e002      	b.n	800150c <LoopCopyDataInit>

08001506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800150a:	3304      	adds	r3, #4

0800150c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800150c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800150e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001510:	d3f9      	bcc.n	8001506 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001512:	4a0b      	ldr	r2, [pc, #44]	; (8001540 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001514:	4c0b      	ldr	r4, [pc, #44]	; (8001544 <LoopForever+0x16>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001518:	e001      	b.n	800151e <LoopFillZerobss>

0800151a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800151a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800151c:	3204      	adds	r2, #4

0800151e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800151e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001520:	d3fb      	bcc.n	800151a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001522:	f7ff fdf1 	bl	8001108 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001526:	f006 faf3 	bl	8007b10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800152a:	f7ff f99d 	bl	8000868 <main>

0800152e <LoopForever>:

LoopForever:
    b LoopForever
 800152e:	e7fe      	b.n	800152e <LoopForever>
  ldr   r0, =_estack
 8001530:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001534:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001538:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800153c:	08009724 	.word	0x08009724
  ldr r2, =_sbss
 8001540:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001544:	200002f0 	.word	0x200002f0

08001548 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001548:	e7fe      	b.n	8001548 <ADC1_2_IRQHandler>

0800154a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001550:	2300      	movs	r3, #0
 8001552:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001554:	2003      	movs	r0, #3
 8001556:	f001 fa08 	bl	800296a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800155a:	200f      	movs	r0, #15
 800155c:	f7ff fc42 	bl	8000de4 <HAL_InitTick>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d002      	beq.n	800156c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	71fb      	strb	r3, [r7, #7]
 800156a:	e001      	b.n	8001570 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800156c:	f7ff fc16 	bl	8000d9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001570:	79fb      	ldrb	r3, [r7, #7]

}
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <HAL_IncTick+0x1c>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4b05      	ldr	r3, [pc, #20]	; (800159c <HAL_IncTick+0x20>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4413      	add	r3, r2
 800158a:	4a03      	ldr	r2, [pc, #12]	; (8001598 <HAL_IncTick+0x1c>)
 800158c:	6013      	str	r3, [r2, #0]
}
 800158e:	bf00      	nop
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	200002dc 	.word	0x200002dc
 800159c:	20000008 	.word	0x20000008

080015a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return uwTick;
 80015a4:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <HAL_GetTick+0x14>)
 80015a6:	681b      	ldr	r3, [r3, #0]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	200002dc 	.word	0x200002dc

080015b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015c0:	f7ff ffee 	bl	80015a0 <HAL_GetTick>
 80015c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d0:	d004      	beq.n	80015dc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80015d2:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <HAL_Delay+0x40>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	4413      	add	r3, r2
 80015da:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015dc:	bf00      	nop
 80015de:	f7ff ffdf 	bl	80015a0 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	68fa      	ldr	r2, [r7, #12]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d8f7      	bhi.n	80015de <HAL_Delay+0x26>
  {
  }
}
 80015ee:	bf00      	nop
 80015f0:	bf00      	nop
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000008 	.word	0x20000008

080015fc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	431a      	orrs	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	609a      	str	r2, [r3, #8]
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
 800162a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	431a      	orrs	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	609a      	str	r2, [r3, #8]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001658:	4618      	mov	r0, r3
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001664:	b480      	push	{r7}
 8001666:	b087      	sub	sp, #28
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
 8001670:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	3360      	adds	r3, #96	; 0x60
 8001676:	461a      	mov	r2, r3
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <LL_ADC_SetOffset+0x44>)
 8001686:	4013      	ands	r3, r2
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	430a      	orrs	r2, r1
 8001692:	4313      	orrs	r3, r2
 8001694:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800169c:	bf00      	nop
 800169e:	371c      	adds	r7, #28
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	03fff000 	.word	0x03fff000

080016ac <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	3360      	adds	r3, #96	; 0x60
 80016ba:	461a      	mov	r2, r3
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4413      	add	r3, r2
 80016c2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80016d8:	b480      	push	{r7}
 80016da:	b087      	sub	sp, #28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	3360      	adds	r3, #96	; 0x60
 80016e8:	461a      	mov	r2, r3
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	431a      	orrs	r2, r3
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001702:	bf00      	nop
 8001704:	371c      	adds	r7, #28
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800170e:	b480      	push	{r7}
 8001710:	b087      	sub	sp, #28
 8001712:	af00      	add	r7, sp, #0
 8001714:	60f8      	str	r0, [r7, #12]
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	3360      	adds	r3, #96	; 0x60
 800171e:	461a      	mov	r2, r3
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	431a      	orrs	r2, r3
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001738:	bf00      	nop
 800173a:	371c      	adds	r7, #28
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001744:	b480      	push	{r7}
 8001746:	b087      	sub	sp, #28
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	3360      	adds	r3, #96	; 0x60
 8001754:	461a      	mov	r2, r3
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	431a      	orrs	r2, r3
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800176e:	bf00      	nop
 8001770:	371c      	adds	r7, #28
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
 8001782:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	695b      	ldr	r3, [r3, #20]
 8001788:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	431a      	orrs	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	615a      	str	r2, [r3, #20]
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b087      	sub	sp, #28
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	3330      	adds	r3, #48	; 0x30
 80017b0:	461a      	mov	r2, r3
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	0a1b      	lsrs	r3, r3, #8
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	f003 030c 	and.w	r3, r3, #12
 80017bc:	4413      	add	r3, r2
 80017be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	f003 031f 	and.w	r3, r3, #31
 80017ca:	211f      	movs	r1, #31
 80017cc:	fa01 f303 	lsl.w	r3, r1, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	401a      	ands	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	0e9b      	lsrs	r3, r3, #26
 80017d8:	f003 011f 	and.w	r1, r3, #31
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	f003 031f 	and.w	r3, r3, #31
 80017e2:	fa01 f303 	lsl.w	r3, r1, r3
 80017e6:	431a      	orrs	r2, r3
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80017ec:	bf00      	nop
 80017ee:	371c      	adds	r7, #28
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b087      	sub	sp, #28
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	3314      	adds	r3, #20
 8001808:	461a      	mov	r2, r3
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	0e5b      	lsrs	r3, r3, #25
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	4413      	add	r3, r2
 8001816:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	0d1b      	lsrs	r3, r3, #20
 8001820:	f003 031f 	and.w	r3, r3, #31
 8001824:	2107      	movs	r1, #7
 8001826:	fa01 f303 	lsl.w	r3, r1, r3
 800182a:	43db      	mvns	r3, r3
 800182c:	401a      	ands	r2, r3
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	0d1b      	lsrs	r3, r3, #20
 8001832:	f003 031f 	and.w	r3, r3, #31
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	fa01 f303 	lsl.w	r3, r1, r3
 800183c:	431a      	orrs	r2, r3
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001842:	bf00      	nop
 8001844:	371c      	adds	r7, #28
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
	...

08001850 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a0f      	ldr	r2, [pc, #60]	; (800189c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d10a      	bne.n	800187a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001870:	431a      	orrs	r2, r3
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001878:	e00a      	b.n	8001890 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001886:	43db      	mvns	r3, r3
 8001888:	401a      	ands	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001890:	bf00      	nop
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	407f0000 	.word	0x407f0000

080018a0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80018b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6093      	str	r3, [r2, #8]
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018d8:	d101      	bne.n	80018de <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80018da:	2301      	movs	r3, #1
 80018dc:	e000      	b.n	80018e0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80018fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001900:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001924:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001928:	d101      	bne.n	800192e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800192a:	2301      	movs	r3, #1
 800192c:	e000      	b.n	8001930 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b01      	cmp	r3, #1
 800194e:	d101      	bne.n	8001954 <LL_ADC_IsEnabled+0x18>
 8001950:	2301      	movs	r3, #1
 8001952:	e000      	b.n	8001956 <LL_ADC_IsEnabled+0x1a>
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 0304 	and.w	r3, r3, #4
 8001972:	2b04      	cmp	r3, #4
 8001974:	d101      	bne.n	800197a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001976:	2301      	movs	r3, #1
 8001978:	e000      	b.n	800197c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 0308 	and.w	r3, r3, #8
 8001998:	2b08      	cmp	r3, #8
 800199a:	d101      	bne.n	80019a0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800199c:	2301      	movs	r3, #1
 800199e:	e000      	b.n	80019a2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
	...

080019b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019b0:	b590      	push	{r4, r7, lr}
 80019b2:	b089      	sub	sp, #36	; 0x24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019b8:	2300      	movs	r3, #0
 80019ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80019bc:	2300      	movs	r3, #0
 80019be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e1af      	b.n	8001d2a <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d109      	bne.n	80019ec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7fe fe7b 	bl	80006d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff ff67 	bl	80018c4 <LL_ADC_IsDeepPowerDownEnabled>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d004      	beq.n	8001a06 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff ff4d 	bl	80018a0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff ff82 	bl	8001914 <LL_ADC_IsInternalRegulatorEnabled>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d115      	bne.n	8001a42 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff ff66 	bl	80018ec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a20:	4b9f      	ldr	r3, [pc, #636]	; (8001ca0 <HAL_ADC_Init+0x2f0>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	099b      	lsrs	r3, r3, #6
 8001a26:	4a9f      	ldr	r2, [pc, #636]	; (8001ca4 <HAL_ADC_Init+0x2f4>)
 8001a28:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2c:	099b      	lsrs	r3, r3, #6
 8001a2e:	3301      	adds	r3, #1
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a34:	e002      	b.n	8001a3c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f9      	bne.n	8001a36 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff ff64 	bl	8001914 <LL_ADC_IsInternalRegulatorEnabled>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10d      	bne.n	8001a6e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a56:	f043 0210 	orr.w	r2, r3, #16
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a62:	f043 0201 	orr.w	r2, r3, #1
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff ff75 	bl	8001962 <LL_ADC_REG_IsConversionOngoing>
 8001a78:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a7e:	f003 0310 	and.w	r3, r3, #16
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f040 8148 	bne.w	8001d18 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f040 8144 	bne.w	8001d18 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a94:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001a98:	f043 0202 	orr.w	r2, r3, #2
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff49 	bl	800193c <LL_ADC_IsEnabled>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d141      	bne.n	8001b34 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ab8:	d004      	beq.n	8001ac4 <HAL_ADC_Init+0x114>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a7a      	ldr	r2, [pc, #488]	; (8001ca8 <HAL_ADC_Init+0x2f8>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d10f      	bne.n	8001ae4 <HAL_ADC_Init+0x134>
 8001ac4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001ac8:	f7ff ff38 	bl	800193c <LL_ADC_IsEnabled>
 8001acc:	4604      	mov	r4, r0
 8001ace:	4876      	ldr	r0, [pc, #472]	; (8001ca8 <HAL_ADC_Init+0x2f8>)
 8001ad0:	f7ff ff34 	bl	800193c <LL_ADC_IsEnabled>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	4323      	orrs	r3, r4
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	bf0c      	ite	eq
 8001adc:	2301      	moveq	r3, #1
 8001ade:	2300      	movne	r3, #0
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	e012      	b.n	8001b0a <HAL_ADC_Init+0x15a>
 8001ae4:	4871      	ldr	r0, [pc, #452]	; (8001cac <HAL_ADC_Init+0x2fc>)
 8001ae6:	f7ff ff29 	bl	800193c <LL_ADC_IsEnabled>
 8001aea:	4604      	mov	r4, r0
 8001aec:	4870      	ldr	r0, [pc, #448]	; (8001cb0 <HAL_ADC_Init+0x300>)
 8001aee:	f7ff ff25 	bl	800193c <LL_ADC_IsEnabled>
 8001af2:	4603      	mov	r3, r0
 8001af4:	431c      	orrs	r4, r3
 8001af6:	486f      	ldr	r0, [pc, #444]	; (8001cb4 <HAL_ADC_Init+0x304>)
 8001af8:	f7ff ff20 	bl	800193c <LL_ADC_IsEnabled>
 8001afc:	4603      	mov	r3, r0
 8001afe:	4323      	orrs	r3, r4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	bf0c      	ite	eq
 8001b04:	2301      	moveq	r3, #1
 8001b06:	2300      	movne	r3, #0
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d012      	beq.n	8001b34 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b16:	d004      	beq.n	8001b22 <HAL_ADC_Init+0x172>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a62      	ldr	r2, [pc, #392]	; (8001ca8 <HAL_ADC_Init+0x2f8>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d101      	bne.n	8001b26 <HAL_ADC_Init+0x176>
 8001b22:	4a65      	ldr	r2, [pc, #404]	; (8001cb8 <HAL_ADC_Init+0x308>)
 8001b24:	e000      	b.n	8001b28 <HAL_ADC_Init+0x178>
 8001b26:	4a65      	ldr	r2, [pc, #404]	; (8001cbc <HAL_ADC_Init+0x30c>)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4610      	mov	r0, r2
 8001b30:	f7ff fd64 	bl	80015fc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	7f5b      	ldrb	r3, [r3, #29]
 8001b38:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b3e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001b44:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001b4a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b52:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d106      	bne.n	8001b70 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b66:	3b01      	subs	r3, #1
 8001b68:	045b      	lsls	r3, r3, #17
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d009      	beq.n	8001b8c <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b84:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68da      	ldr	r2, [r3, #12]
 8001b92:	4b4b      	ldr	r3, [pc, #300]	; (8001cc0 <HAL_ADC_Init+0x310>)
 8001b94:	4013      	ands	r3, r2
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	6812      	ldr	r2, [r2, #0]
 8001b9a:	69b9      	ldr	r1, [r7, #24]
 8001b9c:	430b      	orrs	r3, r1
 8001b9e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff fed1 	bl	8001962 <LL_ADC_REG_IsConversionOngoing>
 8001bc0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fede 	bl	8001988 <LL_ADC_INJ_IsConversionOngoing>
 8001bcc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d17f      	bne.n	8001cd4 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d17c      	bne.n	8001cd4 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bde:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001be6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bf6:	f023 0302 	bic.w	r3, r3, #2
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6812      	ldr	r2, [r2, #0]
 8001bfe:	69b9      	ldr	r1, [r7, #24]
 8001c00:	430b      	orrs	r3, r1
 8001c02:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d017      	beq.n	8001c3c <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	691a      	ldr	r2, [r3, #16]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001c1a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001c24:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	6911      	ldr	r1, [r2, #16]
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	6812      	ldr	r2, [r2, #0]
 8001c34:	430b      	orrs	r3, r1
 8001c36:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001c3a:	e013      	b.n	8001c64 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	691a      	ldr	r2, [r3, #16]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c4a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	6812      	ldr	r2, [r2, #0]
 8001c58:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c60:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d12a      	bne.n	8001cc4 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001c78:	f023 0304 	bic.w	r3, r3, #4
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c84:	4311      	orrs	r1, r2
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001c8a:	4311      	orrs	r1, r2
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c90:	430a      	orrs	r2, r1
 8001c92:	431a      	orrs	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f042 0201 	orr.w	r2, r2, #1
 8001c9c:	611a      	str	r2, [r3, #16]
 8001c9e:	e019      	b.n	8001cd4 <HAL_ADC_Init+0x324>
 8001ca0:	20000000 	.word	0x20000000
 8001ca4:	053e2d63 	.word	0x053e2d63
 8001ca8:	50000100 	.word	0x50000100
 8001cac:	50000400 	.word	0x50000400
 8001cb0:	50000500 	.word	0x50000500
 8001cb4:	50000600 	.word	0x50000600
 8001cb8:	50000300 	.word	0x50000300
 8001cbc:	50000700 	.word	0x50000700
 8001cc0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	691a      	ldr	r2, [r3, #16]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f022 0201 	bic.w	r2, r2, #1
 8001cd2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d10c      	bne.n	8001cf6 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	f023 010f 	bic.w	r1, r3, #15
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	1e5a      	subs	r2, r3, #1
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	631a      	str	r2, [r3, #48]	; 0x30
 8001cf4:	e007      	b.n	8001d06 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f022 020f 	bic.w	r2, r2, #15
 8001d04:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d0a:	f023 0303 	bic.w	r3, r3, #3
 8001d0e:	f043 0201 	orr.w	r2, r3, #1
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d16:	e007      	b.n	8001d28 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d1c:	f043 0210 	orr.w	r2, r3, #16
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d28:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3724      	adds	r7, #36	; 0x24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd90      	pop	{r4, r7, pc}
 8001d32:	bf00      	nop

08001d34 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b0b6      	sub	sp, #216	; 0xd8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d102      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x24>
 8001d52:	2302      	movs	r3, #2
 8001d54:	f000 bc13 	b.w	800257e <HAL_ADC_ConfigChannel+0x84a>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff fdfc 	bl	8001962 <LL_ADC_REG_IsConversionOngoing>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f040 83f3 	bne.w	8002558 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6818      	ldr	r0, [r3, #0]
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	6859      	ldr	r1, [r3, #4]
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	f7ff fd0e 	bl	80017a0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff fdea 	bl	8001962 <LL_ADC_REG_IsConversionOngoing>
 8001d8e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff fdf6 	bl	8001988 <LL_ADC_INJ_IsConversionOngoing>
 8001d9c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001da0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f040 81d9 	bne.w	800215c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001daa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f040 81d4 	bne.w	800215c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001dbc:	d10f      	bne.n	8001dde <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6818      	ldr	r0, [r3, #0]
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f7ff fd15 	bl	80017f8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff fccf 	bl	800177a <LL_ADC_SetSamplingTimeCommonConfig>
 8001ddc:	e00e      	b.n	8001dfc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6818      	ldr	r0, [r3, #0]
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	6819      	ldr	r1, [r3, #0]
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	461a      	mov	r2, r3
 8001dec:	f7ff fd04 	bl	80017f8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2100      	movs	r1, #0
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff fcbf 	bl	800177a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	695a      	ldr	r2, [r3, #20]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	08db      	lsrs	r3, r3, #3
 8001e08:	f003 0303 	and.w	r3, r3, #3
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	d022      	beq.n	8001e64 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6818      	ldr	r0, [r3, #0]
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	6919      	ldr	r1, [r3, #16]
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001e2e:	f7ff fc19 	bl	8001664 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6818      	ldr	r0, [r3, #0]
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	6919      	ldr	r1, [r3, #16]
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	f7ff fc65 	bl	800170e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6818      	ldr	r0, [r3, #0]
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	6919      	ldr	r1, [r3, #16]
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	7f1b      	ldrb	r3, [r3, #28]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d102      	bne.n	8001e5a <HAL_ADC_ConfigChannel+0x126>
 8001e54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e58:	e000      	b.n	8001e5c <HAL_ADC_ConfigChannel+0x128>
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	f7ff fc71 	bl	8001744 <LL_ADC_SetOffsetSaturation>
 8001e62:	e17b      	b.n	800215c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff fc1e 	bl	80016ac <LL_ADC_GetOffsetChannel>
 8001e70:	4603      	mov	r3, r0
 8001e72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10a      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x15c>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2100      	movs	r1, #0
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff fc13 	bl	80016ac <LL_ADC_GetOffsetChannel>
 8001e86:	4603      	mov	r3, r0
 8001e88:	0e9b      	lsrs	r3, r3, #26
 8001e8a:	f003 021f 	and.w	r2, r3, #31
 8001e8e:	e01e      	b.n	8001ece <HAL_ADC_ConfigChannel+0x19a>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2100      	movs	r1, #0
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff fc08 	bl	80016ac <LL_ADC_GetOffsetChannel>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001ea6:	fa93 f3a3 	rbit	r3, r3
 8001eaa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001eae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001eb2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001eb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001ebe:	2320      	movs	r3, #32
 8001ec0:	e004      	b.n	8001ecc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001ec2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ec6:	fab3 f383 	clz	r3, r3
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d105      	bne.n	8001ee6 <HAL_ADC_ConfigChannel+0x1b2>
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	0e9b      	lsrs	r3, r3, #26
 8001ee0:	f003 031f 	and.w	r3, r3, #31
 8001ee4:	e018      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x1e4>
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001ef2:	fa93 f3a3 	rbit	r3, r3
 8001ef6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001efa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001efe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001f02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001f0a:	2320      	movs	r3, #32
 8001f0c:	e004      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001f0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f12:	fab3 f383 	clz	r3, r3
 8001f16:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d106      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2200      	movs	r2, #0
 8001f22:	2100      	movs	r1, #0
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff fbd7 	bl	80016d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2101      	movs	r1, #1
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff fbbb 	bl	80016ac <LL_ADC_GetOffsetChannel>
 8001f36:	4603      	mov	r3, r0
 8001f38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d10a      	bne.n	8001f56 <HAL_ADC_ConfigChannel+0x222>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2101      	movs	r1, #1
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff fbb0 	bl	80016ac <LL_ADC_GetOffsetChannel>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	0e9b      	lsrs	r3, r3, #26
 8001f50:	f003 021f 	and.w	r2, r3, #31
 8001f54:	e01e      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x260>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff fba5 	bl	80016ac <LL_ADC_GetOffsetChannel>
 8001f62:	4603      	mov	r3, r0
 8001f64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f6c:	fa93 f3a3 	rbit	r3, r3
 8001f70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001f74:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001f7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001f84:	2320      	movs	r3, #32
 8001f86:	e004      	b.n	8001f92 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001f88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f8c:	fab3 f383 	clz	r3, r3
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d105      	bne.n	8001fac <HAL_ADC_ConfigChannel+0x278>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	0e9b      	lsrs	r3, r3, #26
 8001fa6:	f003 031f 	and.w	r3, r3, #31
 8001faa:	e018      	b.n	8001fde <HAL_ADC_ConfigChannel+0x2aa>
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001fb8:	fa93 f3a3 	rbit	r3, r3
 8001fbc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001fc0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001fc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001fc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001fd0:	2320      	movs	r3, #32
 8001fd2:	e004      	b.n	8001fde <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001fd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001fd8:	fab3 f383 	clz	r3, r3
 8001fdc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d106      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	2101      	movs	r1, #1
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff fb74 	bl	80016d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2102      	movs	r1, #2
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff fb58 	bl	80016ac <LL_ADC_GetOffsetChannel>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002002:	2b00      	cmp	r3, #0
 8002004:	d10a      	bne.n	800201c <HAL_ADC_ConfigChannel+0x2e8>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2102      	movs	r1, #2
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff fb4d 	bl	80016ac <LL_ADC_GetOffsetChannel>
 8002012:	4603      	mov	r3, r0
 8002014:	0e9b      	lsrs	r3, r3, #26
 8002016:	f003 021f 	and.w	r2, r3, #31
 800201a:	e01e      	b.n	800205a <HAL_ADC_ConfigChannel+0x326>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2102      	movs	r1, #2
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff fb42 	bl	80016ac <LL_ADC_GetOffsetChannel>
 8002028:	4603      	mov	r3, r0
 800202a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002032:	fa93 f3a3 	rbit	r3, r3
 8002036:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800203a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800203e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002042:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800204a:	2320      	movs	r3, #32
 800204c:	e004      	b.n	8002058 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800204e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002052:	fab3 f383 	clz	r3, r3
 8002056:	b2db      	uxtb	r3, r3
 8002058:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002062:	2b00      	cmp	r3, #0
 8002064:	d105      	bne.n	8002072 <HAL_ADC_ConfigChannel+0x33e>
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	0e9b      	lsrs	r3, r3, #26
 800206c:	f003 031f 	and.w	r3, r3, #31
 8002070:	e016      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x36c>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800207e:	fa93 f3a3 	rbit	r3, r3
 8002082:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002084:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002086:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800208a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002092:	2320      	movs	r3, #32
 8002094:	e004      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002096:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800209a:	fab3 f383 	clz	r3, r3
 800209e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d106      	bne.n	80020b2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2200      	movs	r2, #0
 80020aa:	2102      	movs	r1, #2
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff fb13 	bl	80016d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2103      	movs	r1, #3
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff faf7 	bl	80016ac <LL_ADC_GetOffsetChannel>
 80020be:	4603      	mov	r3, r0
 80020c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d10a      	bne.n	80020de <HAL_ADC_ConfigChannel+0x3aa>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2103      	movs	r1, #3
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff faec 	bl	80016ac <LL_ADC_GetOffsetChannel>
 80020d4:	4603      	mov	r3, r0
 80020d6:	0e9b      	lsrs	r3, r3, #26
 80020d8:	f003 021f 	and.w	r2, r3, #31
 80020dc:	e017      	b.n	800210e <HAL_ADC_ConfigChannel+0x3da>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2103      	movs	r1, #3
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff fae1 	bl	80016ac <LL_ADC_GetOffsetChannel>
 80020ea:	4603      	mov	r3, r0
 80020ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020f0:	fa93 f3a3 	rbit	r3, r3
 80020f4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80020f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020f8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80020fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d101      	bne.n	8002104 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002100:	2320      	movs	r3, #32
 8002102:	e003      	b.n	800210c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002104:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002106:	fab3 f383 	clz	r3, r3
 800210a:	b2db      	uxtb	r3, r3
 800210c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002116:	2b00      	cmp	r3, #0
 8002118:	d105      	bne.n	8002126 <HAL_ADC_ConfigChannel+0x3f2>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	0e9b      	lsrs	r3, r3, #26
 8002120:	f003 031f 	and.w	r3, r3, #31
 8002124:	e011      	b.n	800214a <HAL_ADC_ConfigChannel+0x416>
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800212e:	fa93 f3a3 	rbit	r3, r3
 8002132:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002134:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002136:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800213e:	2320      	movs	r3, #32
 8002140:	e003      	b.n	800214a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002144:	fab3 f383 	clz	r3, r3
 8002148:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800214a:	429a      	cmp	r2, r3
 800214c:	d106      	bne.n	800215c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2200      	movs	r2, #0
 8002154:	2103      	movs	r1, #3
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff fabe 	bl	80016d8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff fbeb 	bl	800193c <LL_ADC_IsEnabled>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	f040 813d 	bne.w	80023e8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6818      	ldr	r0, [r3, #0]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	6819      	ldr	r1, [r3, #0]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	461a      	mov	r2, r3
 800217c:	f7ff fb68 	bl	8001850 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	4aa2      	ldr	r2, [pc, #648]	; (8002410 <HAL_ADC_ConfigChannel+0x6dc>)
 8002186:	4293      	cmp	r3, r2
 8002188:	f040 812e 	bne.w	80023e8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002198:	2b00      	cmp	r3, #0
 800219a:	d10b      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x480>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	0e9b      	lsrs	r3, r3, #26
 80021a2:	3301      	adds	r3, #1
 80021a4:	f003 031f 	and.w	r3, r3, #31
 80021a8:	2b09      	cmp	r3, #9
 80021aa:	bf94      	ite	ls
 80021ac:	2301      	movls	r3, #1
 80021ae:	2300      	movhi	r3, #0
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	e019      	b.n	80021e8 <HAL_ADC_ConfigChannel+0x4b4>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021bc:	fa93 f3a3 	rbit	r3, r3
 80021c0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80021c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021c4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80021c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80021cc:	2320      	movs	r3, #32
 80021ce:	e003      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80021d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021d2:	fab3 f383 	clz	r3, r3
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	3301      	adds	r3, #1
 80021da:	f003 031f 	and.w	r3, r3, #31
 80021de:	2b09      	cmp	r3, #9
 80021e0:	bf94      	ite	ls
 80021e2:	2301      	movls	r3, #1
 80021e4:	2300      	movhi	r3, #0
 80021e6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d079      	beq.n	80022e0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d107      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x4d4>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	0e9b      	lsrs	r3, r3, #26
 80021fe:	3301      	adds	r3, #1
 8002200:	069b      	lsls	r3, r3, #26
 8002202:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002206:	e015      	b.n	8002234 <HAL_ADC_ConfigChannel+0x500>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002210:	fa93 f3a3 	rbit	r3, r3
 8002214:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002218:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800221a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002220:	2320      	movs	r3, #32
 8002222:	e003      	b.n	800222c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002224:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002226:	fab3 f383 	clz	r3, r3
 800222a:	b2db      	uxtb	r3, r3
 800222c:	3301      	adds	r3, #1
 800222e:	069b      	lsls	r3, r3, #26
 8002230:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800223c:	2b00      	cmp	r3, #0
 800223e:	d109      	bne.n	8002254 <HAL_ADC_ConfigChannel+0x520>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	0e9b      	lsrs	r3, r3, #26
 8002246:	3301      	adds	r3, #1
 8002248:	f003 031f 	and.w	r3, r3, #31
 800224c:	2101      	movs	r1, #1
 800224e:	fa01 f303 	lsl.w	r3, r1, r3
 8002252:	e017      	b.n	8002284 <HAL_ADC_ConfigChannel+0x550>
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800225c:	fa93 f3a3 	rbit	r3, r3
 8002260:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002264:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800226c:	2320      	movs	r3, #32
 800226e:	e003      	b.n	8002278 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002270:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002272:	fab3 f383 	clz	r3, r3
 8002276:	b2db      	uxtb	r3, r3
 8002278:	3301      	adds	r3, #1
 800227a:	f003 031f 	and.w	r3, r3, #31
 800227e:	2101      	movs	r1, #1
 8002280:	fa01 f303 	lsl.w	r3, r1, r3
 8002284:	ea42 0103 	orr.w	r1, r2, r3
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10a      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x576>
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	0e9b      	lsrs	r3, r3, #26
 800229a:	3301      	adds	r3, #1
 800229c:	f003 021f 	and.w	r2, r3, #31
 80022a0:	4613      	mov	r3, r2
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	4413      	add	r3, r2
 80022a6:	051b      	lsls	r3, r3, #20
 80022a8:	e018      	b.n	80022dc <HAL_ADC_ConfigChannel+0x5a8>
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022b2:	fa93 f3a3 	rbit	r3, r3
 80022b6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80022b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80022bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80022c2:	2320      	movs	r3, #32
 80022c4:	e003      	b.n	80022ce <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80022c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022c8:	fab3 f383 	clz	r3, r3
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	3301      	adds	r3, #1
 80022d0:	f003 021f 	and.w	r2, r3, #31
 80022d4:	4613      	mov	r3, r2
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	4413      	add	r3, r2
 80022da:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022dc:	430b      	orrs	r3, r1
 80022de:	e07e      	b.n	80023de <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d107      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x5c8>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	0e9b      	lsrs	r3, r3, #26
 80022f2:	3301      	adds	r3, #1
 80022f4:	069b      	lsls	r3, r3, #26
 80022f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022fa:	e015      	b.n	8002328 <HAL_ADC_ConfigChannel+0x5f4>
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002304:	fa93 f3a3 	rbit	r3, r3
 8002308:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800230a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800230c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800230e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002314:	2320      	movs	r3, #32
 8002316:	e003      	b.n	8002320 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800231a:	fab3 f383 	clz	r3, r3
 800231e:	b2db      	uxtb	r3, r3
 8002320:	3301      	adds	r3, #1
 8002322:	069b      	lsls	r3, r3, #26
 8002324:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002330:	2b00      	cmp	r3, #0
 8002332:	d109      	bne.n	8002348 <HAL_ADC_ConfigChannel+0x614>
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	0e9b      	lsrs	r3, r3, #26
 800233a:	3301      	adds	r3, #1
 800233c:	f003 031f 	and.w	r3, r3, #31
 8002340:	2101      	movs	r1, #1
 8002342:	fa01 f303 	lsl.w	r3, r1, r3
 8002346:	e017      	b.n	8002378 <HAL_ADC_ConfigChannel+0x644>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234e:	6a3b      	ldr	r3, [r7, #32]
 8002350:	fa93 f3a3 	rbit	r3, r3
 8002354:	61fb      	str	r3, [r7, #28]
  return result;
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002360:	2320      	movs	r3, #32
 8002362:	e003      	b.n	800236c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	fab3 f383 	clz	r3, r3
 800236a:	b2db      	uxtb	r3, r3
 800236c:	3301      	adds	r3, #1
 800236e:	f003 031f 	and.w	r3, r3, #31
 8002372:	2101      	movs	r1, #1
 8002374:	fa01 f303 	lsl.w	r3, r1, r3
 8002378:	ea42 0103 	orr.w	r1, r2, r3
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002384:	2b00      	cmp	r3, #0
 8002386:	d10d      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x670>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	0e9b      	lsrs	r3, r3, #26
 800238e:	3301      	adds	r3, #1
 8002390:	f003 021f 	and.w	r2, r3, #31
 8002394:	4613      	mov	r3, r2
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	4413      	add	r3, r2
 800239a:	3b1e      	subs	r3, #30
 800239c:	051b      	lsls	r3, r3, #20
 800239e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023a2:	e01b      	b.n	80023dc <HAL_ADC_ConfigChannel+0x6a8>
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	fa93 f3a3 	rbit	r3, r3
 80023b0:	613b      	str	r3, [r7, #16]
  return result;
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80023bc:	2320      	movs	r3, #32
 80023be:	e003      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	fab3 f383 	clz	r3, r3
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	3301      	adds	r3, #1
 80023ca:	f003 021f 	and.w	r2, r3, #31
 80023ce:	4613      	mov	r3, r2
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	4413      	add	r3, r2
 80023d4:	3b1e      	subs	r3, #30
 80023d6:	051b      	lsls	r3, r3, #20
 80023d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023dc:	430b      	orrs	r3, r1
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	6892      	ldr	r2, [r2, #8]
 80023e2:	4619      	mov	r1, r3
 80023e4:	f7ff fa08 	bl	80017f8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4b09      	ldr	r3, [pc, #36]	; (8002414 <HAL_ADC_ConfigChannel+0x6e0>)
 80023ee:	4013      	ands	r3, r2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 80be 	beq.w	8002572 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023fe:	d004      	beq.n	800240a <HAL_ADC_ConfigChannel+0x6d6>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a04      	ldr	r2, [pc, #16]	; (8002418 <HAL_ADC_ConfigChannel+0x6e4>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d10a      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x6ec>
 800240a:	4b04      	ldr	r3, [pc, #16]	; (800241c <HAL_ADC_ConfigChannel+0x6e8>)
 800240c:	e009      	b.n	8002422 <HAL_ADC_ConfigChannel+0x6ee>
 800240e:	bf00      	nop
 8002410:	407f0000 	.word	0x407f0000
 8002414:	80080000 	.word	0x80080000
 8002418:	50000100 	.word	0x50000100
 800241c:	50000300 	.word	0x50000300
 8002420:	4b59      	ldr	r3, [pc, #356]	; (8002588 <HAL_ADC_ConfigChannel+0x854>)
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff f910 	bl	8001648 <LL_ADC_GetCommonPathInternalCh>
 8002428:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a56      	ldr	r2, [pc, #344]	; (800258c <HAL_ADC_ConfigChannel+0x858>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d004      	beq.n	8002440 <HAL_ADC_ConfigChannel+0x70c>
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a55      	ldr	r2, [pc, #340]	; (8002590 <HAL_ADC_ConfigChannel+0x85c>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d13a      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002440:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002444:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d134      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002454:	d005      	beq.n	8002462 <HAL_ADC_ConfigChannel+0x72e>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a4e      	ldr	r2, [pc, #312]	; (8002594 <HAL_ADC_ConfigChannel+0x860>)
 800245c:	4293      	cmp	r3, r2
 800245e:	f040 8085 	bne.w	800256c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800246a:	d004      	beq.n	8002476 <HAL_ADC_ConfigChannel+0x742>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a49      	ldr	r2, [pc, #292]	; (8002598 <HAL_ADC_ConfigChannel+0x864>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d101      	bne.n	800247a <HAL_ADC_ConfigChannel+0x746>
 8002476:	4a49      	ldr	r2, [pc, #292]	; (800259c <HAL_ADC_ConfigChannel+0x868>)
 8002478:	e000      	b.n	800247c <HAL_ADC_ConfigChannel+0x748>
 800247a:	4a43      	ldr	r2, [pc, #268]	; (8002588 <HAL_ADC_ConfigChannel+0x854>)
 800247c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002480:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002484:	4619      	mov	r1, r3
 8002486:	4610      	mov	r0, r2
 8002488:	f7ff f8cb 	bl	8001622 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800248c:	4b44      	ldr	r3, [pc, #272]	; (80025a0 <HAL_ADC_ConfigChannel+0x86c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	099b      	lsrs	r3, r3, #6
 8002492:	4a44      	ldr	r2, [pc, #272]	; (80025a4 <HAL_ADC_ConfigChannel+0x870>)
 8002494:	fba2 2303 	umull	r2, r3, r2, r3
 8002498:	099b      	lsrs	r3, r3, #6
 800249a:	1c5a      	adds	r2, r3, #1
 800249c:	4613      	mov	r3, r2
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	4413      	add	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80024a6:	e002      	b.n	80024ae <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1f9      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024b4:	e05a      	b.n	800256c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a3b      	ldr	r2, [pc, #236]	; (80025a8 <HAL_ADC_ConfigChannel+0x874>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d125      	bne.n	800250c <HAL_ADC_ConfigChannel+0x7d8>
 80024c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d11f      	bne.n	800250c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a31      	ldr	r2, [pc, #196]	; (8002598 <HAL_ADC_ConfigChannel+0x864>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d104      	bne.n	80024e0 <HAL_ADC_ConfigChannel+0x7ac>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a34      	ldr	r2, [pc, #208]	; (80025ac <HAL_ADC_ConfigChannel+0x878>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d047      	beq.n	8002570 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024e8:	d004      	beq.n	80024f4 <HAL_ADC_ConfigChannel+0x7c0>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a2a      	ldr	r2, [pc, #168]	; (8002598 <HAL_ADC_ConfigChannel+0x864>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d101      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x7c4>
 80024f4:	4a29      	ldr	r2, [pc, #164]	; (800259c <HAL_ADC_ConfigChannel+0x868>)
 80024f6:	e000      	b.n	80024fa <HAL_ADC_ConfigChannel+0x7c6>
 80024f8:	4a23      	ldr	r2, [pc, #140]	; (8002588 <HAL_ADC_ConfigChannel+0x854>)
 80024fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002502:	4619      	mov	r1, r3
 8002504:	4610      	mov	r0, r2
 8002506:	f7ff f88c 	bl	8001622 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800250a:	e031      	b.n	8002570 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a27      	ldr	r2, [pc, #156]	; (80025b0 <HAL_ADC_ConfigChannel+0x87c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d12d      	bne.n	8002572 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002516:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800251a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d127      	bne.n	8002572 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a1c      	ldr	r2, [pc, #112]	; (8002598 <HAL_ADC_ConfigChannel+0x864>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d022      	beq.n	8002572 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002534:	d004      	beq.n	8002540 <HAL_ADC_ConfigChannel+0x80c>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a17      	ldr	r2, [pc, #92]	; (8002598 <HAL_ADC_ConfigChannel+0x864>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d101      	bne.n	8002544 <HAL_ADC_ConfigChannel+0x810>
 8002540:	4a16      	ldr	r2, [pc, #88]	; (800259c <HAL_ADC_ConfigChannel+0x868>)
 8002542:	e000      	b.n	8002546 <HAL_ADC_ConfigChannel+0x812>
 8002544:	4a10      	ldr	r2, [pc, #64]	; (8002588 <HAL_ADC_ConfigChannel+0x854>)
 8002546:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800254a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800254e:	4619      	mov	r1, r3
 8002550:	4610      	mov	r0, r2
 8002552:	f7ff f866 	bl	8001622 <LL_ADC_SetCommonPathInternalCh>
 8002556:	e00c      	b.n	8002572 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800255c:	f043 0220 	orr.w	r2, r3, #32
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800256a:	e002      	b.n	8002572 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800256c:	bf00      	nop
 800256e:	e000      	b.n	8002572 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002570:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800257a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800257e:	4618      	mov	r0, r3
 8002580:	37d8      	adds	r7, #216	; 0xd8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	50000700 	.word	0x50000700
 800258c:	c3210000 	.word	0xc3210000
 8002590:	90c00010 	.word	0x90c00010
 8002594:	50000600 	.word	0x50000600
 8002598:	50000100 	.word	0x50000100
 800259c:	50000300 	.word	0x50000300
 80025a0:	20000000 	.word	0x20000000
 80025a4:	053e2d63 	.word	0x053e2d63
 80025a8:	c7520000 	.word	0xc7520000
 80025ac:	50000500 	.word	0x50000500
 80025b0:	cb840000 	.word	0xcb840000

080025b4 <LL_ADC_IsEnabled>:
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d101      	bne.n	80025cc <LL_ADC_IsEnabled+0x18>
 80025c8:	2301      	movs	r3, #1
 80025ca:	e000      	b.n	80025ce <LL_ADC_IsEnabled+0x1a>
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <LL_ADC_REG_IsConversionOngoing>:
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 0304 	and.w	r3, r3, #4
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d101      	bne.n	80025f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80025ee:	2301      	movs	r3, #1
 80025f0:	e000      	b.n	80025f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002600:	b590      	push	{r4, r7, lr}
 8002602:	b0a1      	sub	sp, #132	; 0x84
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800260a:	2300      	movs	r3, #0
 800260c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002616:	2b01      	cmp	r3, #1
 8002618:	d101      	bne.n	800261e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800261a:	2302      	movs	r3, #2
 800261c:	e0e7      	b.n	80027ee <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002626:	2300      	movs	r3, #0
 8002628:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800262a:	2300      	movs	r3, #0
 800262c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002636:	d102      	bne.n	800263e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002638:	4b6f      	ldr	r3, [pc, #444]	; (80027f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800263a:	60bb      	str	r3, [r7, #8]
 800263c:	e009      	b.n	8002652 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a6e      	ldr	r2, [pc, #440]	; (80027fc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d102      	bne.n	800264e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002648:	4b6d      	ldr	r3, [pc, #436]	; (8002800 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800264a:	60bb      	str	r3, [r7, #8]
 800264c:	e001      	b.n	8002652 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800264e:	2300      	movs	r3, #0
 8002650:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10b      	bne.n	8002670 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265c:	f043 0220 	orr.w	r2, r3, #32
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e0be      	b.n	80027ee <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff ffb1 	bl	80025da <LL_ADC_REG_IsConversionOngoing>
 8002678:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff ffab 	bl	80025da <LL_ADC_REG_IsConversionOngoing>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	f040 80a0 	bne.w	80027cc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800268c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800268e:	2b00      	cmp	r3, #0
 8002690:	f040 809c 	bne.w	80027cc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800269c:	d004      	beq.n	80026a8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a55      	ldr	r2, [pc, #340]	; (80027f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d101      	bne.n	80026ac <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80026a8:	4b56      	ldr	r3, [pc, #344]	; (8002804 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80026aa:	e000      	b.n	80026ae <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80026ac:	4b56      	ldr	r3, [pc, #344]	; (8002808 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80026ae:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d04b      	beq.n	8002750 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80026b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	6859      	ldr	r1, [r3, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026ca:	035b      	lsls	r3, r3, #13
 80026cc:	430b      	orrs	r3, r1
 80026ce:	431a      	orrs	r2, r3
 80026d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026d2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026dc:	d004      	beq.n	80026e8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a45      	ldr	r2, [pc, #276]	; (80027f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d10f      	bne.n	8002708 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80026e8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80026ec:	f7ff ff62 	bl	80025b4 <LL_ADC_IsEnabled>
 80026f0:	4604      	mov	r4, r0
 80026f2:	4841      	ldr	r0, [pc, #260]	; (80027f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80026f4:	f7ff ff5e 	bl	80025b4 <LL_ADC_IsEnabled>
 80026f8:	4603      	mov	r3, r0
 80026fa:	4323      	orrs	r3, r4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	bf0c      	ite	eq
 8002700:	2301      	moveq	r3, #1
 8002702:	2300      	movne	r3, #0
 8002704:	b2db      	uxtb	r3, r3
 8002706:	e012      	b.n	800272e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002708:	483c      	ldr	r0, [pc, #240]	; (80027fc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800270a:	f7ff ff53 	bl	80025b4 <LL_ADC_IsEnabled>
 800270e:	4604      	mov	r4, r0
 8002710:	483b      	ldr	r0, [pc, #236]	; (8002800 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002712:	f7ff ff4f 	bl	80025b4 <LL_ADC_IsEnabled>
 8002716:	4603      	mov	r3, r0
 8002718:	431c      	orrs	r4, r3
 800271a:	483c      	ldr	r0, [pc, #240]	; (800280c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800271c:	f7ff ff4a 	bl	80025b4 <LL_ADC_IsEnabled>
 8002720:	4603      	mov	r3, r0
 8002722:	4323      	orrs	r3, r4
 8002724:	2b00      	cmp	r3, #0
 8002726:	bf0c      	ite	eq
 8002728:	2301      	moveq	r3, #1
 800272a:	2300      	movne	r3, #0
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d056      	beq.n	80027e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002732:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800273a:	f023 030f 	bic.w	r3, r3, #15
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	6811      	ldr	r1, [r2, #0]
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	6892      	ldr	r2, [r2, #8]
 8002746:	430a      	orrs	r2, r1
 8002748:	431a      	orrs	r2, r3
 800274a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800274c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800274e:	e047      	b.n	80027e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002750:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002758:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800275a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002764:	d004      	beq.n	8002770 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a23      	ldr	r2, [pc, #140]	; (80027f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d10f      	bne.n	8002790 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002770:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002774:	f7ff ff1e 	bl	80025b4 <LL_ADC_IsEnabled>
 8002778:	4604      	mov	r4, r0
 800277a:	481f      	ldr	r0, [pc, #124]	; (80027f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800277c:	f7ff ff1a 	bl	80025b4 <LL_ADC_IsEnabled>
 8002780:	4603      	mov	r3, r0
 8002782:	4323      	orrs	r3, r4
 8002784:	2b00      	cmp	r3, #0
 8002786:	bf0c      	ite	eq
 8002788:	2301      	moveq	r3, #1
 800278a:	2300      	movne	r3, #0
 800278c:	b2db      	uxtb	r3, r3
 800278e:	e012      	b.n	80027b6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002790:	481a      	ldr	r0, [pc, #104]	; (80027fc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002792:	f7ff ff0f 	bl	80025b4 <LL_ADC_IsEnabled>
 8002796:	4604      	mov	r4, r0
 8002798:	4819      	ldr	r0, [pc, #100]	; (8002800 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800279a:	f7ff ff0b 	bl	80025b4 <LL_ADC_IsEnabled>
 800279e:	4603      	mov	r3, r0
 80027a0:	431c      	orrs	r4, r3
 80027a2:	481a      	ldr	r0, [pc, #104]	; (800280c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80027a4:	f7ff ff06 	bl	80025b4 <LL_ADC_IsEnabled>
 80027a8:	4603      	mov	r3, r0
 80027aa:	4323      	orrs	r3, r4
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	bf0c      	ite	eq
 80027b0:	2301      	moveq	r3, #1
 80027b2:	2300      	movne	r3, #0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d012      	beq.n	80027e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80027ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80027c2:	f023 030f 	bic.w	r3, r3, #15
 80027c6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80027c8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80027ca:	e009      	b.n	80027e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d0:	f043 0220 	orr.w	r2, r3, #32
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80027de:	e000      	b.n	80027e2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80027e0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80027ea:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3784      	adds	r7, #132	; 0x84
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd90      	pop	{r4, r7, pc}
 80027f6:	bf00      	nop
 80027f8:	50000100 	.word	0x50000100
 80027fc:	50000400 	.word	0x50000400
 8002800:	50000500 	.word	0x50000500
 8002804:	50000300 	.word	0x50000300
 8002808:	50000700 	.word	0x50000700
 800280c:	50000600 	.word	0x50000600

08002810 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002820:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <__NVIC_SetPriorityGrouping+0x44>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002826:	68ba      	ldr	r2, [r7, #8]
 8002828:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800282c:	4013      	ands	r3, r2
 800282e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002838:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800283c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002840:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002842:	4a04      	ldr	r2, [pc, #16]	; (8002854 <__NVIC_SetPriorityGrouping+0x44>)
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	60d3      	str	r3, [r2, #12]
}
 8002848:	bf00      	nop
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	e000ed00 	.word	0xe000ed00

08002858 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800285c:	4b04      	ldr	r3, [pc, #16]	; (8002870 <__NVIC_GetPriorityGrouping+0x18>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	0a1b      	lsrs	r3, r3, #8
 8002862:	f003 0307 	and.w	r3, r3, #7
}
 8002866:	4618      	mov	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	e000ed00 	.word	0xe000ed00

08002874 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800287e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002882:	2b00      	cmp	r3, #0
 8002884:	db0b      	blt.n	800289e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002886:	79fb      	ldrb	r3, [r7, #7]
 8002888:	f003 021f 	and.w	r2, r3, #31
 800288c:	4907      	ldr	r1, [pc, #28]	; (80028ac <__NVIC_EnableIRQ+0x38>)
 800288e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002892:	095b      	lsrs	r3, r3, #5
 8002894:	2001      	movs	r0, #1
 8002896:	fa00 f202 	lsl.w	r2, r0, r2
 800289a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	e000e100 	.word	0xe000e100

080028b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	6039      	str	r1, [r7, #0]
 80028ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	db0a      	blt.n	80028da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	490c      	ldr	r1, [pc, #48]	; (80028fc <__NVIC_SetPriority+0x4c>)
 80028ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ce:	0112      	lsls	r2, r2, #4
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	440b      	add	r3, r1
 80028d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028d8:	e00a      	b.n	80028f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	4908      	ldr	r1, [pc, #32]	; (8002900 <__NVIC_SetPriority+0x50>)
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	3b04      	subs	r3, #4
 80028e8:	0112      	lsls	r2, r2, #4
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	440b      	add	r3, r1
 80028ee:	761a      	strb	r2, [r3, #24]
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	e000e100 	.word	0xe000e100
 8002900:	e000ed00 	.word	0xe000ed00

08002904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002904:	b480      	push	{r7}
 8002906:	b089      	sub	sp, #36	; 0x24
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f1c3 0307 	rsb	r3, r3, #7
 800291e:	2b04      	cmp	r3, #4
 8002920:	bf28      	it	cs
 8002922:	2304      	movcs	r3, #4
 8002924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	3304      	adds	r3, #4
 800292a:	2b06      	cmp	r3, #6
 800292c:	d902      	bls.n	8002934 <NVIC_EncodePriority+0x30>
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	3b03      	subs	r3, #3
 8002932:	e000      	b.n	8002936 <NVIC_EncodePriority+0x32>
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002938:	f04f 32ff 	mov.w	r2, #4294967295
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43da      	mvns	r2, r3
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	401a      	ands	r2, r3
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800294c:	f04f 31ff 	mov.w	r1, #4294967295
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	fa01 f303 	lsl.w	r3, r1, r3
 8002956:	43d9      	mvns	r1, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800295c:	4313      	orrs	r3, r2
         );
}
 800295e:	4618      	mov	r0, r3
 8002960:	3724      	adds	r7, #36	; 0x24
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b082      	sub	sp, #8
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7ff ff4c 	bl	8002810 <__NVIC_SetPriorityGrouping>
}
 8002978:	bf00      	nop
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
 800298c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800298e:	f7ff ff63 	bl	8002858 <__NVIC_GetPriorityGrouping>
 8002992:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	68b9      	ldr	r1, [r7, #8]
 8002998:	6978      	ldr	r0, [r7, #20]
 800299a:	f7ff ffb3 	bl	8002904 <NVIC_EncodePriority>
 800299e:	4602      	mov	r2, r0
 80029a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029a4:	4611      	mov	r1, r2
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff ff82 	bl	80028b0 <__NVIC_SetPriority>
}
 80029ac:	bf00      	nop
 80029ae:	3718      	adds	r7, #24
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff ff56 	bl	8002874 <__NVIC_EnableIRQ>
}
 80029c8:	bf00      	nop
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029d8:	2300      	movs	r3, #0
 80029da:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d005      	beq.n	80029f4 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2204      	movs	r2, #4
 80029ec:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	73fb      	strb	r3, [r7, #15]
 80029f2:	e037      	b.n	8002a64 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 020e 	bic.w	r2, r2, #14
 8002a02:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a12:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0201 	bic.w	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a28:	f003 021f 	and.w	r2, r3, #31
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	2101      	movs	r1, #1
 8002a32:	fa01 f202 	lsl.w	r2, r1, r2
 8002a36:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002a40:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00c      	beq.n	8002a64 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a58:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002a62:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b084      	sub	sp, #16
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d00d      	beq.n	8002ab6 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2204      	movs	r2, #4
 8002a9e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	73fb      	strb	r3, [r7, #15]
 8002ab4:	e047      	b.n	8002b46 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 020e 	bic.w	r2, r2, #14
 8002ac4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0201 	bic.w	r2, r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ae0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ae4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aea:	f003 021f 	and.w	r2, r3, #31
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	2101      	movs	r1, #1
 8002af4:	fa01 f202 	lsl.w	r2, r1, r2
 8002af8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002b02:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00c      	beq.n	8002b26 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b1a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002b24:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	4798      	blx	r3
    }
  }
  return status;
 8002b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002b5e:	e15a      	b.n	8002e16 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	2101      	movs	r1, #1
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 814c 	beq.w	8002e10 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f003 0303 	and.w	r3, r3, #3
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d005      	beq.n	8002b90 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d130      	bne.n	8002bf2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	2203      	movs	r2, #3
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	68da      	ldr	r2, [r3, #12]
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	091b      	lsrs	r3, r3, #4
 8002bdc:	f003 0201 	and.w	r2, r3, #1
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f003 0303 	and.w	r3, r3, #3
 8002bfa:	2b03      	cmp	r3, #3
 8002bfc:	d017      	beq.n	8002c2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	2203      	movs	r2, #3
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	43db      	mvns	r3, r3
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	4013      	ands	r3, r2
 8002c14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d123      	bne.n	8002c82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	08da      	lsrs	r2, r3, #3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	3208      	adds	r2, #8
 8002c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	220f      	movs	r2, #15
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	43db      	mvns	r3, r3
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	691a      	ldr	r2, [r3, #16]
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	f003 0307 	and.w	r3, r3, #7
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	08da      	lsrs	r2, r3, #3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3208      	adds	r2, #8
 8002c7c:	6939      	ldr	r1, [r7, #16]
 8002c7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	2203      	movs	r2, #3
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	43db      	mvns	r3, r3
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	4013      	ands	r3, r2
 8002c98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f003 0203 	and.w	r2, r3, #3
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f000 80a6 	beq.w	8002e10 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cc4:	4b5b      	ldr	r3, [pc, #364]	; (8002e34 <HAL_GPIO_Init+0x2e4>)
 8002cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cc8:	4a5a      	ldr	r2, [pc, #360]	; (8002e34 <HAL_GPIO_Init+0x2e4>)
 8002cca:	f043 0301 	orr.w	r3, r3, #1
 8002cce:	6613      	str	r3, [r2, #96]	; 0x60
 8002cd0:	4b58      	ldr	r3, [pc, #352]	; (8002e34 <HAL_GPIO_Init+0x2e4>)
 8002cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	60bb      	str	r3, [r7, #8]
 8002cda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cdc:	4a56      	ldr	r2, [pc, #344]	; (8002e38 <HAL_GPIO_Init+0x2e8>)
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	089b      	lsrs	r3, r3, #2
 8002ce2:	3302      	adds	r3, #2
 8002ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	f003 0303 	and.w	r3, r3, #3
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	220f      	movs	r2, #15
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d06:	d01f      	beq.n	8002d48 <HAL_GPIO_Init+0x1f8>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a4c      	ldr	r2, [pc, #304]	; (8002e3c <HAL_GPIO_Init+0x2ec>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d019      	beq.n	8002d44 <HAL_GPIO_Init+0x1f4>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a4b      	ldr	r2, [pc, #300]	; (8002e40 <HAL_GPIO_Init+0x2f0>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d013      	beq.n	8002d40 <HAL_GPIO_Init+0x1f0>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a4a      	ldr	r2, [pc, #296]	; (8002e44 <HAL_GPIO_Init+0x2f4>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d00d      	beq.n	8002d3c <HAL_GPIO_Init+0x1ec>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a49      	ldr	r2, [pc, #292]	; (8002e48 <HAL_GPIO_Init+0x2f8>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d007      	beq.n	8002d38 <HAL_GPIO_Init+0x1e8>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a48      	ldr	r2, [pc, #288]	; (8002e4c <HAL_GPIO_Init+0x2fc>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d101      	bne.n	8002d34 <HAL_GPIO_Init+0x1e4>
 8002d30:	2305      	movs	r3, #5
 8002d32:	e00a      	b.n	8002d4a <HAL_GPIO_Init+0x1fa>
 8002d34:	2306      	movs	r3, #6
 8002d36:	e008      	b.n	8002d4a <HAL_GPIO_Init+0x1fa>
 8002d38:	2304      	movs	r3, #4
 8002d3a:	e006      	b.n	8002d4a <HAL_GPIO_Init+0x1fa>
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e004      	b.n	8002d4a <HAL_GPIO_Init+0x1fa>
 8002d40:	2302      	movs	r3, #2
 8002d42:	e002      	b.n	8002d4a <HAL_GPIO_Init+0x1fa>
 8002d44:	2301      	movs	r3, #1
 8002d46:	e000      	b.n	8002d4a <HAL_GPIO_Init+0x1fa>
 8002d48:	2300      	movs	r3, #0
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	f002 0203 	and.w	r2, r2, #3
 8002d50:	0092      	lsls	r2, r2, #2
 8002d52:	4093      	lsls	r3, r2
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d5a:	4937      	ldr	r1, [pc, #220]	; (8002e38 <HAL_GPIO_Init+0x2e8>)
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	089b      	lsrs	r3, r3, #2
 8002d60:	3302      	adds	r3, #2
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d68:	4b39      	ldr	r3, [pc, #228]	; (8002e50 <HAL_GPIO_Init+0x300>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	43db      	mvns	r3, r3
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	4013      	ands	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d003      	beq.n	8002d8c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d8c:	4a30      	ldr	r2, [pc, #192]	; (8002e50 <HAL_GPIO_Init+0x300>)
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d92:	4b2f      	ldr	r3, [pc, #188]	; (8002e50 <HAL_GPIO_Init+0x300>)
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002db6:	4a26      	ldr	r2, [pc, #152]	; (8002e50 <HAL_GPIO_Init+0x300>)
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002dbc:	4b24      	ldr	r3, [pc, #144]	; (8002e50 <HAL_GPIO_Init+0x300>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d003      	beq.n	8002de0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002de0:	4a1b      	ldr	r2, [pc, #108]	; (8002e50 <HAL_GPIO_Init+0x300>)
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002de6:	4b1a      	ldr	r3, [pc, #104]	; (8002e50 <HAL_GPIO_Init+0x300>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	43db      	mvns	r3, r3
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	4013      	ands	r3, r2
 8002df4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e0a:	4a11      	ldr	r2, [pc, #68]	; (8002e50 <HAL_GPIO_Init+0x300>)
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	3301      	adds	r3, #1
 8002e14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f47f ae9d 	bne.w	8002b60 <HAL_GPIO_Init+0x10>
  }
}
 8002e26:	bf00      	nop
 8002e28:	bf00      	nop
 8002e2a:	371c      	adds	r7, #28
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr
 8002e34:	40021000 	.word	0x40021000
 8002e38:	40010000 	.word	0x40010000
 8002e3c:	48000400 	.word	0x48000400
 8002e40:	48000800 	.word	0x48000800
 8002e44:	48000c00 	.word	0x48000c00
 8002e48:	48001000 	.word	0x48001000
 8002e4c:	48001400 	.word	0x48001400
 8002e50:	40010400 	.word	0x40010400

08002e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	807b      	strh	r3, [r7, #2]
 8002e60:	4613      	mov	r3, r2
 8002e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e64:	787b      	ldrb	r3, [r7, #1]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e6a:	887a      	ldrh	r2, [r7, #2]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e70:	e002      	b.n	8002e78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e72:	887a      	ldrh	r2, [r7, #2]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e96:	887a      	ldrh	r2, [r7, #2]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	041a      	lsls	r2, r3, #16
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	43d9      	mvns	r1, r3
 8002ea2:	887b      	ldrh	r3, [r7, #2]
 8002ea4:	400b      	ands	r3, r1
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	619a      	str	r2, [r3, #24]
}
 8002eac:	bf00      	nop
 8002eae:	3714      	adds	r7, #20
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ec2:	4b08      	ldr	r3, [pc, #32]	; (8002ee4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ec4:	695a      	ldr	r2, [r3, #20]
 8002ec6:	88fb      	ldrh	r3, [r7, #6]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d006      	beq.n	8002edc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ece:	4a05      	ldr	r2, [pc, #20]	; (8002ee4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ed0:	88fb      	ldrh	r3, [r7, #6]
 8002ed2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ed4:	88fb      	ldrh	r3, [r7, #6]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f000 f806 	bl	8002ee8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002edc:	bf00      	nop
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40010400 	.word	0x40010400

08002ee8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	4603      	mov	r3, r0
 8002ef0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
	...

08002f00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d141      	bne.n	8002f92 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f0e:	4b4b      	ldr	r3, [pc, #300]	; (800303c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f1a:	d131      	bne.n	8002f80 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f1c:	4b47      	ldr	r3, [pc, #284]	; (800303c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f22:	4a46      	ldr	r2, [pc, #280]	; (800303c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f2c:	4b43      	ldr	r3, [pc, #268]	; (800303c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f34:	4a41      	ldr	r2, [pc, #260]	; (800303c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f3c:	4b40      	ldr	r3, [pc, #256]	; (8003040 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2232      	movs	r2, #50	; 0x32
 8002f42:	fb02 f303 	mul.w	r3, r2, r3
 8002f46:	4a3f      	ldr	r2, [pc, #252]	; (8003044 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f48:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4c:	0c9b      	lsrs	r3, r3, #18
 8002f4e:	3301      	adds	r3, #1
 8002f50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f52:	e002      	b.n	8002f5a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	3b01      	subs	r3, #1
 8002f58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f5a:	4b38      	ldr	r3, [pc, #224]	; (800303c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f66:	d102      	bne.n	8002f6e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1f2      	bne.n	8002f54 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f6e:	4b33      	ldr	r3, [pc, #204]	; (800303c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f7a:	d158      	bne.n	800302e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e057      	b.n	8003030 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f80:	4b2e      	ldr	r3, [pc, #184]	; (800303c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f86:	4a2d      	ldr	r2, [pc, #180]	; (800303c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002f90:	e04d      	b.n	800302e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f98:	d141      	bne.n	800301e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f9a:	4b28      	ldr	r3, [pc, #160]	; (800303c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002fa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fa6:	d131      	bne.n	800300c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fa8:	4b24      	ldr	r3, [pc, #144]	; (800303c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002faa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fae:	4a23      	ldr	r2, [pc, #140]	; (800303c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fb8:	4b20      	ldr	r3, [pc, #128]	; (800303c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fc0:	4a1e      	ldr	r2, [pc, #120]	; (800303c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fc6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fc8:	4b1d      	ldr	r3, [pc, #116]	; (8003040 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2232      	movs	r2, #50	; 0x32
 8002fce:	fb02 f303 	mul.w	r3, r2, r3
 8002fd2:	4a1c      	ldr	r2, [pc, #112]	; (8003044 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd8:	0c9b      	lsrs	r3, r3, #18
 8002fda:	3301      	adds	r3, #1
 8002fdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fde:	e002      	b.n	8002fe6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fe6:	4b15      	ldr	r3, [pc, #84]	; (800303c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ff2:	d102      	bne.n	8002ffa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1f2      	bne.n	8002fe0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ffa:	4b10      	ldr	r3, [pc, #64]	; (800303c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003006:	d112      	bne.n	800302e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e011      	b.n	8003030 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800300c:	4b0b      	ldr	r3, [pc, #44]	; (800303c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800300e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003012:	4a0a      	ldr	r2, [pc, #40]	; (800303c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003018:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800301c:	e007      	b.n	800302e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800301e:	4b07      	ldr	r3, [pc, #28]	; (800303c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003026:	4a05      	ldr	r2, [pc, #20]	; (800303c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003028:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800302c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3714      	adds	r7, #20
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	40007000 	.word	0x40007000
 8003040:	20000000 	.word	0x20000000
 8003044:	431bde83 	.word	0x431bde83

08003048 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800304c:	4b05      	ldr	r3, [pc, #20]	; (8003064 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	4a04      	ldr	r2, [pc, #16]	; (8003064 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003052:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003056:	6093      	str	r3, [r2, #8]
}
 8003058:	bf00      	nop
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	40007000 	.word	0x40007000

08003068 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b088      	sub	sp, #32
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e306      	b.n	8003688 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d075      	beq.n	8003172 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003086:	4b97      	ldr	r3, [pc, #604]	; (80032e4 <HAL_RCC_OscConfig+0x27c>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 030c 	and.w	r3, r3, #12
 800308e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003090:	4b94      	ldr	r3, [pc, #592]	; (80032e4 <HAL_RCC_OscConfig+0x27c>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f003 0303 	and.w	r3, r3, #3
 8003098:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	2b0c      	cmp	r3, #12
 800309e:	d102      	bne.n	80030a6 <HAL_RCC_OscConfig+0x3e>
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	2b03      	cmp	r3, #3
 80030a4:	d002      	beq.n	80030ac <HAL_RCC_OscConfig+0x44>
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	d10b      	bne.n	80030c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ac:	4b8d      	ldr	r3, [pc, #564]	; (80032e4 <HAL_RCC_OscConfig+0x27c>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d05b      	beq.n	8003170 <HAL_RCC_OscConfig+0x108>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d157      	bne.n	8003170 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e2e1      	b.n	8003688 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030cc:	d106      	bne.n	80030dc <HAL_RCC_OscConfig+0x74>
 80030ce:	4b85      	ldr	r3, [pc, #532]	; (80032e4 <HAL_RCC_OscConfig+0x27c>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a84      	ldr	r2, [pc, #528]	; (80032e4 <HAL_RCC_OscConfig+0x27c>)
 80030d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	e01d      	b.n	8003118 <HAL_RCC_OscConfig+0xb0>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030e4:	d10c      	bne.n	8003100 <HAL_RCC_OscConfig+0x98>
 80030e6:	4b7f      	ldr	r3, [pc, #508]	; (80032e4 <HAL_RCC_OscConfig+0x27c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a7e      	ldr	r2, [pc, #504]	; (80032e4 <HAL_RCC_OscConfig+0x27c>)
 80030ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	4b7c      	ldr	r3, [pc, #496]	; (80032e4 <HAL_RCC_OscConfig+0x27c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a7b      	ldr	r2, [pc, #492]	; (80032e4 <HAL_RCC_OscConfig+0x27c>)
 80030f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	e00b      	b.n	8003118 <HAL_RCC_OscConfig+0xb0>
 8003100:	4b78      	ldr	r3, [pc, #480]	; (80032e4 <HAL_RCC_OscConfig+0x27c>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a77      	ldr	r2, [pc, #476]	; (80032e4 <HAL_RCC_OscConfig+0x27c>)
 8003106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800310a:	6013      	str	r3, [r2, #0]
 800310c:	4b75      	ldr	r3, [pc, #468]	; (80032e4 <HAL_RCC_OscConfig+0x27c>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a74      	ldr	r2, [pc, #464]	; (80032e4 <HAL_RCC_OscConfig+0x27c>)
 8003112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003116:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d013      	beq.n	8003148 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003120:	f7fe fa3e 	bl	80015a0 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003128:	f7fe fa3a 	bl	80015a0 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b64      	cmp	r3, #100	; 0x64
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e2a6      	b.n	8003688 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800313a:	4b6a      	ldr	r3, [pc, #424]	; (80032e4 <HAL_RCC_OscConfig+0x27c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0f0      	beq.n	8003128 <HAL_RCC_OscConfig+0xc0>
 8003146:	e014      	b.n	8003172 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003148:	f7fe fa2a 	bl	80015a0 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003150:	f7fe fa26 	bl	80015a0 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b64      	cmp	r3, #100	; 0x64
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e292      	b.n	8003688 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003162:	4b60      	ldr	r3, [pc, #384]	; (80032e4 <HAL_RCC_OscConfig+0x27c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1f0      	bne.n	8003150 <HAL_RCC_OscConfig+0xe8>
 800316e:	e000      	b.n	8003172 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d075      	beq.n	800326a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800317e:	4b59      	ldr	r3, [pc, #356]	; (80032e4 <HAL_RCC_OscConfig+0x27c>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 030c 	and.w	r3, r3, #12
 8003186:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003188:	4b56      	ldr	r3, [pc, #344]	; (80032e4 <HAL_RCC_OscConfig+0x27c>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f003 0303 	and.w	r3, r3, #3
 8003190:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	2b0c      	cmp	r3, #12
 8003196:	d102      	bne.n	800319e <HAL_RCC_OscConfig+0x136>
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	2b02      	cmp	r3, #2
 800319c:	d002      	beq.n	80031a4 <HAL_RCC_OscConfig+0x13c>
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	2b04      	cmp	r3, #4
 80031a2:	d11f      	bne.n	80031e4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031a4:	4b4f      	ldr	r3, [pc, #316]	; (80032e4 <HAL_RCC_OscConfig+0x27c>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d005      	beq.n	80031bc <HAL_RCC_OscConfig+0x154>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e265      	b.n	8003688 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031bc:	4b49      	ldr	r3, [pc, #292]	; (80032e4 <HAL_RCC_OscConfig+0x27c>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	061b      	lsls	r3, r3, #24
 80031ca:	4946      	ldr	r1, [pc, #280]	; (80032e4 <HAL_RCC_OscConfig+0x27c>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80031d0:	4b45      	ldr	r3, [pc, #276]	; (80032e8 <HAL_RCC_OscConfig+0x280>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7fd fe05 	bl	8000de4 <HAL_InitTick>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d043      	beq.n	8003268 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e251      	b.n	8003688 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d023      	beq.n	8003234 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031ec:	4b3d      	ldr	r3, [pc, #244]	; (80032e4 <HAL_RCC_OscConfig+0x27c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a3c      	ldr	r2, [pc, #240]	; (80032e4 <HAL_RCC_OscConfig+0x27c>)
 80031f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f8:	f7fe f9d2 	bl	80015a0 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003200:	f7fe f9ce 	bl	80015a0 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e23a      	b.n	8003688 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003212:	4b34      	ldr	r3, [pc, #208]	; (80032e4 <HAL_RCC_OscConfig+0x27c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0f0      	beq.n	8003200 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800321e:	4b31      	ldr	r3, [pc, #196]	; (80032e4 <HAL_RCC_OscConfig+0x27c>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	061b      	lsls	r3, r3, #24
 800322c:	492d      	ldr	r1, [pc, #180]	; (80032e4 <HAL_RCC_OscConfig+0x27c>)
 800322e:	4313      	orrs	r3, r2
 8003230:	604b      	str	r3, [r1, #4]
 8003232:	e01a      	b.n	800326a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003234:	4b2b      	ldr	r3, [pc, #172]	; (80032e4 <HAL_RCC_OscConfig+0x27c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a2a      	ldr	r2, [pc, #168]	; (80032e4 <HAL_RCC_OscConfig+0x27c>)
 800323a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800323e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003240:	f7fe f9ae 	bl	80015a0 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003248:	f7fe f9aa 	bl	80015a0 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e216      	b.n	8003688 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800325a:	4b22      	ldr	r3, [pc, #136]	; (80032e4 <HAL_RCC_OscConfig+0x27c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f0      	bne.n	8003248 <HAL_RCC_OscConfig+0x1e0>
 8003266:	e000      	b.n	800326a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003268:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	2b00      	cmp	r3, #0
 8003274:	d041      	beq.n	80032fa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d01c      	beq.n	80032b8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800327e:	4b19      	ldr	r3, [pc, #100]	; (80032e4 <HAL_RCC_OscConfig+0x27c>)
 8003280:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003284:	4a17      	ldr	r2, [pc, #92]	; (80032e4 <HAL_RCC_OscConfig+0x27c>)
 8003286:	f043 0301 	orr.w	r3, r3, #1
 800328a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800328e:	f7fe f987 	bl	80015a0 <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003294:	e008      	b.n	80032a8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003296:	f7fe f983 	bl	80015a0 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e1ef      	b.n	8003688 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032a8:	4b0e      	ldr	r3, [pc, #56]	; (80032e4 <HAL_RCC_OscConfig+0x27c>)
 80032aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0ef      	beq.n	8003296 <HAL_RCC_OscConfig+0x22e>
 80032b6:	e020      	b.n	80032fa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032b8:	4b0a      	ldr	r3, [pc, #40]	; (80032e4 <HAL_RCC_OscConfig+0x27c>)
 80032ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032be:	4a09      	ldr	r2, [pc, #36]	; (80032e4 <HAL_RCC_OscConfig+0x27c>)
 80032c0:	f023 0301 	bic.w	r3, r3, #1
 80032c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c8:	f7fe f96a 	bl	80015a0 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032ce:	e00d      	b.n	80032ec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032d0:	f7fe f966 	bl	80015a0 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d906      	bls.n	80032ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e1d2      	b.n	8003688 <HAL_RCC_OscConfig+0x620>
 80032e2:	bf00      	nop
 80032e4:	40021000 	.word	0x40021000
 80032e8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032ec:	4b8c      	ldr	r3, [pc, #560]	; (8003520 <HAL_RCC_OscConfig+0x4b8>)
 80032ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1ea      	bne.n	80032d0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0304 	and.w	r3, r3, #4
 8003302:	2b00      	cmp	r3, #0
 8003304:	f000 80a6 	beq.w	8003454 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003308:	2300      	movs	r3, #0
 800330a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800330c:	4b84      	ldr	r3, [pc, #528]	; (8003520 <HAL_RCC_OscConfig+0x4b8>)
 800330e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d101      	bne.n	800331c <HAL_RCC_OscConfig+0x2b4>
 8003318:	2301      	movs	r3, #1
 800331a:	e000      	b.n	800331e <HAL_RCC_OscConfig+0x2b6>
 800331c:	2300      	movs	r3, #0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00d      	beq.n	800333e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003322:	4b7f      	ldr	r3, [pc, #508]	; (8003520 <HAL_RCC_OscConfig+0x4b8>)
 8003324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003326:	4a7e      	ldr	r2, [pc, #504]	; (8003520 <HAL_RCC_OscConfig+0x4b8>)
 8003328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800332c:	6593      	str	r3, [r2, #88]	; 0x58
 800332e:	4b7c      	ldr	r3, [pc, #496]	; (8003520 <HAL_RCC_OscConfig+0x4b8>)
 8003330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800333a:	2301      	movs	r3, #1
 800333c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800333e:	4b79      	ldr	r3, [pc, #484]	; (8003524 <HAL_RCC_OscConfig+0x4bc>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003346:	2b00      	cmp	r3, #0
 8003348:	d118      	bne.n	800337c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800334a:	4b76      	ldr	r3, [pc, #472]	; (8003524 <HAL_RCC_OscConfig+0x4bc>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a75      	ldr	r2, [pc, #468]	; (8003524 <HAL_RCC_OscConfig+0x4bc>)
 8003350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003354:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003356:	f7fe f923 	bl	80015a0 <HAL_GetTick>
 800335a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800335c:	e008      	b.n	8003370 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800335e:	f7fe f91f 	bl	80015a0 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e18b      	b.n	8003688 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003370:	4b6c      	ldr	r3, [pc, #432]	; (8003524 <HAL_RCC_OscConfig+0x4bc>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003378:	2b00      	cmp	r3, #0
 800337a:	d0f0      	beq.n	800335e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d108      	bne.n	8003396 <HAL_RCC_OscConfig+0x32e>
 8003384:	4b66      	ldr	r3, [pc, #408]	; (8003520 <HAL_RCC_OscConfig+0x4b8>)
 8003386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338a:	4a65      	ldr	r2, [pc, #404]	; (8003520 <HAL_RCC_OscConfig+0x4b8>)
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003394:	e024      	b.n	80033e0 <HAL_RCC_OscConfig+0x378>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	2b05      	cmp	r3, #5
 800339c:	d110      	bne.n	80033c0 <HAL_RCC_OscConfig+0x358>
 800339e:	4b60      	ldr	r3, [pc, #384]	; (8003520 <HAL_RCC_OscConfig+0x4b8>)
 80033a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a4:	4a5e      	ldr	r2, [pc, #376]	; (8003520 <HAL_RCC_OscConfig+0x4b8>)
 80033a6:	f043 0304 	orr.w	r3, r3, #4
 80033aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033ae:	4b5c      	ldr	r3, [pc, #368]	; (8003520 <HAL_RCC_OscConfig+0x4b8>)
 80033b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b4:	4a5a      	ldr	r2, [pc, #360]	; (8003520 <HAL_RCC_OscConfig+0x4b8>)
 80033b6:	f043 0301 	orr.w	r3, r3, #1
 80033ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033be:	e00f      	b.n	80033e0 <HAL_RCC_OscConfig+0x378>
 80033c0:	4b57      	ldr	r3, [pc, #348]	; (8003520 <HAL_RCC_OscConfig+0x4b8>)
 80033c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c6:	4a56      	ldr	r2, [pc, #344]	; (8003520 <HAL_RCC_OscConfig+0x4b8>)
 80033c8:	f023 0301 	bic.w	r3, r3, #1
 80033cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033d0:	4b53      	ldr	r3, [pc, #332]	; (8003520 <HAL_RCC_OscConfig+0x4b8>)
 80033d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d6:	4a52      	ldr	r2, [pc, #328]	; (8003520 <HAL_RCC_OscConfig+0x4b8>)
 80033d8:	f023 0304 	bic.w	r3, r3, #4
 80033dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d016      	beq.n	8003416 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e8:	f7fe f8da 	bl	80015a0 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033ee:	e00a      	b.n	8003406 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033f0:	f7fe f8d6 	bl	80015a0 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80033fe:	4293      	cmp	r3, r2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e140      	b.n	8003688 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003406:	4b46      	ldr	r3, [pc, #280]	; (8003520 <HAL_RCC_OscConfig+0x4b8>)
 8003408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0ed      	beq.n	80033f0 <HAL_RCC_OscConfig+0x388>
 8003414:	e015      	b.n	8003442 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003416:	f7fe f8c3 	bl	80015a0 <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800341c:	e00a      	b.n	8003434 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800341e:	f7fe f8bf 	bl	80015a0 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	f241 3288 	movw	r2, #5000	; 0x1388
 800342c:	4293      	cmp	r3, r2
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e129      	b.n	8003688 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003434:	4b3a      	ldr	r3, [pc, #232]	; (8003520 <HAL_RCC_OscConfig+0x4b8>)
 8003436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1ed      	bne.n	800341e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003442:	7ffb      	ldrb	r3, [r7, #31]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d105      	bne.n	8003454 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003448:	4b35      	ldr	r3, [pc, #212]	; (8003520 <HAL_RCC_OscConfig+0x4b8>)
 800344a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344c:	4a34      	ldr	r2, [pc, #208]	; (8003520 <HAL_RCC_OscConfig+0x4b8>)
 800344e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003452:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0320 	and.w	r3, r3, #32
 800345c:	2b00      	cmp	r3, #0
 800345e:	d03c      	beq.n	80034da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d01c      	beq.n	80034a2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003468:	4b2d      	ldr	r3, [pc, #180]	; (8003520 <HAL_RCC_OscConfig+0x4b8>)
 800346a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800346e:	4a2c      	ldr	r2, [pc, #176]	; (8003520 <HAL_RCC_OscConfig+0x4b8>)
 8003470:	f043 0301 	orr.w	r3, r3, #1
 8003474:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003478:	f7fe f892 	bl	80015a0 <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800347e:	e008      	b.n	8003492 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003480:	f7fe f88e 	bl	80015a0 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e0fa      	b.n	8003688 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003492:	4b23      	ldr	r3, [pc, #140]	; (8003520 <HAL_RCC_OscConfig+0x4b8>)
 8003494:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0ef      	beq.n	8003480 <HAL_RCC_OscConfig+0x418>
 80034a0:	e01b      	b.n	80034da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034a2:	4b1f      	ldr	r3, [pc, #124]	; (8003520 <HAL_RCC_OscConfig+0x4b8>)
 80034a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034a8:	4a1d      	ldr	r2, [pc, #116]	; (8003520 <HAL_RCC_OscConfig+0x4b8>)
 80034aa:	f023 0301 	bic.w	r3, r3, #1
 80034ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b2:	f7fe f875 	bl	80015a0 <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034b8:	e008      	b.n	80034cc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034ba:	f7fe f871 	bl	80015a0 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e0dd      	b.n	8003688 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034cc:	4b14      	ldr	r3, [pc, #80]	; (8003520 <HAL_RCC_OscConfig+0x4b8>)
 80034ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1ef      	bne.n	80034ba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 80d1 	beq.w	8003686 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034e4:	4b0e      	ldr	r3, [pc, #56]	; (8003520 <HAL_RCC_OscConfig+0x4b8>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f003 030c 	and.w	r3, r3, #12
 80034ec:	2b0c      	cmp	r3, #12
 80034ee:	f000 808b 	beq.w	8003608 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d15e      	bne.n	80035b8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034fa:	4b09      	ldr	r3, [pc, #36]	; (8003520 <HAL_RCC_OscConfig+0x4b8>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a08      	ldr	r2, [pc, #32]	; (8003520 <HAL_RCC_OscConfig+0x4b8>)
 8003500:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003504:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003506:	f7fe f84b 	bl	80015a0 <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800350c:	e00c      	b.n	8003528 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800350e:	f7fe f847 	bl	80015a0 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d905      	bls.n	8003528 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e0b3      	b.n	8003688 <HAL_RCC_OscConfig+0x620>
 8003520:	40021000 	.word	0x40021000
 8003524:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003528:	4b59      	ldr	r3, [pc, #356]	; (8003690 <HAL_RCC_OscConfig+0x628>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1ec      	bne.n	800350e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003534:	4b56      	ldr	r3, [pc, #344]	; (8003690 <HAL_RCC_OscConfig+0x628>)
 8003536:	68da      	ldr	r2, [r3, #12]
 8003538:	4b56      	ldr	r3, [pc, #344]	; (8003694 <HAL_RCC_OscConfig+0x62c>)
 800353a:	4013      	ands	r3, r2
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6a11      	ldr	r1, [r2, #32]
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003544:	3a01      	subs	r2, #1
 8003546:	0112      	lsls	r2, r2, #4
 8003548:	4311      	orrs	r1, r2
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800354e:	0212      	lsls	r2, r2, #8
 8003550:	4311      	orrs	r1, r2
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003556:	0852      	lsrs	r2, r2, #1
 8003558:	3a01      	subs	r2, #1
 800355a:	0552      	lsls	r2, r2, #21
 800355c:	4311      	orrs	r1, r2
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003562:	0852      	lsrs	r2, r2, #1
 8003564:	3a01      	subs	r2, #1
 8003566:	0652      	lsls	r2, r2, #25
 8003568:	4311      	orrs	r1, r2
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800356e:	06d2      	lsls	r2, r2, #27
 8003570:	430a      	orrs	r2, r1
 8003572:	4947      	ldr	r1, [pc, #284]	; (8003690 <HAL_RCC_OscConfig+0x628>)
 8003574:	4313      	orrs	r3, r2
 8003576:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003578:	4b45      	ldr	r3, [pc, #276]	; (8003690 <HAL_RCC_OscConfig+0x628>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a44      	ldr	r2, [pc, #272]	; (8003690 <HAL_RCC_OscConfig+0x628>)
 800357e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003582:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003584:	4b42      	ldr	r3, [pc, #264]	; (8003690 <HAL_RCC_OscConfig+0x628>)
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	4a41      	ldr	r2, [pc, #260]	; (8003690 <HAL_RCC_OscConfig+0x628>)
 800358a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800358e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003590:	f7fe f806 	bl	80015a0 <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003598:	f7fe f802 	bl	80015a0 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e06e      	b.n	8003688 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035aa:	4b39      	ldr	r3, [pc, #228]	; (8003690 <HAL_RCC_OscConfig+0x628>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d0f0      	beq.n	8003598 <HAL_RCC_OscConfig+0x530>
 80035b6:	e066      	b.n	8003686 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b8:	4b35      	ldr	r3, [pc, #212]	; (8003690 <HAL_RCC_OscConfig+0x628>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a34      	ldr	r2, [pc, #208]	; (8003690 <HAL_RCC_OscConfig+0x628>)
 80035be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035c2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80035c4:	4b32      	ldr	r3, [pc, #200]	; (8003690 <HAL_RCC_OscConfig+0x628>)
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	4a31      	ldr	r2, [pc, #196]	; (8003690 <HAL_RCC_OscConfig+0x628>)
 80035ca:	f023 0303 	bic.w	r3, r3, #3
 80035ce:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80035d0:	4b2f      	ldr	r3, [pc, #188]	; (8003690 <HAL_RCC_OscConfig+0x628>)
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	4a2e      	ldr	r2, [pc, #184]	; (8003690 <HAL_RCC_OscConfig+0x628>)
 80035d6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80035da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035de:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e0:	f7fd ffde 	bl	80015a0 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e8:	f7fd ffda 	bl	80015a0 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e046      	b.n	8003688 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035fa:	4b25      	ldr	r3, [pc, #148]	; (8003690 <HAL_RCC_OscConfig+0x628>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1f0      	bne.n	80035e8 <HAL_RCC_OscConfig+0x580>
 8003606:	e03e      	b.n	8003686 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d101      	bne.n	8003614 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e039      	b.n	8003688 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003614:	4b1e      	ldr	r3, [pc, #120]	; (8003690 <HAL_RCC_OscConfig+0x628>)
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f003 0203 	and.w	r2, r3, #3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	429a      	cmp	r2, r3
 8003626:	d12c      	bne.n	8003682 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	3b01      	subs	r3, #1
 8003634:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003636:	429a      	cmp	r2, r3
 8003638:	d123      	bne.n	8003682 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003644:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003646:	429a      	cmp	r2, r3
 8003648:	d11b      	bne.n	8003682 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003654:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003656:	429a      	cmp	r2, r3
 8003658:	d113      	bne.n	8003682 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003664:	085b      	lsrs	r3, r3, #1
 8003666:	3b01      	subs	r3, #1
 8003668:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800366a:	429a      	cmp	r2, r3
 800366c:	d109      	bne.n	8003682 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003678:	085b      	lsrs	r3, r3, #1
 800367a:	3b01      	subs	r3, #1
 800367c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800367e:	429a      	cmp	r2, r3
 8003680:	d001      	beq.n	8003686 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e000      	b.n	8003688 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3720      	adds	r7, #32
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	40021000 	.word	0x40021000
 8003694:	019f800c 	.word	0x019f800c

08003698 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80036a2:	2300      	movs	r3, #0
 80036a4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d101      	bne.n	80036b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e11e      	b.n	80038ee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036b0:	4b91      	ldr	r3, [pc, #580]	; (80038f8 <HAL_RCC_ClockConfig+0x260>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 030f 	and.w	r3, r3, #15
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d910      	bls.n	80036e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036be:	4b8e      	ldr	r3, [pc, #568]	; (80038f8 <HAL_RCC_ClockConfig+0x260>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f023 020f 	bic.w	r2, r3, #15
 80036c6:	498c      	ldr	r1, [pc, #560]	; (80038f8 <HAL_RCC_ClockConfig+0x260>)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ce:	4b8a      	ldr	r3, [pc, #552]	; (80038f8 <HAL_RCC_ClockConfig+0x260>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 030f 	and.w	r3, r3, #15
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d001      	beq.n	80036e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e106      	b.n	80038ee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d073      	beq.n	80037d4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	2b03      	cmp	r3, #3
 80036f2:	d129      	bne.n	8003748 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036f4:	4b81      	ldr	r3, [pc, #516]	; (80038fc <HAL_RCC_ClockConfig+0x264>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e0f4      	b.n	80038ee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003704:	f000 f9d0 	bl	8003aa8 <RCC_GetSysClockFreqFromPLLSource>
 8003708:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	4a7c      	ldr	r2, [pc, #496]	; (8003900 <HAL_RCC_ClockConfig+0x268>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d93f      	bls.n	8003792 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003712:	4b7a      	ldr	r3, [pc, #488]	; (80038fc <HAL_RCC_ClockConfig+0x264>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d009      	beq.n	8003732 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003726:	2b00      	cmp	r3, #0
 8003728:	d033      	beq.n	8003792 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800372e:	2b00      	cmp	r3, #0
 8003730:	d12f      	bne.n	8003792 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003732:	4b72      	ldr	r3, [pc, #456]	; (80038fc <HAL_RCC_ClockConfig+0x264>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800373a:	4a70      	ldr	r2, [pc, #448]	; (80038fc <HAL_RCC_ClockConfig+0x264>)
 800373c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003740:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003742:	2380      	movs	r3, #128	; 0x80
 8003744:	617b      	str	r3, [r7, #20]
 8003746:	e024      	b.n	8003792 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	2b02      	cmp	r3, #2
 800374e:	d107      	bne.n	8003760 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003750:	4b6a      	ldr	r3, [pc, #424]	; (80038fc <HAL_RCC_ClockConfig+0x264>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d109      	bne.n	8003770 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e0c6      	b.n	80038ee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003760:	4b66      	ldr	r3, [pc, #408]	; (80038fc <HAL_RCC_ClockConfig+0x264>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003768:	2b00      	cmp	r3, #0
 800376a:	d101      	bne.n	8003770 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e0be      	b.n	80038ee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003770:	f000 f8ce 	bl	8003910 <HAL_RCC_GetSysClockFreq>
 8003774:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	4a61      	ldr	r2, [pc, #388]	; (8003900 <HAL_RCC_ClockConfig+0x268>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d909      	bls.n	8003792 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800377e:	4b5f      	ldr	r3, [pc, #380]	; (80038fc <HAL_RCC_ClockConfig+0x264>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003786:	4a5d      	ldr	r2, [pc, #372]	; (80038fc <HAL_RCC_ClockConfig+0x264>)
 8003788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800378c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800378e:	2380      	movs	r3, #128	; 0x80
 8003790:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003792:	4b5a      	ldr	r3, [pc, #360]	; (80038fc <HAL_RCC_ClockConfig+0x264>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f023 0203 	bic.w	r2, r3, #3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	4957      	ldr	r1, [pc, #348]	; (80038fc <HAL_RCC_ClockConfig+0x264>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037a4:	f7fd fefc 	bl	80015a0 <HAL_GetTick>
 80037a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037aa:	e00a      	b.n	80037c2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037ac:	f7fd fef8 	bl	80015a0 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e095      	b.n	80038ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c2:	4b4e      	ldr	r3, [pc, #312]	; (80038fc <HAL_RCC_ClockConfig+0x264>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f003 020c 	and.w	r2, r3, #12
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d1eb      	bne.n	80037ac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d023      	beq.n	8003828 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d005      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037ec:	4b43      	ldr	r3, [pc, #268]	; (80038fc <HAL_RCC_ClockConfig+0x264>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	4a42      	ldr	r2, [pc, #264]	; (80038fc <HAL_RCC_ClockConfig+0x264>)
 80037f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80037f6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0308 	and.w	r3, r3, #8
 8003800:	2b00      	cmp	r3, #0
 8003802:	d007      	beq.n	8003814 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003804:	4b3d      	ldr	r3, [pc, #244]	; (80038fc <HAL_RCC_ClockConfig+0x264>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800380c:	4a3b      	ldr	r2, [pc, #236]	; (80038fc <HAL_RCC_ClockConfig+0x264>)
 800380e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003812:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003814:	4b39      	ldr	r3, [pc, #228]	; (80038fc <HAL_RCC_ClockConfig+0x264>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	4936      	ldr	r1, [pc, #216]	; (80038fc <HAL_RCC_ClockConfig+0x264>)
 8003822:	4313      	orrs	r3, r2
 8003824:	608b      	str	r3, [r1, #8]
 8003826:	e008      	b.n	800383a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	2b80      	cmp	r3, #128	; 0x80
 800382c:	d105      	bne.n	800383a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800382e:	4b33      	ldr	r3, [pc, #204]	; (80038fc <HAL_RCC_ClockConfig+0x264>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	4a32      	ldr	r2, [pc, #200]	; (80038fc <HAL_RCC_ClockConfig+0x264>)
 8003834:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003838:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800383a:	4b2f      	ldr	r3, [pc, #188]	; (80038f8 <HAL_RCC_ClockConfig+0x260>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 030f 	and.w	r3, r3, #15
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	429a      	cmp	r2, r3
 8003846:	d21d      	bcs.n	8003884 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003848:	4b2b      	ldr	r3, [pc, #172]	; (80038f8 <HAL_RCC_ClockConfig+0x260>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f023 020f 	bic.w	r2, r3, #15
 8003850:	4929      	ldr	r1, [pc, #164]	; (80038f8 <HAL_RCC_ClockConfig+0x260>)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	4313      	orrs	r3, r2
 8003856:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003858:	f7fd fea2 	bl	80015a0 <HAL_GetTick>
 800385c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800385e:	e00a      	b.n	8003876 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003860:	f7fd fe9e 	bl	80015a0 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	f241 3288 	movw	r2, #5000	; 0x1388
 800386e:	4293      	cmp	r3, r2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e03b      	b.n	80038ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003876:	4b20      	ldr	r3, [pc, #128]	; (80038f8 <HAL_RCC_ClockConfig+0x260>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	429a      	cmp	r2, r3
 8003882:	d1ed      	bne.n	8003860 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b00      	cmp	r3, #0
 800388e:	d008      	beq.n	80038a2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003890:	4b1a      	ldr	r3, [pc, #104]	; (80038fc <HAL_RCC_ClockConfig+0x264>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	4917      	ldr	r1, [pc, #92]	; (80038fc <HAL_RCC_ClockConfig+0x264>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d009      	beq.n	80038c2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038ae:	4b13      	ldr	r3, [pc, #76]	; (80038fc <HAL_RCC_ClockConfig+0x264>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	490f      	ldr	r1, [pc, #60]	; (80038fc <HAL_RCC_ClockConfig+0x264>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038c2:	f000 f825 	bl	8003910 <HAL_RCC_GetSysClockFreq>
 80038c6:	4602      	mov	r2, r0
 80038c8:	4b0c      	ldr	r3, [pc, #48]	; (80038fc <HAL_RCC_ClockConfig+0x264>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	091b      	lsrs	r3, r3, #4
 80038ce:	f003 030f 	and.w	r3, r3, #15
 80038d2:	490c      	ldr	r1, [pc, #48]	; (8003904 <HAL_RCC_ClockConfig+0x26c>)
 80038d4:	5ccb      	ldrb	r3, [r1, r3]
 80038d6:	f003 031f 	and.w	r3, r3, #31
 80038da:	fa22 f303 	lsr.w	r3, r2, r3
 80038de:	4a0a      	ldr	r2, [pc, #40]	; (8003908 <HAL_RCC_ClockConfig+0x270>)
 80038e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80038e2:	4b0a      	ldr	r3, [pc, #40]	; (800390c <HAL_RCC_ClockConfig+0x274>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fd fa7c 	bl	8000de4 <HAL_InitTick>
 80038ec:	4603      	mov	r3, r0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3718      	adds	r7, #24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	40022000 	.word	0x40022000
 80038fc:	40021000 	.word	0x40021000
 8003900:	04c4b400 	.word	0x04c4b400
 8003904:	0800948c 	.word	0x0800948c
 8003908:	20000000 	.word	0x20000000
 800390c:	20000004 	.word	0x20000004

08003910 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003910:	b480      	push	{r7}
 8003912:	b087      	sub	sp, #28
 8003914:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003916:	4b2c      	ldr	r3, [pc, #176]	; (80039c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 030c 	and.w	r3, r3, #12
 800391e:	2b04      	cmp	r3, #4
 8003920:	d102      	bne.n	8003928 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003922:	4b2a      	ldr	r3, [pc, #168]	; (80039cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003924:	613b      	str	r3, [r7, #16]
 8003926:	e047      	b.n	80039b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003928:	4b27      	ldr	r3, [pc, #156]	; (80039c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f003 030c 	and.w	r3, r3, #12
 8003930:	2b08      	cmp	r3, #8
 8003932:	d102      	bne.n	800393a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003934:	4b26      	ldr	r3, [pc, #152]	; (80039d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003936:	613b      	str	r3, [r7, #16]
 8003938:	e03e      	b.n	80039b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800393a:	4b23      	ldr	r3, [pc, #140]	; (80039c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 030c 	and.w	r3, r3, #12
 8003942:	2b0c      	cmp	r3, #12
 8003944:	d136      	bne.n	80039b4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003946:	4b20      	ldr	r3, [pc, #128]	; (80039c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f003 0303 	and.w	r3, r3, #3
 800394e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003950:	4b1d      	ldr	r3, [pc, #116]	; (80039c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	091b      	lsrs	r3, r3, #4
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	3301      	adds	r3, #1
 800395c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2b03      	cmp	r3, #3
 8003962:	d10c      	bne.n	800397e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003964:	4a1a      	ldr	r2, [pc, #104]	; (80039d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	fbb2 f3f3 	udiv	r3, r2, r3
 800396c:	4a16      	ldr	r2, [pc, #88]	; (80039c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800396e:	68d2      	ldr	r2, [r2, #12]
 8003970:	0a12      	lsrs	r2, r2, #8
 8003972:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003976:	fb02 f303 	mul.w	r3, r2, r3
 800397a:	617b      	str	r3, [r7, #20]
      break;
 800397c:	e00c      	b.n	8003998 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800397e:	4a13      	ldr	r2, [pc, #76]	; (80039cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	fbb2 f3f3 	udiv	r3, r2, r3
 8003986:	4a10      	ldr	r2, [pc, #64]	; (80039c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003988:	68d2      	ldr	r2, [r2, #12]
 800398a:	0a12      	lsrs	r2, r2, #8
 800398c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003990:	fb02 f303 	mul.w	r3, r2, r3
 8003994:	617b      	str	r3, [r7, #20]
      break;
 8003996:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003998:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	0e5b      	lsrs	r3, r3, #25
 800399e:	f003 0303 	and.w	r3, r3, #3
 80039a2:	3301      	adds	r3, #1
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b0:	613b      	str	r3, [r7, #16]
 80039b2:	e001      	b.n	80039b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80039b4:	2300      	movs	r3, #0
 80039b6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80039b8:	693b      	ldr	r3, [r7, #16]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	371c      	adds	r7, #28
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40021000 	.word	0x40021000
 80039cc:	00f42400 	.word	0x00f42400
 80039d0:	016e3600 	.word	0x016e3600

080039d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039d8:	4b03      	ldr	r3, [pc, #12]	; (80039e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80039da:	681b      	ldr	r3, [r3, #0]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	20000000 	.word	0x20000000

080039ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80039f0:	f7ff fff0 	bl	80039d4 <HAL_RCC_GetHCLKFreq>
 80039f4:	4602      	mov	r2, r0
 80039f6:	4b06      	ldr	r3, [pc, #24]	; (8003a10 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	0a1b      	lsrs	r3, r3, #8
 80039fc:	f003 0307 	and.w	r3, r3, #7
 8003a00:	4904      	ldr	r1, [pc, #16]	; (8003a14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a02:	5ccb      	ldrb	r3, [r1, r3]
 8003a04:	f003 031f 	and.w	r3, r3, #31
 8003a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	40021000 	.word	0x40021000
 8003a14:	0800949c 	.word	0x0800949c

08003a18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a1c:	f7ff ffda 	bl	80039d4 <HAL_RCC_GetHCLKFreq>
 8003a20:	4602      	mov	r2, r0
 8003a22:	4b06      	ldr	r3, [pc, #24]	; (8003a3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	0adb      	lsrs	r3, r3, #11
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	4904      	ldr	r1, [pc, #16]	; (8003a40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a2e:	5ccb      	ldrb	r3, [r1, r3]
 8003a30:	f003 031f 	and.w	r3, r3, #31
 8003a34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	0800949c 	.word	0x0800949c

08003a44 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	220f      	movs	r2, #15
 8003a52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003a54:	4b12      	ldr	r3, [pc, #72]	; (8003aa0 <HAL_RCC_GetClockConfig+0x5c>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f003 0203 	and.w	r2, r3, #3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003a60:	4b0f      	ldr	r3, [pc, #60]	; (8003aa0 <HAL_RCC_GetClockConfig+0x5c>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003a6c:	4b0c      	ldr	r3, [pc, #48]	; (8003aa0 <HAL_RCC_GetClockConfig+0x5c>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003a78:	4b09      	ldr	r3, [pc, #36]	; (8003aa0 <HAL_RCC_GetClockConfig+0x5c>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	08db      	lsrs	r3, r3, #3
 8003a7e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003a86:	4b07      	ldr	r3, [pc, #28]	; (8003aa4 <HAL_RCC_GetClockConfig+0x60>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 020f 	and.w	r2, r3, #15
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	601a      	str	r2, [r3, #0]
}
 8003a92:	bf00      	nop
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	40022000 	.word	0x40022000

08003aa8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b087      	sub	sp, #28
 8003aac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003aae:	4b1e      	ldr	r3, [pc, #120]	; (8003b28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	f003 0303 	and.w	r3, r3, #3
 8003ab6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ab8:	4b1b      	ldr	r3, [pc, #108]	; (8003b28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	091b      	lsrs	r3, r3, #4
 8003abe:	f003 030f 	and.w	r3, r3, #15
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	2b03      	cmp	r3, #3
 8003aca:	d10c      	bne.n	8003ae6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003acc:	4a17      	ldr	r2, [pc, #92]	; (8003b2c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad4:	4a14      	ldr	r2, [pc, #80]	; (8003b28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ad6:	68d2      	ldr	r2, [r2, #12]
 8003ad8:	0a12      	lsrs	r2, r2, #8
 8003ada:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ade:	fb02 f303 	mul.w	r3, r2, r3
 8003ae2:	617b      	str	r3, [r7, #20]
    break;
 8003ae4:	e00c      	b.n	8003b00 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ae6:	4a12      	ldr	r2, [pc, #72]	; (8003b30 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aee:	4a0e      	ldr	r2, [pc, #56]	; (8003b28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003af0:	68d2      	ldr	r2, [r2, #12]
 8003af2:	0a12      	lsrs	r2, r2, #8
 8003af4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003af8:	fb02 f303 	mul.w	r3, r2, r3
 8003afc:	617b      	str	r3, [r7, #20]
    break;
 8003afe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b00:	4b09      	ldr	r3, [pc, #36]	; (8003b28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	0e5b      	lsrs	r3, r3, #25
 8003b06:	f003 0303 	and.w	r3, r3, #3
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b18:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003b1a:	687b      	ldr	r3, [r7, #4]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	371c      	adds	r7, #28
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	016e3600 	.word	0x016e3600
 8003b30:	00f42400 	.word	0x00f42400

08003b34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b40:	2300      	movs	r3, #0
 8003b42:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 8098 	beq.w	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b52:	2300      	movs	r3, #0
 8003b54:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b56:	4b43      	ldr	r3, [pc, #268]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10d      	bne.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b62:	4b40      	ldr	r3, [pc, #256]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b66:	4a3f      	ldr	r2, [pc, #252]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b6c:	6593      	str	r3, [r2, #88]	; 0x58
 8003b6e:	4b3d      	ldr	r3, [pc, #244]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b76:	60bb      	str	r3, [r7, #8]
 8003b78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b7e:	4b3a      	ldr	r3, [pc, #232]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a39      	ldr	r2, [pc, #228]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b8a:	f7fd fd09 	bl	80015a0 <HAL_GetTick>
 8003b8e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b90:	e009      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b92:	f7fd fd05 	bl	80015a0 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d902      	bls.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	74fb      	strb	r3, [r7, #19]
        break;
 8003ba4:	e005      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ba6:	4b30      	ldr	r3, [pc, #192]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d0ef      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003bb2:	7cfb      	ldrb	r3, [r7, #19]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d159      	bne.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003bb8:	4b2a      	ldr	r3, [pc, #168]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bc2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d01e      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d019      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003bd4:	4b23      	ldr	r3, [pc, #140]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bde:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003be0:	4b20      	ldr	r3, [pc, #128]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be6:	4a1f      	ldr	r2, [pc, #124]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bf0:	4b1c      	ldr	r3, [pc, #112]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf6:	4a1b      	ldr	r2, [pc, #108]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c00:	4a18      	ldr	r2, [pc, #96]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d016      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c12:	f7fd fcc5 	bl	80015a0 <HAL_GetTick>
 8003c16:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c18:	e00b      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c1a:	f7fd fcc1 	bl	80015a0 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d902      	bls.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	74fb      	strb	r3, [r7, #19]
            break;
 8003c30:	e006      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c32:	4b0c      	ldr	r3, [pc, #48]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0ec      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003c40:	7cfb      	ldrb	r3, [r7, #19]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10b      	bne.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c46:	4b07      	ldr	r3, [pc, #28]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c54:	4903      	ldr	r1, [pc, #12]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c5c:	e008      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c5e:	7cfb      	ldrb	r3, [r7, #19]
 8003c60:	74bb      	strb	r3, [r7, #18]
 8003c62:	e005      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003c64:	40021000 	.word	0x40021000
 8003c68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c6c:	7cfb      	ldrb	r3, [r7, #19]
 8003c6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c70:	7c7b      	ldrb	r3, [r7, #17]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d105      	bne.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c76:	4ba7      	ldr	r3, [pc, #668]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c7a:	4aa6      	ldr	r2, [pc, #664]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c80:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00a      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c8e:	4ba1      	ldr	r3, [pc, #644]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c94:	f023 0203 	bic.w	r2, r3, #3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	499d      	ldr	r1, [pc, #628]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00a      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cb0:	4b98      	ldr	r3, [pc, #608]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb6:	f023 020c 	bic.w	r2, r3, #12
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	4995      	ldr	r1, [pc, #596]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00a      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cd2:	4b90      	ldr	r3, [pc, #576]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	498c      	ldr	r1, [pc, #560]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0308 	and.w	r3, r3, #8
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00a      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cf4:	4b87      	ldr	r3, [pc, #540]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	4984      	ldr	r1, [pc, #528]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0310 	and.w	r3, r3, #16
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00a      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d16:	4b7f      	ldr	r3, [pc, #508]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	497b      	ldr	r1, [pc, #492]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0320 	and.w	r3, r3, #32
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00a      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d38:	4b76      	ldr	r3, [pc, #472]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d3e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	4973      	ldr	r1, [pc, #460]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00a      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d5a:	4b6e      	ldr	r3, [pc, #440]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d60:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	69db      	ldr	r3, [r3, #28]
 8003d68:	496a      	ldr	r1, [pc, #424]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00a      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d7c:	4b65      	ldr	r3, [pc, #404]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d82:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	4962      	ldr	r1, [pc, #392]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00a      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d9e:	4b5d      	ldr	r3, [pc, #372]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	4959      	ldr	r1, [pc, #356]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00a      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003dc0:	4b54      	ldr	r3, [pc, #336]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003dc6:	f023 0203 	bic.w	r2, r3, #3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dce:	4951      	ldr	r1, [pc, #324]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00a      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003de2:	4b4c      	ldr	r3, [pc, #304]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df0:	4948      	ldr	r1, [pc, #288]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d015      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e04:	4b43      	ldr	r3, [pc, #268]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e12:	4940      	ldr	r1, [pc, #256]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e22:	d105      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e24:	4b3b      	ldr	r3, [pc, #236]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	4a3a      	ldr	r2, [pc, #232]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e2e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d015      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e3c:	4b35      	ldr	r3, [pc, #212]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e42:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e4a:	4932      	ldr	r1, [pc, #200]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e5a:	d105      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e5c:	4b2d      	ldr	r3, [pc, #180]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	4a2c      	ldr	r2, [pc, #176]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e66:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d015      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e74:	4b27      	ldr	r3, [pc, #156]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e82:	4924      	ldr	r1, [pc, #144]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e92:	d105      	bne.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e94:	4b1f      	ldr	r3, [pc, #124]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	4a1e      	ldr	r2, [pc, #120]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e9e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d015      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003eac:	4b19      	ldr	r3, [pc, #100]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eba:	4916      	ldr	r1, [pc, #88]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003eca:	d105      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ecc:	4b11      	ldr	r3, [pc, #68]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	4a10      	ldr	r2, [pc, #64]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ed2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ed6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d019      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ee4:	4b0b      	ldr	r3, [pc, #44]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	4908      	ldr	r1, [pc, #32]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f02:	d109      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f04:	4b03      	ldr	r3, [pc, #12]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	4a02      	ldr	r2, [pc, #8]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f0e:	60d3      	str	r3, [r2, #12]
 8003f10:	e002      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003f12:	bf00      	nop
 8003f14:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d015      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003f24:	4b29      	ldr	r3, [pc, #164]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f32:	4926      	ldr	r1, [pc, #152]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f42:	d105      	bne.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f44:	4b21      	ldr	r3, [pc, #132]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	4a20      	ldr	r2, [pc, #128]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f4e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d015      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003f5c:	4b1b      	ldr	r3, [pc, #108]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f62:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f6a:	4918      	ldr	r1, [pc, #96]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f7a:	d105      	bne.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f7c:	4b13      	ldr	r3, [pc, #76]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	4a12      	ldr	r2, [pc, #72]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f86:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d015      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003f94:	4b0d      	ldr	r3, [pc, #52]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fa2:	490a      	ldr	r1, [pc, #40]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fb2:	d105      	bne.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fb4:	4b05      	ldr	r3, [pc, #20]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	4a04      	ldr	r2, [pc, #16]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fbe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003fc0:	7cbb      	ldrb	r3, [r7, #18]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3718      	adds	r7, #24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	40021000 	.word	0x40021000

08003fd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e049      	b.n	8004076 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d106      	bne.n	8003ffc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7fd f956 	bl	80012a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2202      	movs	r2, #2
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	3304      	adds	r3, #4
 800400c:	4619      	mov	r1, r3
 800400e:	4610      	mov	r0, r2
 8004010:	f000 fdf4 	bl	8004bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
	...

08004080 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b01      	cmp	r3, #1
 8004092:	d001      	beq.n	8004098 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e054      	b.n	8004142 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2202      	movs	r2, #2
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68da      	ldr	r2, [r3, #12]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f042 0201 	orr.w	r2, r2, #1
 80040ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a26      	ldr	r2, [pc, #152]	; (8004150 <HAL_TIM_Base_Start_IT+0xd0>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d022      	beq.n	8004100 <HAL_TIM_Base_Start_IT+0x80>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040c2:	d01d      	beq.n	8004100 <HAL_TIM_Base_Start_IT+0x80>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a22      	ldr	r2, [pc, #136]	; (8004154 <HAL_TIM_Base_Start_IT+0xd4>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d018      	beq.n	8004100 <HAL_TIM_Base_Start_IT+0x80>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a21      	ldr	r2, [pc, #132]	; (8004158 <HAL_TIM_Base_Start_IT+0xd8>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d013      	beq.n	8004100 <HAL_TIM_Base_Start_IT+0x80>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a1f      	ldr	r2, [pc, #124]	; (800415c <HAL_TIM_Base_Start_IT+0xdc>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d00e      	beq.n	8004100 <HAL_TIM_Base_Start_IT+0x80>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a1e      	ldr	r2, [pc, #120]	; (8004160 <HAL_TIM_Base_Start_IT+0xe0>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d009      	beq.n	8004100 <HAL_TIM_Base_Start_IT+0x80>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a1c      	ldr	r2, [pc, #112]	; (8004164 <HAL_TIM_Base_Start_IT+0xe4>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d004      	beq.n	8004100 <HAL_TIM_Base_Start_IT+0x80>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a1b      	ldr	r2, [pc, #108]	; (8004168 <HAL_TIM_Base_Start_IT+0xe8>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d115      	bne.n	800412c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689a      	ldr	r2, [r3, #8]
 8004106:	4b19      	ldr	r3, [pc, #100]	; (800416c <HAL_TIM_Base_Start_IT+0xec>)
 8004108:	4013      	ands	r3, r2
 800410a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2b06      	cmp	r3, #6
 8004110:	d015      	beq.n	800413e <HAL_TIM_Base_Start_IT+0xbe>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004118:	d011      	beq.n	800413e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f042 0201 	orr.w	r2, r2, #1
 8004128:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800412a:	e008      	b.n	800413e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f042 0201 	orr.w	r2, r2, #1
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	e000      	b.n	8004140 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800413e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	40012c00 	.word	0x40012c00
 8004154:	40000400 	.word	0x40000400
 8004158:	40000800 	.word	0x40000800
 800415c:	40000c00 	.word	0x40000c00
 8004160:	40013400 	.word	0x40013400
 8004164:	40014000 	.word	0x40014000
 8004168:	40015000 	.word	0x40015000
 800416c:	00010007 	.word	0x00010007

08004170 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e049      	b.n	8004216 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d106      	bne.n	800419c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f841 	bl	800421e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2202      	movs	r2, #2
 80041a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3304      	adds	r3, #4
 80041ac:	4619      	mov	r1, r3
 80041ae:	4610      	mov	r0, r2
 80041b0:	f000 fd24 	bl	8004bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800421e:	b480      	push	{r7}
 8004220:	b083      	sub	sp, #12
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
	...

08004234 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d109      	bne.n	8004258 <HAL_TIM_PWM_Start+0x24>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b01      	cmp	r3, #1
 800424e:	bf14      	ite	ne
 8004250:	2301      	movne	r3, #1
 8004252:	2300      	moveq	r3, #0
 8004254:	b2db      	uxtb	r3, r3
 8004256:	e03c      	b.n	80042d2 <HAL_TIM_PWM_Start+0x9e>
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	2b04      	cmp	r3, #4
 800425c:	d109      	bne.n	8004272 <HAL_TIM_PWM_Start+0x3e>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b01      	cmp	r3, #1
 8004268:	bf14      	ite	ne
 800426a:	2301      	movne	r3, #1
 800426c:	2300      	moveq	r3, #0
 800426e:	b2db      	uxtb	r3, r3
 8004270:	e02f      	b.n	80042d2 <HAL_TIM_PWM_Start+0x9e>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b08      	cmp	r3, #8
 8004276:	d109      	bne.n	800428c <HAL_TIM_PWM_Start+0x58>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b01      	cmp	r3, #1
 8004282:	bf14      	ite	ne
 8004284:	2301      	movne	r3, #1
 8004286:	2300      	moveq	r3, #0
 8004288:	b2db      	uxtb	r3, r3
 800428a:	e022      	b.n	80042d2 <HAL_TIM_PWM_Start+0x9e>
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	2b0c      	cmp	r3, #12
 8004290:	d109      	bne.n	80042a6 <HAL_TIM_PWM_Start+0x72>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b01      	cmp	r3, #1
 800429c:	bf14      	ite	ne
 800429e:	2301      	movne	r3, #1
 80042a0:	2300      	moveq	r3, #0
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	e015      	b.n	80042d2 <HAL_TIM_PWM_Start+0x9e>
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	2b10      	cmp	r3, #16
 80042aa:	d109      	bne.n	80042c0 <HAL_TIM_PWM_Start+0x8c>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	bf14      	ite	ne
 80042b8:	2301      	movne	r3, #1
 80042ba:	2300      	moveq	r3, #0
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	e008      	b.n	80042d2 <HAL_TIM_PWM_Start+0x9e>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	bf14      	ite	ne
 80042cc:	2301      	movne	r3, #1
 80042ce:	2300      	moveq	r3, #0
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e0a6      	b.n	8004428 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d104      	bne.n	80042ea <HAL_TIM_PWM_Start+0xb6>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2202      	movs	r2, #2
 80042e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042e8:	e023      	b.n	8004332 <HAL_TIM_PWM_Start+0xfe>
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	2b04      	cmp	r3, #4
 80042ee:	d104      	bne.n	80042fa <HAL_TIM_PWM_Start+0xc6>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2202      	movs	r2, #2
 80042f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042f8:	e01b      	b.n	8004332 <HAL_TIM_PWM_Start+0xfe>
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	2b08      	cmp	r3, #8
 80042fe:	d104      	bne.n	800430a <HAL_TIM_PWM_Start+0xd6>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2202      	movs	r2, #2
 8004304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004308:	e013      	b.n	8004332 <HAL_TIM_PWM_Start+0xfe>
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2b0c      	cmp	r3, #12
 800430e:	d104      	bne.n	800431a <HAL_TIM_PWM_Start+0xe6>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2202      	movs	r2, #2
 8004314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004318:	e00b      	b.n	8004332 <HAL_TIM_PWM_Start+0xfe>
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2b10      	cmp	r3, #16
 800431e:	d104      	bne.n	800432a <HAL_TIM_PWM_Start+0xf6>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2202      	movs	r2, #2
 8004324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004328:	e003      	b.n	8004332 <HAL_TIM_PWM_Start+0xfe>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2202      	movs	r2, #2
 800432e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2201      	movs	r2, #1
 8004338:	6839      	ldr	r1, [r7, #0]
 800433a:	4618      	mov	r0, r3
 800433c:	f001 f8cc 	bl	80054d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a3a      	ldr	r2, [pc, #232]	; (8004430 <HAL_TIM_PWM_Start+0x1fc>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d018      	beq.n	800437c <HAL_TIM_PWM_Start+0x148>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a39      	ldr	r2, [pc, #228]	; (8004434 <HAL_TIM_PWM_Start+0x200>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d013      	beq.n	800437c <HAL_TIM_PWM_Start+0x148>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a37      	ldr	r2, [pc, #220]	; (8004438 <HAL_TIM_PWM_Start+0x204>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d00e      	beq.n	800437c <HAL_TIM_PWM_Start+0x148>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a36      	ldr	r2, [pc, #216]	; (800443c <HAL_TIM_PWM_Start+0x208>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d009      	beq.n	800437c <HAL_TIM_PWM_Start+0x148>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a34      	ldr	r2, [pc, #208]	; (8004440 <HAL_TIM_PWM_Start+0x20c>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d004      	beq.n	800437c <HAL_TIM_PWM_Start+0x148>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a33      	ldr	r2, [pc, #204]	; (8004444 <HAL_TIM_PWM_Start+0x210>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d101      	bne.n	8004380 <HAL_TIM_PWM_Start+0x14c>
 800437c:	2301      	movs	r3, #1
 800437e:	e000      	b.n	8004382 <HAL_TIM_PWM_Start+0x14e>
 8004380:	2300      	movs	r3, #0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d007      	beq.n	8004396 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004394:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a25      	ldr	r2, [pc, #148]	; (8004430 <HAL_TIM_PWM_Start+0x1fc>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d022      	beq.n	80043e6 <HAL_TIM_PWM_Start+0x1b2>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a8:	d01d      	beq.n	80043e6 <HAL_TIM_PWM_Start+0x1b2>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a26      	ldr	r2, [pc, #152]	; (8004448 <HAL_TIM_PWM_Start+0x214>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d018      	beq.n	80043e6 <HAL_TIM_PWM_Start+0x1b2>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a24      	ldr	r2, [pc, #144]	; (800444c <HAL_TIM_PWM_Start+0x218>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d013      	beq.n	80043e6 <HAL_TIM_PWM_Start+0x1b2>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a23      	ldr	r2, [pc, #140]	; (8004450 <HAL_TIM_PWM_Start+0x21c>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d00e      	beq.n	80043e6 <HAL_TIM_PWM_Start+0x1b2>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a19      	ldr	r2, [pc, #100]	; (8004434 <HAL_TIM_PWM_Start+0x200>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d009      	beq.n	80043e6 <HAL_TIM_PWM_Start+0x1b2>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a18      	ldr	r2, [pc, #96]	; (8004438 <HAL_TIM_PWM_Start+0x204>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d004      	beq.n	80043e6 <HAL_TIM_PWM_Start+0x1b2>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a18      	ldr	r2, [pc, #96]	; (8004444 <HAL_TIM_PWM_Start+0x210>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d115      	bne.n	8004412 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	4b19      	ldr	r3, [pc, #100]	; (8004454 <HAL_TIM_PWM_Start+0x220>)
 80043ee:	4013      	ands	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2b06      	cmp	r3, #6
 80043f6:	d015      	beq.n	8004424 <HAL_TIM_PWM_Start+0x1f0>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043fe:	d011      	beq.n	8004424 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f042 0201 	orr.w	r2, r2, #1
 800440e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004410:	e008      	b.n	8004424 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f042 0201 	orr.w	r2, r2, #1
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	e000      	b.n	8004426 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004424:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	40012c00 	.word	0x40012c00
 8004434:	40013400 	.word	0x40013400
 8004438:	40014000 	.word	0x40014000
 800443c:	40014400 	.word	0x40014400
 8004440:	40014800 	.word	0x40014800
 8004444:	40015000 	.word	0x40015000
 8004448:	40000400 	.word	0x40000400
 800444c:	40000800 	.word	0x40000800
 8004450:	40000c00 	.word	0x40000c00
 8004454:	00010007 	.word	0x00010007

08004458 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b02      	cmp	r3, #2
 800446c:	d122      	bne.n	80044b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b02      	cmp	r3, #2
 800447a:	d11b      	bne.n	80044b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f06f 0202 	mvn.w	r2, #2
 8004484:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2201      	movs	r2, #1
 800448a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	f003 0303 	and.w	r3, r3, #3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 fb90 	bl	8004bc0 <HAL_TIM_IC_CaptureCallback>
 80044a0:	e005      	b.n	80044ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 fb82 	bl	8004bac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 fb93 	bl	8004bd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	f003 0304 	and.w	r3, r3, #4
 80044be:	2b04      	cmp	r3, #4
 80044c0:	d122      	bne.n	8004508 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	f003 0304 	and.w	r3, r3, #4
 80044cc:	2b04      	cmp	r3, #4
 80044ce:	d11b      	bne.n	8004508 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f06f 0204 	mvn.w	r2, #4
 80044d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2202      	movs	r2, #2
 80044de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d003      	beq.n	80044f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 fb66 	bl	8004bc0 <HAL_TIM_IC_CaptureCallback>
 80044f4:	e005      	b.n	8004502 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 fb58 	bl	8004bac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 fb69 	bl	8004bd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	f003 0308 	and.w	r3, r3, #8
 8004512:	2b08      	cmp	r3, #8
 8004514:	d122      	bne.n	800455c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	f003 0308 	and.w	r3, r3, #8
 8004520:	2b08      	cmp	r3, #8
 8004522:	d11b      	bne.n	800455c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f06f 0208 	mvn.w	r2, #8
 800452c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2204      	movs	r2, #4
 8004532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	f003 0303 	and.w	r3, r3, #3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d003      	beq.n	800454a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 fb3c 	bl	8004bc0 <HAL_TIM_IC_CaptureCallback>
 8004548:	e005      	b.n	8004556 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 fb2e 	bl	8004bac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 fb3f 	bl	8004bd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	f003 0310 	and.w	r3, r3, #16
 8004566:	2b10      	cmp	r3, #16
 8004568:	d122      	bne.n	80045b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	f003 0310 	and.w	r3, r3, #16
 8004574:	2b10      	cmp	r3, #16
 8004576:	d11b      	bne.n	80045b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f06f 0210 	mvn.w	r2, #16
 8004580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2208      	movs	r2, #8
 8004586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	69db      	ldr	r3, [r3, #28]
 800458e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004592:	2b00      	cmp	r3, #0
 8004594:	d003      	beq.n	800459e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 fb12 	bl	8004bc0 <HAL_TIM_IC_CaptureCallback>
 800459c:	e005      	b.n	80045aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 fb04 	bl	8004bac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 fb15 	bl	8004bd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d10e      	bne.n	80045dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d107      	bne.n	80045dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f06f 0201 	mvn.w	r2, #1
 80045d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7fc f9d0 	bl	800097c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e6:	2b80      	cmp	r3, #128	; 0x80
 80045e8:	d10e      	bne.n	8004608 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f4:	2b80      	cmp	r3, #128	; 0x80
 80045f6:	d107      	bne.n	8004608 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f001 f9a2 	bl	800594c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004616:	d10e      	bne.n	8004636 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004622:	2b80      	cmp	r3, #128	; 0x80
 8004624:	d107      	bne.n	8004636 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800462e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f001 f995 	bl	8005960 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004640:	2b40      	cmp	r3, #64	; 0x40
 8004642:	d10e      	bne.n	8004662 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464e:	2b40      	cmp	r3, #64	; 0x40
 8004650:	d107      	bne.n	8004662 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800465a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 fac3 	bl	8004be8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	f003 0320 	and.w	r3, r3, #32
 800466c:	2b20      	cmp	r3, #32
 800466e:	d10e      	bne.n	800468e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	f003 0320 	and.w	r3, r3, #32
 800467a:	2b20      	cmp	r3, #32
 800467c:	d107      	bne.n	800468e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f06f 0220 	mvn.w	r2, #32
 8004686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f001 f955 	bl	8005938 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004698:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800469c:	d10f      	bne.n	80046be <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046ac:	d107      	bne.n	80046be <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80046b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f001 f95b 	bl	8005974 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046cc:	d10f      	bne.n	80046ee <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046dc:	d107      	bne.n	80046ee <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80046e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f001 f94d 	bl	8005988 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046fc:	d10f      	bne.n	800471e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004708:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800470c:	d107      	bne.n	800471e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004716:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f001 f93f 	bl	800599c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004728:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800472c:	d10f      	bne.n	800474e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004738:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800473c:	d107      	bne.n	800474e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004746:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f001 f931 	bl	80059b0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800474e:	bf00      	nop
 8004750:	3708      	adds	r7, #8
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
	...

08004758 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004764:	2300      	movs	r3, #0
 8004766:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800476e:	2b01      	cmp	r3, #1
 8004770:	d101      	bne.n	8004776 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004772:	2302      	movs	r3, #2
 8004774:	e0ff      	b.n	8004976 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2b14      	cmp	r3, #20
 8004782:	f200 80f0 	bhi.w	8004966 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004786:	a201      	add	r2, pc, #4	; (adr r2, 800478c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800478c:	080047e1 	.word	0x080047e1
 8004790:	08004967 	.word	0x08004967
 8004794:	08004967 	.word	0x08004967
 8004798:	08004967 	.word	0x08004967
 800479c:	08004821 	.word	0x08004821
 80047a0:	08004967 	.word	0x08004967
 80047a4:	08004967 	.word	0x08004967
 80047a8:	08004967 	.word	0x08004967
 80047ac:	08004863 	.word	0x08004863
 80047b0:	08004967 	.word	0x08004967
 80047b4:	08004967 	.word	0x08004967
 80047b8:	08004967 	.word	0x08004967
 80047bc:	080048a3 	.word	0x080048a3
 80047c0:	08004967 	.word	0x08004967
 80047c4:	08004967 	.word	0x08004967
 80047c8:	08004967 	.word	0x08004967
 80047cc:	080048e5 	.word	0x080048e5
 80047d0:	08004967 	.word	0x08004967
 80047d4:	08004967 	.word	0x08004967
 80047d8:	08004967 	.word	0x08004967
 80047dc:	08004925 	.word	0x08004925
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68b9      	ldr	r1, [r7, #8]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 fab0 	bl	8004d4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	699a      	ldr	r2, [r3, #24]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0208 	orr.w	r2, r2, #8
 80047fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	699a      	ldr	r2, [r3, #24]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0204 	bic.w	r2, r2, #4
 800480a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6999      	ldr	r1, [r3, #24]
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	691a      	ldr	r2, [r3, #16]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	430a      	orrs	r2, r1
 800481c:	619a      	str	r2, [r3, #24]
      break;
 800481e:	e0a5      	b.n	800496c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68b9      	ldr	r1, [r7, #8]
 8004826:	4618      	mov	r0, r3
 8004828:	f000 fb2a 	bl	8004e80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	699a      	ldr	r2, [r3, #24]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800483a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	699a      	ldr	r2, [r3, #24]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800484a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6999      	ldr	r1, [r3, #24]
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	021a      	lsls	r2, r3, #8
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	619a      	str	r2, [r3, #24]
      break;
 8004860:	e084      	b.n	800496c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68b9      	ldr	r1, [r7, #8]
 8004868:	4618      	mov	r0, r3
 800486a:	f000 fb9d 	bl	8004fa8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	69da      	ldr	r2, [r3, #28]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f042 0208 	orr.w	r2, r2, #8
 800487c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	69da      	ldr	r2, [r3, #28]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 0204 	bic.w	r2, r2, #4
 800488c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	69d9      	ldr	r1, [r3, #28]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	691a      	ldr	r2, [r3, #16]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	430a      	orrs	r2, r1
 800489e:	61da      	str	r2, [r3, #28]
      break;
 80048a0:	e064      	b.n	800496c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68b9      	ldr	r1, [r7, #8]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f000 fc0f 	bl	80050cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	69da      	ldr	r2, [r3, #28]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	69da      	ldr	r2, [r3, #28]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	69d9      	ldr	r1, [r3, #28]
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	021a      	lsls	r2, r3, #8
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	61da      	str	r2, [r3, #28]
      break;
 80048e2:	e043      	b.n	800496c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68b9      	ldr	r1, [r7, #8]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 fc82 	bl	80051f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f042 0208 	orr.w	r2, r2, #8
 80048fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0204 	bic.w	r2, r2, #4
 800490e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	691a      	ldr	r2, [r3, #16]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004922:	e023      	b.n	800496c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68b9      	ldr	r1, [r7, #8]
 800492a:	4618      	mov	r0, r3
 800492c:	f000 fccc 	bl	80052c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800493e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800494e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	021a      	lsls	r2, r3, #8
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	430a      	orrs	r2, r1
 8004962:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004964:	e002      	b.n	800496c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	75fb      	strb	r3, [r7, #23]
      break;
 800496a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004974:	7dfb      	ldrb	r3, [r7, #23]
}
 8004976:	4618      	mov	r0, r3
 8004978:	3718      	adds	r7, #24
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop

08004980 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800498a:	2300      	movs	r3, #0
 800498c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004994:	2b01      	cmp	r3, #1
 8004996:	d101      	bne.n	800499c <HAL_TIM_ConfigClockSource+0x1c>
 8004998:	2302      	movs	r3, #2
 800499a:	e0f6      	b.n	8004b8a <HAL_TIM_ConfigClockSource+0x20a>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2202      	movs	r2, #2
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80049ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a6f      	ldr	r2, [pc, #444]	; (8004b94 <HAL_TIM_ConfigClockSource+0x214>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	f000 80c1 	beq.w	8004b5e <HAL_TIM_ConfigClockSource+0x1de>
 80049dc:	4a6d      	ldr	r2, [pc, #436]	; (8004b94 <HAL_TIM_ConfigClockSource+0x214>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	f200 80c6 	bhi.w	8004b70 <HAL_TIM_ConfigClockSource+0x1f0>
 80049e4:	4a6c      	ldr	r2, [pc, #432]	; (8004b98 <HAL_TIM_ConfigClockSource+0x218>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	f000 80b9 	beq.w	8004b5e <HAL_TIM_ConfigClockSource+0x1de>
 80049ec:	4a6a      	ldr	r2, [pc, #424]	; (8004b98 <HAL_TIM_ConfigClockSource+0x218>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	f200 80be 	bhi.w	8004b70 <HAL_TIM_ConfigClockSource+0x1f0>
 80049f4:	4a69      	ldr	r2, [pc, #420]	; (8004b9c <HAL_TIM_ConfigClockSource+0x21c>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	f000 80b1 	beq.w	8004b5e <HAL_TIM_ConfigClockSource+0x1de>
 80049fc:	4a67      	ldr	r2, [pc, #412]	; (8004b9c <HAL_TIM_ConfigClockSource+0x21c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	f200 80b6 	bhi.w	8004b70 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a04:	4a66      	ldr	r2, [pc, #408]	; (8004ba0 <HAL_TIM_ConfigClockSource+0x220>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	f000 80a9 	beq.w	8004b5e <HAL_TIM_ConfigClockSource+0x1de>
 8004a0c:	4a64      	ldr	r2, [pc, #400]	; (8004ba0 <HAL_TIM_ConfigClockSource+0x220>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	f200 80ae 	bhi.w	8004b70 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a14:	4a63      	ldr	r2, [pc, #396]	; (8004ba4 <HAL_TIM_ConfigClockSource+0x224>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	f000 80a1 	beq.w	8004b5e <HAL_TIM_ConfigClockSource+0x1de>
 8004a1c:	4a61      	ldr	r2, [pc, #388]	; (8004ba4 <HAL_TIM_ConfigClockSource+0x224>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	f200 80a6 	bhi.w	8004b70 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a24:	4a60      	ldr	r2, [pc, #384]	; (8004ba8 <HAL_TIM_ConfigClockSource+0x228>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	f000 8099 	beq.w	8004b5e <HAL_TIM_ConfigClockSource+0x1de>
 8004a2c:	4a5e      	ldr	r2, [pc, #376]	; (8004ba8 <HAL_TIM_ConfigClockSource+0x228>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	f200 809e 	bhi.w	8004b70 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a34:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004a38:	f000 8091 	beq.w	8004b5e <HAL_TIM_ConfigClockSource+0x1de>
 8004a3c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004a40:	f200 8096 	bhi.w	8004b70 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a48:	f000 8089 	beq.w	8004b5e <HAL_TIM_ConfigClockSource+0x1de>
 8004a4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a50:	f200 808e 	bhi.w	8004b70 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a58:	d03e      	beq.n	8004ad8 <HAL_TIM_ConfigClockSource+0x158>
 8004a5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a5e:	f200 8087 	bhi.w	8004b70 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a66:	f000 8086 	beq.w	8004b76 <HAL_TIM_ConfigClockSource+0x1f6>
 8004a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a6e:	d87f      	bhi.n	8004b70 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a70:	2b70      	cmp	r3, #112	; 0x70
 8004a72:	d01a      	beq.n	8004aaa <HAL_TIM_ConfigClockSource+0x12a>
 8004a74:	2b70      	cmp	r3, #112	; 0x70
 8004a76:	d87b      	bhi.n	8004b70 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a78:	2b60      	cmp	r3, #96	; 0x60
 8004a7a:	d050      	beq.n	8004b1e <HAL_TIM_ConfigClockSource+0x19e>
 8004a7c:	2b60      	cmp	r3, #96	; 0x60
 8004a7e:	d877      	bhi.n	8004b70 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a80:	2b50      	cmp	r3, #80	; 0x50
 8004a82:	d03c      	beq.n	8004afe <HAL_TIM_ConfigClockSource+0x17e>
 8004a84:	2b50      	cmp	r3, #80	; 0x50
 8004a86:	d873      	bhi.n	8004b70 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a88:	2b40      	cmp	r3, #64	; 0x40
 8004a8a:	d058      	beq.n	8004b3e <HAL_TIM_ConfigClockSource+0x1be>
 8004a8c:	2b40      	cmp	r3, #64	; 0x40
 8004a8e:	d86f      	bhi.n	8004b70 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a90:	2b30      	cmp	r3, #48	; 0x30
 8004a92:	d064      	beq.n	8004b5e <HAL_TIM_ConfigClockSource+0x1de>
 8004a94:	2b30      	cmp	r3, #48	; 0x30
 8004a96:	d86b      	bhi.n	8004b70 <HAL_TIM_ConfigClockSource+0x1f0>
 8004a98:	2b20      	cmp	r3, #32
 8004a9a:	d060      	beq.n	8004b5e <HAL_TIM_ConfigClockSource+0x1de>
 8004a9c:	2b20      	cmp	r3, #32
 8004a9e:	d867      	bhi.n	8004b70 <HAL_TIM_ConfigClockSource+0x1f0>
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d05c      	beq.n	8004b5e <HAL_TIM_ConfigClockSource+0x1de>
 8004aa4:	2b10      	cmp	r3, #16
 8004aa6:	d05a      	beq.n	8004b5e <HAL_TIM_ConfigClockSource+0x1de>
 8004aa8:	e062      	b.n	8004b70 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6818      	ldr	r0, [r3, #0]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	6899      	ldr	r1, [r3, #8]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	f000 fced 	bl	8005498 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004acc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	609a      	str	r2, [r3, #8]
      break;
 8004ad6:	e04f      	b.n	8004b78 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6818      	ldr	r0, [r3, #0]
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	6899      	ldr	r1, [r3, #8]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f000 fcd6 	bl	8005498 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	689a      	ldr	r2, [r3, #8]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004afa:	609a      	str	r2, [r3, #8]
      break;
 8004afc:	e03c      	b.n	8004b78 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6818      	ldr	r0, [r3, #0]
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	6859      	ldr	r1, [r3, #4]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	f000 fc48 	bl	80053a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2150      	movs	r1, #80	; 0x50
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 fca1 	bl	800545e <TIM_ITRx_SetConfig>
      break;
 8004b1c:	e02c      	b.n	8004b78 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6818      	ldr	r0, [r3, #0]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	6859      	ldr	r1, [r3, #4]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	f000 fc67 	bl	80053fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2160      	movs	r1, #96	; 0x60
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 fc91 	bl	800545e <TIM_ITRx_SetConfig>
      break;
 8004b3c:	e01c      	b.n	8004b78 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6818      	ldr	r0, [r3, #0]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	6859      	ldr	r1, [r3, #4]
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	f000 fc28 	bl	80053a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2140      	movs	r1, #64	; 0x40
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 fc81 	bl	800545e <TIM_ITRx_SetConfig>
      break;
 8004b5c:	e00c      	b.n	8004b78 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4619      	mov	r1, r3
 8004b68:	4610      	mov	r0, r2
 8004b6a:	f000 fc78 	bl	800545e <TIM_ITRx_SetConfig>
      break;
 8004b6e:	e003      	b.n	8004b78 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	73fb      	strb	r3, [r7, #15]
      break;
 8004b74:	e000      	b.n	8004b78 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004b76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	00100070 	.word	0x00100070
 8004b98:	00100060 	.word	0x00100060
 8004b9c:	00100050 	.word	0x00100050
 8004ba0:	00100040 	.word	0x00100040
 8004ba4:	00100030 	.word	0x00100030
 8004ba8:	00100020 	.word	0x00100020

08004bac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a46      	ldr	r2, [pc, #280]	; (8004d28 <TIM_Base_SetConfig+0x12c>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d017      	beq.n	8004c44 <TIM_Base_SetConfig+0x48>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c1a:	d013      	beq.n	8004c44 <TIM_Base_SetConfig+0x48>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a43      	ldr	r2, [pc, #268]	; (8004d2c <TIM_Base_SetConfig+0x130>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d00f      	beq.n	8004c44 <TIM_Base_SetConfig+0x48>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a42      	ldr	r2, [pc, #264]	; (8004d30 <TIM_Base_SetConfig+0x134>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d00b      	beq.n	8004c44 <TIM_Base_SetConfig+0x48>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a41      	ldr	r2, [pc, #260]	; (8004d34 <TIM_Base_SetConfig+0x138>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d007      	beq.n	8004c44 <TIM_Base_SetConfig+0x48>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a40      	ldr	r2, [pc, #256]	; (8004d38 <TIM_Base_SetConfig+0x13c>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d003      	beq.n	8004c44 <TIM_Base_SetConfig+0x48>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a3f      	ldr	r2, [pc, #252]	; (8004d3c <TIM_Base_SetConfig+0x140>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d108      	bne.n	8004c56 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a33      	ldr	r2, [pc, #204]	; (8004d28 <TIM_Base_SetConfig+0x12c>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d023      	beq.n	8004ca6 <TIM_Base_SetConfig+0xaa>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c64:	d01f      	beq.n	8004ca6 <TIM_Base_SetConfig+0xaa>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a30      	ldr	r2, [pc, #192]	; (8004d2c <TIM_Base_SetConfig+0x130>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d01b      	beq.n	8004ca6 <TIM_Base_SetConfig+0xaa>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a2f      	ldr	r2, [pc, #188]	; (8004d30 <TIM_Base_SetConfig+0x134>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d017      	beq.n	8004ca6 <TIM_Base_SetConfig+0xaa>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a2e      	ldr	r2, [pc, #184]	; (8004d34 <TIM_Base_SetConfig+0x138>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d013      	beq.n	8004ca6 <TIM_Base_SetConfig+0xaa>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a2d      	ldr	r2, [pc, #180]	; (8004d38 <TIM_Base_SetConfig+0x13c>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d00f      	beq.n	8004ca6 <TIM_Base_SetConfig+0xaa>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a2d      	ldr	r2, [pc, #180]	; (8004d40 <TIM_Base_SetConfig+0x144>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d00b      	beq.n	8004ca6 <TIM_Base_SetConfig+0xaa>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a2c      	ldr	r2, [pc, #176]	; (8004d44 <TIM_Base_SetConfig+0x148>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d007      	beq.n	8004ca6 <TIM_Base_SetConfig+0xaa>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a2b      	ldr	r2, [pc, #172]	; (8004d48 <TIM_Base_SetConfig+0x14c>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d003      	beq.n	8004ca6 <TIM_Base_SetConfig+0xaa>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a26      	ldr	r2, [pc, #152]	; (8004d3c <TIM_Base_SetConfig+0x140>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d108      	bne.n	8004cb8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	689a      	ldr	r2, [r3, #8]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a12      	ldr	r2, [pc, #72]	; (8004d28 <TIM_Base_SetConfig+0x12c>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d013      	beq.n	8004d0c <TIM_Base_SetConfig+0x110>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a14      	ldr	r2, [pc, #80]	; (8004d38 <TIM_Base_SetConfig+0x13c>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d00f      	beq.n	8004d0c <TIM_Base_SetConfig+0x110>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a14      	ldr	r2, [pc, #80]	; (8004d40 <TIM_Base_SetConfig+0x144>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d00b      	beq.n	8004d0c <TIM_Base_SetConfig+0x110>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a13      	ldr	r2, [pc, #76]	; (8004d44 <TIM_Base_SetConfig+0x148>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d007      	beq.n	8004d0c <TIM_Base_SetConfig+0x110>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a12      	ldr	r2, [pc, #72]	; (8004d48 <TIM_Base_SetConfig+0x14c>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d003      	beq.n	8004d0c <TIM_Base_SetConfig+0x110>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a0d      	ldr	r2, [pc, #52]	; (8004d3c <TIM_Base_SetConfig+0x140>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d103      	bne.n	8004d14 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	691a      	ldr	r2, [r3, #16]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	615a      	str	r2, [r3, #20]
}
 8004d1a:	bf00      	nop
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	40012c00 	.word	0x40012c00
 8004d2c:	40000400 	.word	0x40000400
 8004d30:	40000800 	.word	0x40000800
 8004d34:	40000c00 	.word	0x40000c00
 8004d38:	40013400 	.word	0x40013400
 8004d3c:	40015000 	.word	0x40015000
 8004d40:	40014000 	.word	0x40014000
 8004d44:	40014400 	.word	0x40014400
 8004d48:	40014800 	.word	0x40014800

08004d4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b087      	sub	sp, #28
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	f023 0201 	bic.w	r2, r3, #1
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f023 0303 	bic.w	r3, r3, #3
 8004d86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f023 0302 	bic.w	r3, r3, #2
 8004d98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a30      	ldr	r2, [pc, #192]	; (8004e68 <TIM_OC1_SetConfig+0x11c>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d013      	beq.n	8004dd4 <TIM_OC1_SetConfig+0x88>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a2f      	ldr	r2, [pc, #188]	; (8004e6c <TIM_OC1_SetConfig+0x120>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d00f      	beq.n	8004dd4 <TIM_OC1_SetConfig+0x88>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a2e      	ldr	r2, [pc, #184]	; (8004e70 <TIM_OC1_SetConfig+0x124>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d00b      	beq.n	8004dd4 <TIM_OC1_SetConfig+0x88>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a2d      	ldr	r2, [pc, #180]	; (8004e74 <TIM_OC1_SetConfig+0x128>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d007      	beq.n	8004dd4 <TIM_OC1_SetConfig+0x88>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a2c      	ldr	r2, [pc, #176]	; (8004e78 <TIM_OC1_SetConfig+0x12c>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d003      	beq.n	8004dd4 <TIM_OC1_SetConfig+0x88>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a2b      	ldr	r2, [pc, #172]	; (8004e7c <TIM_OC1_SetConfig+0x130>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d10c      	bne.n	8004dee <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	f023 0308 	bic.w	r3, r3, #8
 8004dda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f023 0304 	bic.w	r3, r3, #4
 8004dec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a1d      	ldr	r2, [pc, #116]	; (8004e68 <TIM_OC1_SetConfig+0x11c>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d013      	beq.n	8004e1e <TIM_OC1_SetConfig+0xd2>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a1c      	ldr	r2, [pc, #112]	; (8004e6c <TIM_OC1_SetConfig+0x120>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d00f      	beq.n	8004e1e <TIM_OC1_SetConfig+0xd2>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a1b      	ldr	r2, [pc, #108]	; (8004e70 <TIM_OC1_SetConfig+0x124>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d00b      	beq.n	8004e1e <TIM_OC1_SetConfig+0xd2>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a1a      	ldr	r2, [pc, #104]	; (8004e74 <TIM_OC1_SetConfig+0x128>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d007      	beq.n	8004e1e <TIM_OC1_SetConfig+0xd2>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a19      	ldr	r2, [pc, #100]	; (8004e78 <TIM_OC1_SetConfig+0x12c>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d003      	beq.n	8004e1e <TIM_OC1_SetConfig+0xd2>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a18      	ldr	r2, [pc, #96]	; (8004e7c <TIM_OC1_SetConfig+0x130>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d111      	bne.n	8004e42 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	621a      	str	r2, [r3, #32]
}
 8004e5c:	bf00      	nop
 8004e5e:	371c      	adds	r7, #28
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr
 8004e68:	40012c00 	.word	0x40012c00
 8004e6c:	40013400 	.word	0x40013400
 8004e70:	40014000 	.word	0x40014000
 8004e74:	40014400 	.word	0x40014400
 8004e78:	40014800 	.word	0x40014800
 8004e7c:	40015000 	.word	0x40015000

08004e80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b087      	sub	sp, #28
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	f023 0210 	bic.w	r2, r3, #16
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	021b      	lsls	r3, r3, #8
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	f023 0320 	bic.w	r3, r3, #32
 8004ece:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	011b      	lsls	r3, r3, #4
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a2c      	ldr	r2, [pc, #176]	; (8004f90 <TIM_OC2_SetConfig+0x110>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d007      	beq.n	8004ef4 <TIM_OC2_SetConfig+0x74>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a2b      	ldr	r2, [pc, #172]	; (8004f94 <TIM_OC2_SetConfig+0x114>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d003      	beq.n	8004ef4 <TIM_OC2_SetConfig+0x74>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a2a      	ldr	r2, [pc, #168]	; (8004f98 <TIM_OC2_SetConfig+0x118>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d10d      	bne.n	8004f10 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004efa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	011b      	lsls	r3, r3, #4
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a1f      	ldr	r2, [pc, #124]	; (8004f90 <TIM_OC2_SetConfig+0x110>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d013      	beq.n	8004f40 <TIM_OC2_SetConfig+0xc0>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a1e      	ldr	r2, [pc, #120]	; (8004f94 <TIM_OC2_SetConfig+0x114>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d00f      	beq.n	8004f40 <TIM_OC2_SetConfig+0xc0>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a1e      	ldr	r2, [pc, #120]	; (8004f9c <TIM_OC2_SetConfig+0x11c>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d00b      	beq.n	8004f40 <TIM_OC2_SetConfig+0xc0>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a1d      	ldr	r2, [pc, #116]	; (8004fa0 <TIM_OC2_SetConfig+0x120>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d007      	beq.n	8004f40 <TIM_OC2_SetConfig+0xc0>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a1c      	ldr	r2, [pc, #112]	; (8004fa4 <TIM_OC2_SetConfig+0x124>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d003      	beq.n	8004f40 <TIM_OC2_SetConfig+0xc0>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a17      	ldr	r2, [pc, #92]	; (8004f98 <TIM_OC2_SetConfig+0x118>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d113      	bne.n	8004f68 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	621a      	str	r2, [r3, #32]
}
 8004f82:	bf00      	nop
 8004f84:	371c      	adds	r7, #28
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	40012c00 	.word	0x40012c00
 8004f94:	40013400 	.word	0x40013400
 8004f98:	40015000 	.word	0x40015000
 8004f9c:	40014000 	.word	0x40014000
 8004fa0:	40014400 	.word	0x40014400
 8004fa4:	40014800 	.word	0x40014800

08004fa8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b087      	sub	sp, #28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f023 0303 	bic.w	r3, r3, #3
 8004fe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ff4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	021b      	lsls	r3, r3, #8
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a2b      	ldr	r2, [pc, #172]	; (80050b4 <TIM_OC3_SetConfig+0x10c>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d007      	beq.n	800501a <TIM_OC3_SetConfig+0x72>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a2a      	ldr	r2, [pc, #168]	; (80050b8 <TIM_OC3_SetConfig+0x110>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d003      	beq.n	800501a <TIM_OC3_SetConfig+0x72>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a29      	ldr	r2, [pc, #164]	; (80050bc <TIM_OC3_SetConfig+0x114>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d10d      	bne.n	8005036 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005020:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	021b      	lsls	r3, r3, #8
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	4313      	orrs	r3, r2
 800502c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005034:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a1e      	ldr	r2, [pc, #120]	; (80050b4 <TIM_OC3_SetConfig+0x10c>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d013      	beq.n	8005066 <TIM_OC3_SetConfig+0xbe>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a1d      	ldr	r2, [pc, #116]	; (80050b8 <TIM_OC3_SetConfig+0x110>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d00f      	beq.n	8005066 <TIM_OC3_SetConfig+0xbe>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a1d      	ldr	r2, [pc, #116]	; (80050c0 <TIM_OC3_SetConfig+0x118>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d00b      	beq.n	8005066 <TIM_OC3_SetConfig+0xbe>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a1c      	ldr	r2, [pc, #112]	; (80050c4 <TIM_OC3_SetConfig+0x11c>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d007      	beq.n	8005066 <TIM_OC3_SetConfig+0xbe>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a1b      	ldr	r2, [pc, #108]	; (80050c8 <TIM_OC3_SetConfig+0x120>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d003      	beq.n	8005066 <TIM_OC3_SetConfig+0xbe>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a16      	ldr	r2, [pc, #88]	; (80050bc <TIM_OC3_SetConfig+0x114>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d113      	bne.n	800508e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800506c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005074:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	011b      	lsls	r3, r3, #4
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	4313      	orrs	r3, r2
 8005080:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	011b      	lsls	r3, r3, #4
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	4313      	orrs	r3, r2
 800508c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	685a      	ldr	r2, [r3, #4]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	621a      	str	r2, [r3, #32]
}
 80050a8:	bf00      	nop
 80050aa:	371c      	adds	r7, #28
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr
 80050b4:	40012c00 	.word	0x40012c00
 80050b8:	40013400 	.word	0x40013400
 80050bc:	40015000 	.word	0x40015000
 80050c0:	40014000 	.word	0x40014000
 80050c4:	40014400 	.word	0x40014400
 80050c8:	40014800 	.word	0x40014800

080050cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b087      	sub	sp, #28
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a1b      	ldr	r3, [r3, #32]
 80050da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	69db      	ldr	r3, [r3, #28]
 80050f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005106:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	021b      	lsls	r3, r3, #8
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	4313      	orrs	r3, r2
 8005112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800511a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	031b      	lsls	r3, r3, #12
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	4313      	orrs	r3, r2
 8005126:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a2c      	ldr	r2, [pc, #176]	; (80051dc <TIM_OC4_SetConfig+0x110>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d007      	beq.n	8005140 <TIM_OC4_SetConfig+0x74>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a2b      	ldr	r2, [pc, #172]	; (80051e0 <TIM_OC4_SetConfig+0x114>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d003      	beq.n	8005140 <TIM_OC4_SetConfig+0x74>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a2a      	ldr	r2, [pc, #168]	; (80051e4 <TIM_OC4_SetConfig+0x118>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d10d      	bne.n	800515c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005146:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	031b      	lsls	r3, r3, #12
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	4313      	orrs	r3, r2
 8005152:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800515a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a1f      	ldr	r2, [pc, #124]	; (80051dc <TIM_OC4_SetConfig+0x110>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d013      	beq.n	800518c <TIM_OC4_SetConfig+0xc0>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a1e      	ldr	r2, [pc, #120]	; (80051e0 <TIM_OC4_SetConfig+0x114>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d00f      	beq.n	800518c <TIM_OC4_SetConfig+0xc0>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a1e      	ldr	r2, [pc, #120]	; (80051e8 <TIM_OC4_SetConfig+0x11c>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d00b      	beq.n	800518c <TIM_OC4_SetConfig+0xc0>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a1d      	ldr	r2, [pc, #116]	; (80051ec <TIM_OC4_SetConfig+0x120>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d007      	beq.n	800518c <TIM_OC4_SetConfig+0xc0>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a1c      	ldr	r2, [pc, #112]	; (80051f0 <TIM_OC4_SetConfig+0x124>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d003      	beq.n	800518c <TIM_OC4_SetConfig+0xc0>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a17      	ldr	r2, [pc, #92]	; (80051e4 <TIM_OC4_SetConfig+0x118>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d113      	bne.n	80051b4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005192:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800519a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	695b      	ldr	r3, [r3, #20]
 80051a0:	019b      	lsls	r3, r3, #6
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	019b      	lsls	r3, r3, #6
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	621a      	str	r2, [r3, #32]
}
 80051ce:	bf00      	nop
 80051d0:	371c      	adds	r7, #28
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	40012c00 	.word	0x40012c00
 80051e0:	40013400 	.word	0x40013400
 80051e4:	40015000 	.word	0x40015000
 80051e8:	40014000 	.word	0x40014000
 80051ec:	40014400 	.word	0x40014400
 80051f0:	40014800 	.word	0x40014800

080051f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b087      	sub	sp, #28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800521a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005226:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	4313      	orrs	r3, r2
 8005230:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005238:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	041b      	lsls	r3, r3, #16
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	4313      	orrs	r3, r2
 8005244:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a19      	ldr	r2, [pc, #100]	; (80052b0 <TIM_OC5_SetConfig+0xbc>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d013      	beq.n	8005276 <TIM_OC5_SetConfig+0x82>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a18      	ldr	r2, [pc, #96]	; (80052b4 <TIM_OC5_SetConfig+0xc0>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d00f      	beq.n	8005276 <TIM_OC5_SetConfig+0x82>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a17      	ldr	r2, [pc, #92]	; (80052b8 <TIM_OC5_SetConfig+0xc4>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d00b      	beq.n	8005276 <TIM_OC5_SetConfig+0x82>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a16      	ldr	r2, [pc, #88]	; (80052bc <TIM_OC5_SetConfig+0xc8>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d007      	beq.n	8005276 <TIM_OC5_SetConfig+0x82>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a15      	ldr	r2, [pc, #84]	; (80052c0 <TIM_OC5_SetConfig+0xcc>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d003      	beq.n	8005276 <TIM_OC5_SetConfig+0x82>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a14      	ldr	r2, [pc, #80]	; (80052c4 <TIM_OC5_SetConfig+0xd0>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d109      	bne.n	800528a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800527c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	021b      	lsls	r3, r3, #8
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	4313      	orrs	r3, r2
 8005288:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	621a      	str	r2, [r3, #32]
}
 80052a4:	bf00      	nop
 80052a6:	371c      	adds	r7, #28
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr
 80052b0:	40012c00 	.word	0x40012c00
 80052b4:	40013400 	.word	0x40013400
 80052b8:	40014000 	.word	0x40014000
 80052bc:	40014400 	.word	0x40014400
 80052c0:	40014800 	.word	0x40014800
 80052c4:	40015000 	.word	0x40015000

080052c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b087      	sub	sp, #28
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	021b      	lsls	r3, r3, #8
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	4313      	orrs	r3, r2
 8005306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800530e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	051b      	lsls	r3, r3, #20
 8005316:	693a      	ldr	r2, [r7, #16]
 8005318:	4313      	orrs	r3, r2
 800531a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a1a      	ldr	r2, [pc, #104]	; (8005388 <TIM_OC6_SetConfig+0xc0>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d013      	beq.n	800534c <TIM_OC6_SetConfig+0x84>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a19      	ldr	r2, [pc, #100]	; (800538c <TIM_OC6_SetConfig+0xc4>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d00f      	beq.n	800534c <TIM_OC6_SetConfig+0x84>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a18      	ldr	r2, [pc, #96]	; (8005390 <TIM_OC6_SetConfig+0xc8>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d00b      	beq.n	800534c <TIM_OC6_SetConfig+0x84>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a17      	ldr	r2, [pc, #92]	; (8005394 <TIM_OC6_SetConfig+0xcc>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d007      	beq.n	800534c <TIM_OC6_SetConfig+0x84>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a16      	ldr	r2, [pc, #88]	; (8005398 <TIM_OC6_SetConfig+0xd0>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d003      	beq.n	800534c <TIM_OC6_SetConfig+0x84>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a15      	ldr	r2, [pc, #84]	; (800539c <TIM_OC6_SetConfig+0xd4>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d109      	bne.n	8005360 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005352:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	029b      	lsls	r3, r3, #10
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	4313      	orrs	r3, r2
 800535e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	621a      	str	r2, [r3, #32]
}
 800537a:	bf00      	nop
 800537c:	371c      	adds	r7, #28
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	40012c00 	.word	0x40012c00
 800538c:	40013400 	.word	0x40013400
 8005390:	40014000 	.word	0x40014000
 8005394:	40014400 	.word	0x40014400
 8005398:	40014800 	.word	0x40014800
 800539c:	40015000 	.word	0x40015000

080053a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b087      	sub	sp, #28
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6a1b      	ldr	r3, [r3, #32]
 80053b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	f023 0201 	bic.w	r2, r3, #1
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	011b      	lsls	r3, r3, #4
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	f023 030a 	bic.w	r3, r3, #10
 80053dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	693a      	ldr	r2, [r7, #16]
 80053ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	621a      	str	r2, [r3, #32]
}
 80053f2:	bf00      	nop
 80053f4:	371c      	adds	r7, #28
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053fe:	b480      	push	{r7}
 8005400:	b087      	sub	sp, #28
 8005402:	af00      	add	r7, sp, #0
 8005404:	60f8      	str	r0, [r7, #12]
 8005406:	60b9      	str	r1, [r7, #8]
 8005408:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	f023 0210 	bic.w	r2, r3, #16
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6a1b      	ldr	r3, [r3, #32]
 8005420:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005428:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	031b      	lsls	r3, r3, #12
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	4313      	orrs	r3, r2
 8005432:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800543a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	011b      	lsls	r3, r3, #4
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	4313      	orrs	r3, r2
 8005444:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	621a      	str	r2, [r3, #32]
}
 8005452:	bf00      	nop
 8005454:	371c      	adds	r7, #28
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800545e:	b480      	push	{r7}
 8005460:	b085      	sub	sp, #20
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
 8005466:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005478:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800547a:	683a      	ldr	r2, [r7, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	4313      	orrs	r3, r2
 8005480:	f043 0307 	orr.w	r3, r3, #7
 8005484:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	609a      	str	r2, [r3, #8]
}
 800548c:	bf00      	nop
 800548e:	3714      	adds	r7, #20
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005498:	b480      	push	{r7}
 800549a:	b087      	sub	sp, #28
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
 80054a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	021a      	lsls	r2, r3, #8
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	431a      	orrs	r2, r3
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	4313      	orrs	r3, r2
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	609a      	str	r2, [r3, #8]
}
 80054cc:	bf00      	nop
 80054ce:	371c      	adds	r7, #28
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054d8:	b480      	push	{r7}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	f003 031f 	and.w	r3, r3, #31
 80054ea:	2201      	movs	r2, #1
 80054ec:	fa02 f303 	lsl.w	r3, r2, r3
 80054f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6a1a      	ldr	r2, [r3, #32]
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	43db      	mvns	r3, r3
 80054fa:	401a      	ands	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6a1a      	ldr	r2, [r3, #32]
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	f003 031f 	and.w	r3, r3, #31
 800550a:	6879      	ldr	r1, [r7, #4]
 800550c:	fa01 f303 	lsl.w	r3, r1, r3
 8005510:	431a      	orrs	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	621a      	str	r2, [r3, #32]
}
 8005516:	bf00      	nop
 8005518:	371c      	adds	r7, #28
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
	...

08005524 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d109      	bne.n	8005548 <HAL_TIMEx_PWMN_Start+0x24>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b01      	cmp	r3, #1
 800553e:	bf14      	ite	ne
 8005540:	2301      	movne	r3, #1
 8005542:	2300      	moveq	r3, #0
 8005544:	b2db      	uxtb	r3, r3
 8005546:	e022      	b.n	800558e <HAL_TIMEx_PWMN_Start+0x6a>
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	2b04      	cmp	r3, #4
 800554c:	d109      	bne.n	8005562 <HAL_TIMEx_PWMN_Start+0x3e>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b01      	cmp	r3, #1
 8005558:	bf14      	ite	ne
 800555a:	2301      	movne	r3, #1
 800555c:	2300      	moveq	r3, #0
 800555e:	b2db      	uxtb	r3, r3
 8005560:	e015      	b.n	800558e <HAL_TIMEx_PWMN_Start+0x6a>
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	2b08      	cmp	r3, #8
 8005566:	d109      	bne.n	800557c <HAL_TIMEx_PWMN_Start+0x58>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800556e:	b2db      	uxtb	r3, r3
 8005570:	2b01      	cmp	r3, #1
 8005572:	bf14      	ite	ne
 8005574:	2301      	movne	r3, #1
 8005576:	2300      	moveq	r3, #0
 8005578:	b2db      	uxtb	r3, r3
 800557a:	e008      	b.n	800558e <HAL_TIMEx_PWMN_Start+0x6a>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2b01      	cmp	r3, #1
 8005586:	bf14      	ite	ne
 8005588:	2301      	movne	r3, #1
 800558a:	2300      	moveq	r3, #0
 800558c:	b2db      	uxtb	r3, r3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d001      	beq.n	8005596 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e073      	b.n	800567e <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d104      	bne.n	80055a6 <HAL_TIMEx_PWMN_Start+0x82>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2202      	movs	r2, #2
 80055a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055a4:	e013      	b.n	80055ce <HAL_TIMEx_PWMN_Start+0xaa>
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	2b04      	cmp	r3, #4
 80055aa:	d104      	bne.n	80055b6 <HAL_TIMEx_PWMN_Start+0x92>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2202      	movs	r2, #2
 80055b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055b4:	e00b      	b.n	80055ce <HAL_TIMEx_PWMN_Start+0xaa>
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	2b08      	cmp	r3, #8
 80055ba:	d104      	bne.n	80055c6 <HAL_TIMEx_PWMN_Start+0xa2>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2202      	movs	r2, #2
 80055c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80055c4:	e003      	b.n	80055ce <HAL_TIMEx_PWMN_Start+0xaa>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2202      	movs	r2, #2
 80055ca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2204      	movs	r2, #4
 80055d4:	6839      	ldr	r1, [r7, #0]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f000 f9f4 	bl	80059c4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055ea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a25      	ldr	r2, [pc, #148]	; (8005688 <HAL_TIMEx_PWMN_Start+0x164>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d022      	beq.n	800563c <HAL_TIMEx_PWMN_Start+0x118>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055fe:	d01d      	beq.n	800563c <HAL_TIMEx_PWMN_Start+0x118>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a21      	ldr	r2, [pc, #132]	; (800568c <HAL_TIMEx_PWMN_Start+0x168>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d018      	beq.n	800563c <HAL_TIMEx_PWMN_Start+0x118>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a20      	ldr	r2, [pc, #128]	; (8005690 <HAL_TIMEx_PWMN_Start+0x16c>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d013      	beq.n	800563c <HAL_TIMEx_PWMN_Start+0x118>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a1e      	ldr	r2, [pc, #120]	; (8005694 <HAL_TIMEx_PWMN_Start+0x170>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d00e      	beq.n	800563c <HAL_TIMEx_PWMN_Start+0x118>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a1d      	ldr	r2, [pc, #116]	; (8005698 <HAL_TIMEx_PWMN_Start+0x174>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d009      	beq.n	800563c <HAL_TIMEx_PWMN_Start+0x118>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a1b      	ldr	r2, [pc, #108]	; (800569c <HAL_TIMEx_PWMN_Start+0x178>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d004      	beq.n	800563c <HAL_TIMEx_PWMN_Start+0x118>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a1a      	ldr	r2, [pc, #104]	; (80056a0 <HAL_TIMEx_PWMN_Start+0x17c>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d115      	bne.n	8005668 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	689a      	ldr	r2, [r3, #8]
 8005642:	4b18      	ldr	r3, [pc, #96]	; (80056a4 <HAL_TIMEx_PWMN_Start+0x180>)
 8005644:	4013      	ands	r3, r2
 8005646:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2b06      	cmp	r3, #6
 800564c:	d015      	beq.n	800567a <HAL_TIMEx_PWMN_Start+0x156>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005654:	d011      	beq.n	800567a <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f042 0201 	orr.w	r2, r2, #1
 8005664:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005666:	e008      	b.n	800567a <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f042 0201 	orr.w	r2, r2, #1
 8005676:	601a      	str	r2, [r3, #0]
 8005678:	e000      	b.n	800567c <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800567a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	40012c00 	.word	0x40012c00
 800568c:	40000400 	.word	0x40000400
 8005690:	40000800 	.word	0x40000800
 8005694:	40000c00 	.word	0x40000c00
 8005698:	40013400 	.word	0x40013400
 800569c:	40014000 	.word	0x40014000
 80056a0:	40015000 	.word	0x40015000
 80056a4:	00010007 	.word	0x00010007

080056a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d101      	bne.n	80056c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056bc:	2302      	movs	r3, #2
 80056be:	e074      	b.n	80057aa <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2202      	movs	r2, #2
 80056cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a34      	ldr	r2, [pc, #208]	; (80057b8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d009      	beq.n	80056fe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a33      	ldr	r2, [pc, #204]	; (80057bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d004      	beq.n	80056fe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a31      	ldr	r2, [pc, #196]	; (80057c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d108      	bne.n	8005710 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005704:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	4313      	orrs	r3, r2
 800570e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800571a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	4313      	orrs	r3, r2
 8005724:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a21      	ldr	r2, [pc, #132]	; (80057b8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d022      	beq.n	800577e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005740:	d01d      	beq.n	800577e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a1f      	ldr	r2, [pc, #124]	; (80057c4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d018      	beq.n	800577e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a1d      	ldr	r2, [pc, #116]	; (80057c8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d013      	beq.n	800577e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a1c      	ldr	r2, [pc, #112]	; (80057cc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d00e      	beq.n	800577e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a15      	ldr	r2, [pc, #84]	; (80057bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d009      	beq.n	800577e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a18      	ldr	r2, [pc, #96]	; (80057d0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d004      	beq.n	800577e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a11      	ldr	r2, [pc, #68]	; (80057c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d10c      	bne.n	8005798 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005784:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	4313      	orrs	r3, r2
 800578e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68ba      	ldr	r2, [r7, #8]
 8005796:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3714      	adds	r7, #20
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	40012c00 	.word	0x40012c00
 80057bc:	40013400 	.word	0x40013400
 80057c0:	40015000 	.word	0x40015000
 80057c4:	40000400 	.word	0x40000400
 80057c8:	40000800 	.word	0x40000800
 80057cc:	40000c00 	.word	0x40000c00
 80057d0:	40014000 	.word	0x40014000

080057d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80057de:	2300      	movs	r3, #0
 80057e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d101      	bne.n	80057f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80057ec:	2302      	movs	r3, #2
 80057ee:	e096      	b.n	800591e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	4313      	orrs	r3, r2
 8005804:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	4313      	orrs	r3, r2
 8005812:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	4313      	orrs	r3, r2
 8005820:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4313      	orrs	r3, r2
 800582e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	4313      	orrs	r3, r2
 800583c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	695b      	ldr	r3, [r3, #20]
 8005848:	4313      	orrs	r3, r2
 800584a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005856:	4313      	orrs	r3, r2
 8005858:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	041b      	lsls	r3, r3, #16
 8005866:	4313      	orrs	r3, r2
 8005868:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a2f      	ldr	r2, [pc, #188]	; (800592c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d009      	beq.n	8005888 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a2d      	ldr	r2, [pc, #180]	; (8005930 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d004      	beq.n	8005888 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a2c      	ldr	r2, [pc, #176]	; (8005934 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d106      	bne.n	8005896 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	69db      	ldr	r3, [r3, #28]
 8005892:	4313      	orrs	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a24      	ldr	r2, [pc, #144]	; (800592c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d009      	beq.n	80058b4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a22      	ldr	r2, [pc, #136]	; (8005930 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d004      	beq.n	80058b4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a21      	ldr	r2, [pc, #132]	; (8005934 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d12b      	bne.n	800590c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058be:	051b      	lsls	r3, r3, #20
 80058c0:	4313      	orrs	r3, r2
 80058c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	6a1b      	ldr	r3, [r3, #32]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058dc:	4313      	orrs	r3, r2
 80058de:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a11      	ldr	r2, [pc, #68]	; (800592c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d009      	beq.n	80058fe <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a10      	ldr	r2, [pc, #64]	; (8005930 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d004      	beq.n	80058fe <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a0e      	ldr	r2, [pc, #56]	; (8005934 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d106      	bne.n	800590c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005908:	4313      	orrs	r3, r2
 800590a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3714      	adds	r7, #20
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	40012c00 	.word	0x40012c00
 8005930:	40013400 	.word	0x40013400
 8005934:	40015000 	.word	0x40015000

08005938 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005940:	bf00      	nop
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b087      	sub	sp, #28
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	f003 031f 	and.w	r3, r3, #31
 80059d6:	2204      	movs	r2, #4
 80059d8:	fa02 f303 	lsl.w	r3, r2, r3
 80059dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6a1a      	ldr	r2, [r3, #32]
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	43db      	mvns	r3, r3
 80059e6:	401a      	ands	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6a1a      	ldr	r2, [r3, #32]
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	f003 031f 	and.w	r3, r3, #31
 80059f6:	6879      	ldr	r1, [r7, #4]
 80059f8:	fa01 f303 	lsl.w	r3, r1, r3
 80059fc:	431a      	orrs	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	621a      	str	r2, [r3, #32]
}
 8005a02:	bf00      	nop
 8005a04:	371c      	adds	r7, #28
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b082      	sub	sp, #8
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d101      	bne.n	8005a20 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e042      	b.n	8005aa6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d106      	bne.n	8005a38 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7fb fd00 	bl	8001438 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2224      	movs	r2, #36	; 0x24
 8005a3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f022 0201 	bic.w	r2, r2, #1
 8005a4e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 fc51 	bl	80062f8 <UART_SetConfig>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d101      	bne.n	8005a60 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e022      	b.n	8005aa6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d002      	beq.n	8005a6e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 ff41 	bl	80068f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	685a      	ldr	r2, [r3, #4]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a7c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	689a      	ldr	r2, [r3, #8]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a8c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f042 0201 	orr.w	r2, r2, #1
 8005a9c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 ffc8 	bl	8006a34 <UART_CheckIdleState>
 8005aa4:	4603      	mov	r3, r0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3708      	adds	r7, #8
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b08a      	sub	sp, #40	; 0x28
 8005ab2:	af02      	add	r7, sp, #8
 8005ab4:	60f8      	str	r0, [r7, #12]
 8005ab6:	60b9      	str	r1, [r7, #8]
 8005ab8:	603b      	str	r3, [r7, #0]
 8005aba:	4613      	mov	r3, r2
 8005abc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ac4:	2b20      	cmp	r3, #32
 8005ac6:	f040 8083 	bne.w	8005bd0 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d002      	beq.n	8005ad6 <HAL_UART_Transmit+0x28>
 8005ad0:	88fb      	ldrh	r3, [r7, #6]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d101      	bne.n	8005ada <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e07b      	b.n	8005bd2 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d101      	bne.n	8005ae8 <HAL_UART_Transmit+0x3a>
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	e074      	b.n	8005bd2 <HAL_UART_Transmit+0x124>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2221      	movs	r2, #33	; 0x21
 8005afc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b00:	f7fb fd4e 	bl	80015a0 <HAL_GetTick>
 8005b04:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	88fa      	ldrh	r2, [r7, #6]
 8005b0a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	88fa      	ldrh	r2, [r7, #6]
 8005b12:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b1e:	d108      	bne.n	8005b32 <HAL_UART_Transmit+0x84>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d104      	bne.n	8005b32 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	61bb      	str	r3, [r7, #24]
 8005b30:	e003      	b.n	8005b3a <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b36:	2300      	movs	r3, #0
 8005b38:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005b42:	e02c      	b.n	8005b9e <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	9300      	str	r3, [sp, #0]
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	2180      	movs	r1, #128	; 0x80
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f000 ffbb 	bl	8006aca <UART_WaitOnFlagUntilTimeout>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d001      	beq.n	8005b5e <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e039      	b.n	8005bd2 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d10b      	bne.n	8005b7c <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	881b      	ldrh	r3, [r3, #0]
 8005b68:	461a      	mov	r2, r3
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b72:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	3302      	adds	r3, #2
 8005b78:	61bb      	str	r3, [r7, #24]
 8005b7a:	e007      	b.n	8005b8c <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	781a      	ldrb	r2, [r3, #0]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	3b01      	subs	r3, #1
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1cc      	bne.n	8005b44 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	9300      	str	r3, [sp, #0]
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	2140      	movs	r1, #64	; 0x40
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f000 ff88 	bl	8006aca <UART_WaitOnFlagUntilTimeout>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d001      	beq.n	8005bc4 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e006      	b.n	8005bd2 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2220      	movs	r2, #32
 8005bc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	e000      	b.n	8005bd2 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005bd0:	2302      	movs	r3, #2
  }
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3720      	adds	r7, #32
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
	...

08005bdc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b08a      	sub	sp, #40	; 0x28
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	4613      	mov	r3, r2
 8005be8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bf0:	2b20      	cmp	r3, #32
 8005bf2:	d142      	bne.n	8005c7a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d002      	beq.n	8005c00 <HAL_UART_Receive_IT+0x24>
 8005bfa:	88fb      	ldrh	r3, [r7, #6]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d101      	bne.n	8005c04 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e03b      	b.n	8005c7c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d101      	bne.n	8005c12 <HAL_UART_Receive_IT+0x36>
 8005c0e:	2302      	movs	r3, #2
 8005c10:	e034      	b.n	8005c7c <HAL_UART_Receive_IT+0xa0>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a17      	ldr	r2, [pc, #92]	; (8005c84 <HAL_UART_Receive_IT+0xa8>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d01f      	beq.n	8005c6a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d018      	beq.n	8005c6a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	e853 3f00 	ldrex	r3, [r3]
 8005c44:	613b      	str	r3, [r7, #16]
   return(result);
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	461a      	mov	r2, r3
 8005c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c56:	623b      	str	r3, [r7, #32]
 8005c58:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5a:	69f9      	ldr	r1, [r7, #28]
 8005c5c:	6a3a      	ldr	r2, [r7, #32]
 8005c5e:	e841 2300 	strex	r3, r2, [r1]
 8005c62:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1e6      	bne.n	8005c38 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005c6a:	88fb      	ldrh	r3, [r7, #6]
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	68b9      	ldr	r1, [r7, #8]
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f000 fff3 	bl	8006c5c <UART_Start_Receive_IT>
 8005c76:	4603      	mov	r3, r0
 8005c78:	e000      	b.n	8005c7c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005c7a:	2302      	movs	r3, #2
  }
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3728      	adds	r7, #40	; 0x28
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	40008000 	.word	0x40008000

08005c88 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b0ba      	sub	sp, #232	; 0xe8
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	69db      	ldr	r3, [r3, #28]
 8005c96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005cae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005cb2:	f640 030f 	movw	r3, #2063	; 0x80f
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005cbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d11b      	bne.n	8005cfc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005cc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cc8:	f003 0320 	and.w	r3, r3, #32
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d015      	beq.n	8005cfc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005cd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cd4:	f003 0320 	and.w	r3, r3, #32
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d105      	bne.n	8005ce8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005cdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d009      	beq.n	8005cfc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f000 82d6 	beq.w	800629e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	4798      	blx	r3
      }
      return;
 8005cfa:	e2d0      	b.n	800629e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005cfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f000 811f 	beq.w	8005f44 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005d06:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005d0a:	4b8b      	ldr	r3, [pc, #556]	; (8005f38 <HAL_UART_IRQHandler+0x2b0>)
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d106      	bne.n	8005d20 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005d12:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005d16:	4b89      	ldr	r3, [pc, #548]	; (8005f3c <HAL_UART_IRQHandler+0x2b4>)
 8005d18:	4013      	ands	r3, r2
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	f000 8112 	beq.w	8005f44 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d24:	f003 0301 	and.w	r3, r3, #1
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d011      	beq.n	8005d50 <HAL_UART_IRQHandler+0xc8>
 8005d2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00b      	beq.n	8005d50 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d46:	f043 0201 	orr.w	r2, r3, #1
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d54:	f003 0302 	and.w	r3, r3, #2
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d011      	beq.n	8005d80 <HAL_UART_IRQHandler+0xf8>
 8005d5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d60:	f003 0301 	and.w	r3, r3, #1
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00b      	beq.n	8005d80 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2202      	movs	r2, #2
 8005d6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d76:	f043 0204 	orr.w	r2, r3, #4
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d84:	f003 0304 	and.w	r3, r3, #4
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d011      	beq.n	8005db0 <HAL_UART_IRQHandler+0x128>
 8005d8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d90:	f003 0301 	and.w	r3, r3, #1
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d00b      	beq.n	8005db0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2204      	movs	r2, #4
 8005d9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005da6:	f043 0202 	orr.w	r2, r3, #2
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005db4:	f003 0308 	and.w	r3, r3, #8
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d017      	beq.n	8005dec <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dc0:	f003 0320 	and.w	r3, r3, #32
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d105      	bne.n	8005dd4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005dc8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005dcc:	4b5a      	ldr	r3, [pc, #360]	; (8005f38 <HAL_UART_IRQHandler+0x2b0>)
 8005dce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00b      	beq.n	8005dec <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2208      	movs	r2, #8
 8005dda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005de2:	f043 0208 	orr.w	r2, r3, #8
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005df0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d012      	beq.n	8005e1e <HAL_UART_IRQHandler+0x196>
 8005df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dfc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00c      	beq.n	8005e1e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e14:	f043 0220 	orr.w	r2, r3, #32
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f000 823c 	beq.w	80062a2 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e2e:	f003 0320 	and.w	r3, r3, #32
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d013      	beq.n	8005e5e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005e36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e3a:	f003 0320 	and.w	r3, r3, #32
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d105      	bne.n	8005e4e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005e42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d007      	beq.n	8005e5e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d003      	beq.n	8005e5e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e72:	2b40      	cmp	r3, #64	; 0x40
 8005e74:	d005      	beq.n	8005e82 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005e76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e7a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d04f      	beq.n	8005f22 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f001 f814 	bl	8006eb0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e92:	2b40      	cmp	r3, #64	; 0x40
 8005e94:	d141      	bne.n	8005f1a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	3308      	adds	r3, #8
 8005e9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ea4:	e853 3f00 	ldrex	r3, [r3]
 8005ea8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005eac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005eb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	3308      	adds	r3, #8
 8005ebe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ec2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005ec6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005ece:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005ed2:	e841 2300 	strex	r3, r2, [r1]
 8005ed6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005eda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1d9      	bne.n	8005e96 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d013      	beq.n	8005f12 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005eee:	4a14      	ldr	r2, [pc, #80]	; (8005f40 <HAL_UART_IRQHandler+0x2b8>)
 8005ef0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7fc fdc3 	bl	8002a82 <HAL_DMA_Abort_IT>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d017      	beq.n	8005f32 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005f0c:	4610      	mov	r0, r2
 8005f0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f10:	e00f      	b.n	8005f32 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f9da 	bl	80062cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f18:	e00b      	b.n	8005f32 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 f9d6 	bl	80062cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f20:	e007      	b.n	8005f32 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f9d2 	bl	80062cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005f30:	e1b7      	b.n	80062a2 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f32:	bf00      	nop
    return;
 8005f34:	e1b5      	b.n	80062a2 <HAL_UART_IRQHandler+0x61a>
 8005f36:	bf00      	nop
 8005f38:	10000001 	.word	0x10000001
 8005f3c:	04000120 	.word	0x04000120
 8005f40:	08006f7d 	.word	0x08006f7d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	f040 814a 	bne.w	80061e2 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f52:	f003 0310 	and.w	r3, r3, #16
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	f000 8143 	beq.w	80061e2 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f60:	f003 0310 	and.w	r3, r3, #16
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f000 813c 	beq.w	80061e2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2210      	movs	r2, #16
 8005f70:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f7c:	2b40      	cmp	r3, #64	; 0x40
 8005f7e:	f040 80b5 	bne.w	80060ec <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f8e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f000 8187 	beq.w	80062a6 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005f9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	f080 817f 	bcs.w	80062a6 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0320 	and.w	r3, r3, #32
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f040 8086 	bne.w	80060d0 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005fd0:	e853 3f00 	ldrex	r3, [r3]
 8005fd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005fd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fe0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	461a      	mov	r2, r3
 8005fea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005fee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005ff2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005ffa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005ffe:	e841 2300 	strex	r3, r2, [r1]
 8006002:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006006:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1da      	bne.n	8005fc4 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	3308      	adds	r3, #8
 8006014:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006016:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006018:	e853 3f00 	ldrex	r3, [r3]
 800601c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800601e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006020:	f023 0301 	bic.w	r3, r3, #1
 8006024:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	3308      	adds	r3, #8
 800602e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006032:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006036:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006038:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800603a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800603e:	e841 2300 	strex	r3, r2, [r1]
 8006042:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006044:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1e1      	bne.n	800600e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	3308      	adds	r3, #8
 8006050:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006052:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006054:	e853 3f00 	ldrex	r3, [r3]
 8006058:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800605a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800605c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006060:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	3308      	adds	r3, #8
 800606a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800606e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006070:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006072:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006074:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006076:	e841 2300 	strex	r3, r2, [r1]
 800607a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800607c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1e3      	bne.n	800604a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2220      	movs	r2, #32
 8006086:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006096:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006098:	e853 3f00 	ldrex	r3, [r3]
 800609c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800609e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060a0:	f023 0310 	bic.w	r3, r3, #16
 80060a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	461a      	mov	r2, r3
 80060ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80060b4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80060b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060ba:	e841 2300 	strex	r3, r2, [r1]
 80060be:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80060c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1e4      	bne.n	8006090 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7fc fc80 	bl	80029d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80060dc:	b29b      	uxth	r3, r3
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	4619      	mov	r1, r3
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 f8fb 	bl	80062e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80060ea:	e0dc      	b.n	80062a6 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006106:	b29b      	uxth	r3, r3
 8006108:	2b00      	cmp	r3, #0
 800610a:	f000 80ce 	beq.w	80062aa <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800610e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006112:	2b00      	cmp	r3, #0
 8006114:	f000 80c9 	beq.w	80062aa <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006120:	e853 3f00 	ldrex	r3, [r3]
 8006124:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006128:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800612c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	461a      	mov	r2, r3
 8006136:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800613a:	647b      	str	r3, [r7, #68]	; 0x44
 800613c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006140:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006142:	e841 2300 	strex	r3, r2, [r1]
 8006146:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1e4      	bne.n	8006118 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	3308      	adds	r3, #8
 8006154:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006158:	e853 3f00 	ldrex	r3, [r3]
 800615c:	623b      	str	r3, [r7, #32]
   return(result);
 800615e:	6a3b      	ldr	r3, [r7, #32]
 8006160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006164:	f023 0301 	bic.w	r3, r3, #1
 8006168:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	3308      	adds	r3, #8
 8006172:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006176:	633a      	str	r2, [r7, #48]	; 0x30
 8006178:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800617c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800617e:	e841 2300 	strex	r3, r2, [r1]
 8006182:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1e1      	bne.n	800614e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2220      	movs	r2, #32
 800618e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	e853 3f00 	ldrex	r3, [r3]
 80061aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f023 0310 	bic.w	r3, r3, #16
 80061b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	461a      	mov	r2, r3
 80061bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80061c0:	61fb      	str	r3, [r7, #28]
 80061c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c4:	69b9      	ldr	r1, [r7, #24]
 80061c6:	69fa      	ldr	r2, [r7, #28]
 80061c8:	e841 2300 	strex	r3, r2, [r1]
 80061cc:	617b      	str	r3, [r7, #20]
   return(result);
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1e4      	bne.n	800619e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061d8:	4619      	mov	r1, r3
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f880 	bl	80062e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80061e0:	e063      	b.n	80062aa <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80061e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00e      	beq.n	800620c <HAL_UART_IRQHandler+0x584>
 80061ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d008      	beq.n	800620c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006202:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f001 fb57 	bl	80078b8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800620a:	e051      	b.n	80062b0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800620c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006214:	2b00      	cmp	r3, #0
 8006216:	d014      	beq.n	8006242 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800621c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006220:	2b00      	cmp	r3, #0
 8006222:	d105      	bne.n	8006230 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006224:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006228:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d008      	beq.n	8006242 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006234:	2b00      	cmp	r3, #0
 8006236:	d03a      	beq.n	80062ae <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	4798      	blx	r3
    }
    return;
 8006240:	e035      	b.n	80062ae <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800624a:	2b00      	cmp	r3, #0
 800624c:	d009      	beq.n	8006262 <HAL_UART_IRQHandler+0x5da>
 800624e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006256:	2b00      	cmp	r3, #0
 8006258:	d003      	beq.n	8006262 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 fea4 	bl	8006fa8 <UART_EndTransmit_IT>
    return;
 8006260:	e026      	b.n	80062b0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006266:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d009      	beq.n	8006282 <HAL_UART_IRQHandler+0x5fa>
 800626e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006272:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d003      	beq.n	8006282 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f001 fb30 	bl	80078e0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006280:	e016      	b.n	80062b0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006286:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d010      	beq.n	80062b0 <HAL_UART_IRQHandler+0x628>
 800628e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006292:	2b00      	cmp	r3, #0
 8006294:	da0c      	bge.n	80062b0 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f001 fb18 	bl	80078cc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800629c:	e008      	b.n	80062b0 <HAL_UART_IRQHandler+0x628>
      return;
 800629e:	bf00      	nop
 80062a0:	e006      	b.n	80062b0 <HAL_UART_IRQHandler+0x628>
    return;
 80062a2:	bf00      	nop
 80062a4:	e004      	b.n	80062b0 <HAL_UART_IRQHandler+0x628>
      return;
 80062a6:	bf00      	nop
 80062a8:	e002      	b.n	80062b0 <HAL_UART_IRQHandler+0x628>
      return;
 80062aa:	bf00      	nop
 80062ac:	e000      	b.n	80062b0 <HAL_UART_IRQHandler+0x628>
    return;
 80062ae:	bf00      	nop
  }
}
 80062b0:	37e8      	adds	r7, #232	; 0xe8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop

080062b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80062c0:	bf00      	nop
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80062d4:	bf00      	nop
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	460b      	mov	r3, r1
 80062ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80062ec:	bf00      	nop
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062fc:	b08c      	sub	sp, #48	; 0x30
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006302:	2300      	movs	r3, #0
 8006304:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	689a      	ldr	r2, [r3, #8]
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	431a      	orrs	r2, r3
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	431a      	orrs	r2, r3
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	69db      	ldr	r3, [r3, #28]
 800631c:	4313      	orrs	r3, r2
 800631e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	4baa      	ldr	r3, [pc, #680]	; (80065d0 <UART_SetConfig+0x2d8>)
 8006328:	4013      	ands	r3, r2
 800632a:	697a      	ldr	r2, [r7, #20]
 800632c:	6812      	ldr	r2, [r2, #0]
 800632e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006330:	430b      	orrs	r3, r1
 8006332:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	68da      	ldr	r2, [r3, #12]
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	430a      	orrs	r2, r1
 8006348:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a9f      	ldr	r2, [pc, #636]	; (80065d4 <UART_SetConfig+0x2dc>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d004      	beq.n	8006364 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	6a1b      	ldr	r3, [r3, #32]
 800635e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006360:	4313      	orrs	r3, r2
 8006362:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800636e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	6812      	ldr	r2, [r2, #0]
 8006376:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006378:	430b      	orrs	r3, r1
 800637a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006382:	f023 010f 	bic.w	r1, r3, #15
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	430a      	orrs	r2, r1
 8006390:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a90      	ldr	r2, [pc, #576]	; (80065d8 <UART_SetConfig+0x2e0>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d125      	bne.n	80063e8 <UART_SetConfig+0xf0>
 800639c:	4b8f      	ldr	r3, [pc, #572]	; (80065dc <UART_SetConfig+0x2e4>)
 800639e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063a2:	f003 0303 	and.w	r3, r3, #3
 80063a6:	2b03      	cmp	r3, #3
 80063a8:	d81a      	bhi.n	80063e0 <UART_SetConfig+0xe8>
 80063aa:	a201      	add	r2, pc, #4	; (adr r2, 80063b0 <UART_SetConfig+0xb8>)
 80063ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b0:	080063c1 	.word	0x080063c1
 80063b4:	080063d1 	.word	0x080063d1
 80063b8:	080063c9 	.word	0x080063c9
 80063bc:	080063d9 	.word	0x080063d9
 80063c0:	2301      	movs	r3, #1
 80063c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063c6:	e116      	b.n	80065f6 <UART_SetConfig+0x2fe>
 80063c8:	2302      	movs	r3, #2
 80063ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063ce:	e112      	b.n	80065f6 <UART_SetConfig+0x2fe>
 80063d0:	2304      	movs	r3, #4
 80063d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063d6:	e10e      	b.n	80065f6 <UART_SetConfig+0x2fe>
 80063d8:	2308      	movs	r3, #8
 80063da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063de:	e10a      	b.n	80065f6 <UART_SetConfig+0x2fe>
 80063e0:	2310      	movs	r3, #16
 80063e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063e6:	e106      	b.n	80065f6 <UART_SetConfig+0x2fe>
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a7c      	ldr	r2, [pc, #496]	; (80065e0 <UART_SetConfig+0x2e8>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d138      	bne.n	8006464 <UART_SetConfig+0x16c>
 80063f2:	4b7a      	ldr	r3, [pc, #488]	; (80065dc <UART_SetConfig+0x2e4>)
 80063f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063f8:	f003 030c 	and.w	r3, r3, #12
 80063fc:	2b0c      	cmp	r3, #12
 80063fe:	d82d      	bhi.n	800645c <UART_SetConfig+0x164>
 8006400:	a201      	add	r2, pc, #4	; (adr r2, 8006408 <UART_SetConfig+0x110>)
 8006402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006406:	bf00      	nop
 8006408:	0800643d 	.word	0x0800643d
 800640c:	0800645d 	.word	0x0800645d
 8006410:	0800645d 	.word	0x0800645d
 8006414:	0800645d 	.word	0x0800645d
 8006418:	0800644d 	.word	0x0800644d
 800641c:	0800645d 	.word	0x0800645d
 8006420:	0800645d 	.word	0x0800645d
 8006424:	0800645d 	.word	0x0800645d
 8006428:	08006445 	.word	0x08006445
 800642c:	0800645d 	.word	0x0800645d
 8006430:	0800645d 	.word	0x0800645d
 8006434:	0800645d 	.word	0x0800645d
 8006438:	08006455 	.word	0x08006455
 800643c:	2300      	movs	r3, #0
 800643e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006442:	e0d8      	b.n	80065f6 <UART_SetConfig+0x2fe>
 8006444:	2302      	movs	r3, #2
 8006446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800644a:	e0d4      	b.n	80065f6 <UART_SetConfig+0x2fe>
 800644c:	2304      	movs	r3, #4
 800644e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006452:	e0d0      	b.n	80065f6 <UART_SetConfig+0x2fe>
 8006454:	2308      	movs	r3, #8
 8006456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800645a:	e0cc      	b.n	80065f6 <UART_SetConfig+0x2fe>
 800645c:	2310      	movs	r3, #16
 800645e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006462:	e0c8      	b.n	80065f6 <UART_SetConfig+0x2fe>
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a5e      	ldr	r2, [pc, #376]	; (80065e4 <UART_SetConfig+0x2ec>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d125      	bne.n	80064ba <UART_SetConfig+0x1c2>
 800646e:	4b5b      	ldr	r3, [pc, #364]	; (80065dc <UART_SetConfig+0x2e4>)
 8006470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006474:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006478:	2b30      	cmp	r3, #48	; 0x30
 800647a:	d016      	beq.n	80064aa <UART_SetConfig+0x1b2>
 800647c:	2b30      	cmp	r3, #48	; 0x30
 800647e:	d818      	bhi.n	80064b2 <UART_SetConfig+0x1ba>
 8006480:	2b20      	cmp	r3, #32
 8006482:	d00a      	beq.n	800649a <UART_SetConfig+0x1a2>
 8006484:	2b20      	cmp	r3, #32
 8006486:	d814      	bhi.n	80064b2 <UART_SetConfig+0x1ba>
 8006488:	2b00      	cmp	r3, #0
 800648a:	d002      	beq.n	8006492 <UART_SetConfig+0x19a>
 800648c:	2b10      	cmp	r3, #16
 800648e:	d008      	beq.n	80064a2 <UART_SetConfig+0x1aa>
 8006490:	e00f      	b.n	80064b2 <UART_SetConfig+0x1ba>
 8006492:	2300      	movs	r3, #0
 8006494:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006498:	e0ad      	b.n	80065f6 <UART_SetConfig+0x2fe>
 800649a:	2302      	movs	r3, #2
 800649c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064a0:	e0a9      	b.n	80065f6 <UART_SetConfig+0x2fe>
 80064a2:	2304      	movs	r3, #4
 80064a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064a8:	e0a5      	b.n	80065f6 <UART_SetConfig+0x2fe>
 80064aa:	2308      	movs	r3, #8
 80064ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064b0:	e0a1      	b.n	80065f6 <UART_SetConfig+0x2fe>
 80064b2:	2310      	movs	r3, #16
 80064b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064b8:	e09d      	b.n	80065f6 <UART_SetConfig+0x2fe>
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a4a      	ldr	r2, [pc, #296]	; (80065e8 <UART_SetConfig+0x2f0>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d125      	bne.n	8006510 <UART_SetConfig+0x218>
 80064c4:	4b45      	ldr	r3, [pc, #276]	; (80065dc <UART_SetConfig+0x2e4>)
 80064c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80064ce:	2bc0      	cmp	r3, #192	; 0xc0
 80064d0:	d016      	beq.n	8006500 <UART_SetConfig+0x208>
 80064d2:	2bc0      	cmp	r3, #192	; 0xc0
 80064d4:	d818      	bhi.n	8006508 <UART_SetConfig+0x210>
 80064d6:	2b80      	cmp	r3, #128	; 0x80
 80064d8:	d00a      	beq.n	80064f0 <UART_SetConfig+0x1f8>
 80064da:	2b80      	cmp	r3, #128	; 0x80
 80064dc:	d814      	bhi.n	8006508 <UART_SetConfig+0x210>
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d002      	beq.n	80064e8 <UART_SetConfig+0x1f0>
 80064e2:	2b40      	cmp	r3, #64	; 0x40
 80064e4:	d008      	beq.n	80064f8 <UART_SetConfig+0x200>
 80064e6:	e00f      	b.n	8006508 <UART_SetConfig+0x210>
 80064e8:	2300      	movs	r3, #0
 80064ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064ee:	e082      	b.n	80065f6 <UART_SetConfig+0x2fe>
 80064f0:	2302      	movs	r3, #2
 80064f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064f6:	e07e      	b.n	80065f6 <UART_SetConfig+0x2fe>
 80064f8:	2304      	movs	r3, #4
 80064fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064fe:	e07a      	b.n	80065f6 <UART_SetConfig+0x2fe>
 8006500:	2308      	movs	r3, #8
 8006502:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006506:	e076      	b.n	80065f6 <UART_SetConfig+0x2fe>
 8006508:	2310      	movs	r3, #16
 800650a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800650e:	e072      	b.n	80065f6 <UART_SetConfig+0x2fe>
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a35      	ldr	r2, [pc, #212]	; (80065ec <UART_SetConfig+0x2f4>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d12a      	bne.n	8006570 <UART_SetConfig+0x278>
 800651a:	4b30      	ldr	r3, [pc, #192]	; (80065dc <UART_SetConfig+0x2e4>)
 800651c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006520:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006524:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006528:	d01a      	beq.n	8006560 <UART_SetConfig+0x268>
 800652a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800652e:	d81b      	bhi.n	8006568 <UART_SetConfig+0x270>
 8006530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006534:	d00c      	beq.n	8006550 <UART_SetConfig+0x258>
 8006536:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800653a:	d815      	bhi.n	8006568 <UART_SetConfig+0x270>
 800653c:	2b00      	cmp	r3, #0
 800653e:	d003      	beq.n	8006548 <UART_SetConfig+0x250>
 8006540:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006544:	d008      	beq.n	8006558 <UART_SetConfig+0x260>
 8006546:	e00f      	b.n	8006568 <UART_SetConfig+0x270>
 8006548:	2300      	movs	r3, #0
 800654a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800654e:	e052      	b.n	80065f6 <UART_SetConfig+0x2fe>
 8006550:	2302      	movs	r3, #2
 8006552:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006556:	e04e      	b.n	80065f6 <UART_SetConfig+0x2fe>
 8006558:	2304      	movs	r3, #4
 800655a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800655e:	e04a      	b.n	80065f6 <UART_SetConfig+0x2fe>
 8006560:	2308      	movs	r3, #8
 8006562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006566:	e046      	b.n	80065f6 <UART_SetConfig+0x2fe>
 8006568:	2310      	movs	r3, #16
 800656a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800656e:	e042      	b.n	80065f6 <UART_SetConfig+0x2fe>
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a17      	ldr	r2, [pc, #92]	; (80065d4 <UART_SetConfig+0x2dc>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d13a      	bne.n	80065f0 <UART_SetConfig+0x2f8>
 800657a:	4b18      	ldr	r3, [pc, #96]	; (80065dc <UART_SetConfig+0x2e4>)
 800657c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006580:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006584:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006588:	d01a      	beq.n	80065c0 <UART_SetConfig+0x2c8>
 800658a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800658e:	d81b      	bhi.n	80065c8 <UART_SetConfig+0x2d0>
 8006590:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006594:	d00c      	beq.n	80065b0 <UART_SetConfig+0x2b8>
 8006596:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800659a:	d815      	bhi.n	80065c8 <UART_SetConfig+0x2d0>
 800659c:	2b00      	cmp	r3, #0
 800659e:	d003      	beq.n	80065a8 <UART_SetConfig+0x2b0>
 80065a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065a4:	d008      	beq.n	80065b8 <UART_SetConfig+0x2c0>
 80065a6:	e00f      	b.n	80065c8 <UART_SetConfig+0x2d0>
 80065a8:	2300      	movs	r3, #0
 80065aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065ae:	e022      	b.n	80065f6 <UART_SetConfig+0x2fe>
 80065b0:	2302      	movs	r3, #2
 80065b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065b6:	e01e      	b.n	80065f6 <UART_SetConfig+0x2fe>
 80065b8:	2304      	movs	r3, #4
 80065ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065be:	e01a      	b.n	80065f6 <UART_SetConfig+0x2fe>
 80065c0:	2308      	movs	r3, #8
 80065c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065c6:	e016      	b.n	80065f6 <UART_SetConfig+0x2fe>
 80065c8:	2310      	movs	r3, #16
 80065ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065ce:	e012      	b.n	80065f6 <UART_SetConfig+0x2fe>
 80065d0:	cfff69f3 	.word	0xcfff69f3
 80065d4:	40008000 	.word	0x40008000
 80065d8:	40013800 	.word	0x40013800
 80065dc:	40021000 	.word	0x40021000
 80065e0:	40004400 	.word	0x40004400
 80065e4:	40004800 	.word	0x40004800
 80065e8:	40004c00 	.word	0x40004c00
 80065ec:	40005000 	.word	0x40005000
 80065f0:	2310      	movs	r3, #16
 80065f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4aae      	ldr	r2, [pc, #696]	; (80068b4 <UART_SetConfig+0x5bc>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	f040 8097 	bne.w	8006730 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006602:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006606:	2b08      	cmp	r3, #8
 8006608:	d823      	bhi.n	8006652 <UART_SetConfig+0x35a>
 800660a:	a201      	add	r2, pc, #4	; (adr r2, 8006610 <UART_SetConfig+0x318>)
 800660c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006610:	08006635 	.word	0x08006635
 8006614:	08006653 	.word	0x08006653
 8006618:	0800663d 	.word	0x0800663d
 800661c:	08006653 	.word	0x08006653
 8006620:	08006643 	.word	0x08006643
 8006624:	08006653 	.word	0x08006653
 8006628:	08006653 	.word	0x08006653
 800662c:	08006653 	.word	0x08006653
 8006630:	0800664b 	.word	0x0800664b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006634:	f7fd f9da 	bl	80039ec <HAL_RCC_GetPCLK1Freq>
 8006638:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800663a:	e010      	b.n	800665e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800663c:	4b9e      	ldr	r3, [pc, #632]	; (80068b8 <UART_SetConfig+0x5c0>)
 800663e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006640:	e00d      	b.n	800665e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006642:	f7fd f965 	bl	8003910 <HAL_RCC_GetSysClockFreq>
 8006646:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006648:	e009      	b.n	800665e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800664a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800664e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006650:	e005      	b.n	800665e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006652:	2300      	movs	r3, #0
 8006654:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800665c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800665e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006660:	2b00      	cmp	r3, #0
 8006662:	f000 8130 	beq.w	80068c6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666a:	4a94      	ldr	r2, [pc, #592]	; (80068bc <UART_SetConfig+0x5c4>)
 800666c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006670:	461a      	mov	r2, r3
 8006672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006674:	fbb3 f3f2 	udiv	r3, r3, r2
 8006678:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	685a      	ldr	r2, [r3, #4]
 800667e:	4613      	mov	r3, r2
 8006680:	005b      	lsls	r3, r3, #1
 8006682:	4413      	add	r3, r2
 8006684:	69ba      	ldr	r2, [r7, #24]
 8006686:	429a      	cmp	r2, r3
 8006688:	d305      	bcc.n	8006696 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006690:	69ba      	ldr	r2, [r7, #24]
 8006692:	429a      	cmp	r2, r3
 8006694:	d903      	bls.n	800669e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800669c:	e113      	b.n	80068c6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800669e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a0:	2200      	movs	r2, #0
 80066a2:	60bb      	str	r3, [r7, #8]
 80066a4:	60fa      	str	r2, [r7, #12]
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066aa:	4a84      	ldr	r2, [pc, #528]	; (80068bc <UART_SetConfig+0x5c4>)
 80066ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	2200      	movs	r2, #0
 80066b4:	603b      	str	r3, [r7, #0]
 80066b6:	607a      	str	r2, [r7, #4]
 80066b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80066c0:	f7f9 fe0e 	bl	80002e0 <__aeabi_uldivmod>
 80066c4:	4602      	mov	r2, r0
 80066c6:	460b      	mov	r3, r1
 80066c8:	4610      	mov	r0, r2
 80066ca:	4619      	mov	r1, r3
 80066cc:	f04f 0200 	mov.w	r2, #0
 80066d0:	f04f 0300 	mov.w	r3, #0
 80066d4:	020b      	lsls	r3, r1, #8
 80066d6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80066da:	0202      	lsls	r2, r0, #8
 80066dc:	6979      	ldr	r1, [r7, #20]
 80066de:	6849      	ldr	r1, [r1, #4]
 80066e0:	0849      	lsrs	r1, r1, #1
 80066e2:	2000      	movs	r0, #0
 80066e4:	460c      	mov	r4, r1
 80066e6:	4605      	mov	r5, r0
 80066e8:	eb12 0804 	adds.w	r8, r2, r4
 80066ec:	eb43 0905 	adc.w	r9, r3, r5
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	469a      	mov	sl, r3
 80066f8:	4693      	mov	fp, r2
 80066fa:	4652      	mov	r2, sl
 80066fc:	465b      	mov	r3, fp
 80066fe:	4640      	mov	r0, r8
 8006700:	4649      	mov	r1, r9
 8006702:	f7f9 fded 	bl	80002e0 <__aeabi_uldivmod>
 8006706:	4602      	mov	r2, r0
 8006708:	460b      	mov	r3, r1
 800670a:	4613      	mov	r3, r2
 800670c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800670e:	6a3b      	ldr	r3, [r7, #32]
 8006710:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006714:	d308      	bcc.n	8006728 <UART_SetConfig+0x430>
 8006716:	6a3b      	ldr	r3, [r7, #32]
 8006718:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800671c:	d204      	bcs.n	8006728 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	6a3a      	ldr	r2, [r7, #32]
 8006724:	60da      	str	r2, [r3, #12]
 8006726:	e0ce      	b.n	80068c6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800672e:	e0ca      	b.n	80068c6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	69db      	ldr	r3, [r3, #28]
 8006734:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006738:	d166      	bne.n	8006808 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800673a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800673e:	2b08      	cmp	r3, #8
 8006740:	d827      	bhi.n	8006792 <UART_SetConfig+0x49a>
 8006742:	a201      	add	r2, pc, #4	; (adr r2, 8006748 <UART_SetConfig+0x450>)
 8006744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006748:	0800676d 	.word	0x0800676d
 800674c:	08006775 	.word	0x08006775
 8006750:	0800677d 	.word	0x0800677d
 8006754:	08006793 	.word	0x08006793
 8006758:	08006783 	.word	0x08006783
 800675c:	08006793 	.word	0x08006793
 8006760:	08006793 	.word	0x08006793
 8006764:	08006793 	.word	0x08006793
 8006768:	0800678b 	.word	0x0800678b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800676c:	f7fd f93e 	bl	80039ec <HAL_RCC_GetPCLK1Freq>
 8006770:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006772:	e014      	b.n	800679e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006774:	f7fd f950 	bl	8003a18 <HAL_RCC_GetPCLK2Freq>
 8006778:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800677a:	e010      	b.n	800679e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800677c:	4b4e      	ldr	r3, [pc, #312]	; (80068b8 <UART_SetConfig+0x5c0>)
 800677e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006780:	e00d      	b.n	800679e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006782:	f7fd f8c5 	bl	8003910 <HAL_RCC_GetSysClockFreq>
 8006786:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006788:	e009      	b.n	800679e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800678a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800678e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006790:	e005      	b.n	800679e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006792:	2300      	movs	r3, #0
 8006794:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800679c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800679e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	f000 8090 	beq.w	80068c6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067aa:	4a44      	ldr	r2, [pc, #272]	; (80068bc <UART_SetConfig+0x5c4>)
 80067ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067b0:	461a      	mov	r2, r3
 80067b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80067b8:	005a      	lsls	r2, r3, #1
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	085b      	lsrs	r3, r3, #1
 80067c0:	441a      	add	r2, r3
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067cc:	6a3b      	ldr	r3, [r7, #32]
 80067ce:	2b0f      	cmp	r3, #15
 80067d0:	d916      	bls.n	8006800 <UART_SetConfig+0x508>
 80067d2:	6a3b      	ldr	r3, [r7, #32]
 80067d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067d8:	d212      	bcs.n	8006800 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067da:	6a3b      	ldr	r3, [r7, #32]
 80067dc:	b29b      	uxth	r3, r3
 80067de:	f023 030f 	bic.w	r3, r3, #15
 80067e2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067e4:	6a3b      	ldr	r3, [r7, #32]
 80067e6:	085b      	lsrs	r3, r3, #1
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	f003 0307 	and.w	r3, r3, #7
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	8bfb      	ldrh	r3, [r7, #30]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	8bfa      	ldrh	r2, [r7, #30]
 80067fc:	60da      	str	r2, [r3, #12]
 80067fe:	e062      	b.n	80068c6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006806:	e05e      	b.n	80068c6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006808:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800680c:	2b08      	cmp	r3, #8
 800680e:	d828      	bhi.n	8006862 <UART_SetConfig+0x56a>
 8006810:	a201      	add	r2, pc, #4	; (adr r2, 8006818 <UART_SetConfig+0x520>)
 8006812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006816:	bf00      	nop
 8006818:	0800683d 	.word	0x0800683d
 800681c:	08006845 	.word	0x08006845
 8006820:	0800684d 	.word	0x0800684d
 8006824:	08006863 	.word	0x08006863
 8006828:	08006853 	.word	0x08006853
 800682c:	08006863 	.word	0x08006863
 8006830:	08006863 	.word	0x08006863
 8006834:	08006863 	.word	0x08006863
 8006838:	0800685b 	.word	0x0800685b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800683c:	f7fd f8d6 	bl	80039ec <HAL_RCC_GetPCLK1Freq>
 8006840:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006842:	e014      	b.n	800686e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006844:	f7fd f8e8 	bl	8003a18 <HAL_RCC_GetPCLK2Freq>
 8006848:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800684a:	e010      	b.n	800686e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800684c:	4b1a      	ldr	r3, [pc, #104]	; (80068b8 <UART_SetConfig+0x5c0>)
 800684e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006850:	e00d      	b.n	800686e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006852:	f7fd f85d 	bl	8003910 <HAL_RCC_GetSysClockFreq>
 8006856:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006858:	e009      	b.n	800686e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800685a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800685e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006860:	e005      	b.n	800686e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006862:	2300      	movs	r3, #0
 8006864:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800686c:	bf00      	nop
    }

    if (pclk != 0U)
 800686e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006870:	2b00      	cmp	r3, #0
 8006872:	d028      	beq.n	80068c6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006878:	4a10      	ldr	r2, [pc, #64]	; (80068bc <UART_SetConfig+0x5c4>)
 800687a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800687e:	461a      	mov	r2, r3
 8006880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006882:	fbb3 f2f2 	udiv	r2, r3, r2
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	085b      	lsrs	r3, r3, #1
 800688c:	441a      	add	r2, r3
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	fbb2 f3f3 	udiv	r3, r2, r3
 8006896:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006898:	6a3b      	ldr	r3, [r7, #32]
 800689a:	2b0f      	cmp	r3, #15
 800689c:	d910      	bls.n	80068c0 <UART_SetConfig+0x5c8>
 800689e:	6a3b      	ldr	r3, [r7, #32]
 80068a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068a4:	d20c      	bcs.n	80068c0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068a6:	6a3b      	ldr	r3, [r7, #32]
 80068a8:	b29a      	uxth	r2, r3
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	60da      	str	r2, [r3, #12]
 80068b0:	e009      	b.n	80068c6 <UART_SetConfig+0x5ce>
 80068b2:	bf00      	nop
 80068b4:	40008000 	.word	0x40008000
 80068b8:	00f42400 	.word	0x00f42400
 80068bc:	080094a4 	.word	0x080094a4
      }
      else
      {
        ret = HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	2201      	movs	r2, #1
 80068ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	2201      	movs	r2, #1
 80068d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	2200      	movs	r2, #0
 80068da:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	2200      	movs	r2, #0
 80068e0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80068e2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3730      	adds	r7, #48	; 0x30
 80068ea:	46bd      	mov	sp, r7
 80068ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080068f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fc:	f003 0301 	and.w	r3, r3, #1
 8006900:	2b00      	cmp	r3, #0
 8006902:	d00a      	beq.n	800691a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	430a      	orrs	r2, r1
 8006918:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800691e:	f003 0302 	and.w	r3, r3, #2
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00a      	beq.n	800693c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	430a      	orrs	r2, r1
 800693a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006940:	f003 0304 	and.w	r3, r3, #4
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00a      	beq.n	800695e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	430a      	orrs	r2, r1
 800695c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006962:	f003 0308 	and.w	r3, r3, #8
 8006966:	2b00      	cmp	r3, #0
 8006968:	d00a      	beq.n	8006980 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	430a      	orrs	r2, r1
 800697e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006984:	f003 0310 	and.w	r3, r3, #16
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00a      	beq.n	80069a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	430a      	orrs	r2, r1
 80069a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a6:	f003 0320 	and.w	r3, r3, #32
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00a      	beq.n	80069c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	430a      	orrs	r2, r1
 80069c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d01a      	beq.n	8006a06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	430a      	orrs	r2, r1
 80069e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069ee:	d10a      	bne.n	8006a06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	430a      	orrs	r2, r1
 8006a04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00a      	beq.n	8006a28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	430a      	orrs	r2, r1
 8006a26:	605a      	str	r2, [r3, #4]
  }
}
 8006a28:	bf00      	nop
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b086      	sub	sp, #24
 8006a38:	af02      	add	r7, sp, #8
 8006a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a44:	f7fa fdac 	bl	80015a0 <HAL_GetTick>
 8006a48:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 0308 	and.w	r3, r3, #8
 8006a54:	2b08      	cmp	r3, #8
 8006a56:	d10e      	bne.n	8006a76 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a5c:	9300      	str	r3, [sp, #0]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 f82f 	bl	8006aca <UART_WaitOnFlagUntilTimeout>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d001      	beq.n	8006a76 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a72:	2303      	movs	r3, #3
 8006a74:	e025      	b.n	8006ac2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 0304 	and.w	r3, r3, #4
 8006a80:	2b04      	cmp	r3, #4
 8006a82:	d10e      	bne.n	8006aa2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a88:	9300      	str	r3, [sp, #0]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f819 	bl	8006aca <UART_WaitOnFlagUntilTimeout>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d001      	beq.n	8006aa2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e00f      	b.n	8006ac2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2220      	movs	r2, #32
 8006aa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2220      	movs	r2, #32
 8006aae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3710      	adds	r7, #16
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b09c      	sub	sp, #112	; 0x70
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	60f8      	str	r0, [r7, #12]
 8006ad2:	60b9      	str	r1, [r7, #8]
 8006ad4:	603b      	str	r3, [r7, #0]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ada:	e0a9      	b.n	8006c30 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006adc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae2:	f000 80a5 	beq.w	8006c30 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ae6:	f7fa fd5b 	bl	80015a0 <HAL_GetTick>
 8006aea:	4602      	mov	r2, r0
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d302      	bcc.n	8006afc <UART_WaitOnFlagUntilTimeout+0x32>
 8006af6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d140      	bne.n	8006b7e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b04:	e853 3f00 	ldrex	r3, [r3]
 8006b08:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b10:	667b      	str	r3, [r7, #100]	; 0x64
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	461a      	mov	r2, r3
 8006b18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b1c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006b20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006b22:	e841 2300 	strex	r3, r2, [r1]
 8006b26:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006b28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1e6      	bne.n	8006afc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	3308      	adds	r3, #8
 8006b34:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b38:	e853 3f00 	ldrex	r3, [r3]
 8006b3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b40:	f023 0301 	bic.w	r3, r3, #1
 8006b44:	663b      	str	r3, [r7, #96]	; 0x60
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	3308      	adds	r3, #8
 8006b4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006b4e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006b50:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b56:	e841 2300 	strex	r3, r2, [r1]
 8006b5a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006b5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1e5      	bne.n	8006b2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2220      	movs	r2, #32
 8006b66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2220      	movs	r2, #32
 8006b6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	e069      	b.n	8006c52 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0304 	and.w	r3, r3, #4
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d051      	beq.n	8006c30 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	69db      	ldr	r3, [r3, #28]
 8006b92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b9a:	d149      	bne.n	8006c30 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ba4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bae:	e853 3f00 	ldrex	r3, [r3]
 8006bb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006bba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bc4:	637b      	str	r3, [r7, #52]	; 0x34
 8006bc6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006bca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bcc:	e841 2300 	strex	r3, r2, [r1]
 8006bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d1e6      	bne.n	8006ba6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	3308      	adds	r3, #8
 8006bde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	e853 3f00 	ldrex	r3, [r3]
 8006be6:	613b      	str	r3, [r7, #16]
   return(result);
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	f023 0301 	bic.w	r3, r3, #1
 8006bee:	66bb      	str	r3, [r7, #104]	; 0x68
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	3308      	adds	r3, #8
 8006bf6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006bf8:	623a      	str	r2, [r7, #32]
 8006bfa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bfc:	69f9      	ldr	r1, [r7, #28]
 8006bfe:	6a3a      	ldr	r2, [r7, #32]
 8006c00:	e841 2300 	strex	r3, r2, [r1]
 8006c04:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d1e5      	bne.n	8006bd8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2220      	movs	r2, #32
 8006c10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2220      	movs	r2, #32
 8006c18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2220      	movs	r2, #32
 8006c20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	e010      	b.n	8006c52 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	69da      	ldr	r2, [r3, #28]
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	4013      	ands	r3, r2
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	bf0c      	ite	eq
 8006c40:	2301      	moveq	r3, #1
 8006c42:	2300      	movne	r3, #0
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	461a      	mov	r2, r3
 8006c48:	79fb      	ldrb	r3, [r7, #7]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	f43f af46 	beq.w	8006adc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3770      	adds	r7, #112	; 0x70
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
	...

08006c5c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b0a3      	sub	sp, #140	; 0x8c
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	4613      	mov	r3, r2
 8006c68:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	68ba      	ldr	r2, [r7, #8]
 8006c6e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	88fa      	ldrh	r2, [r7, #6]
 8006c74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	88fa      	ldrh	r2, [r7, #6]
 8006c7c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2200      	movs	r2, #0
 8006c84:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c8e:	d10e      	bne.n	8006cae <UART_Start_Receive_IT+0x52>
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d105      	bne.n	8006ca4 <UART_Start_Receive_IT+0x48>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006c9e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006ca2:	e02d      	b.n	8006d00 <UART_Start_Receive_IT+0xa4>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	22ff      	movs	r2, #255	; 0xff
 8006ca8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006cac:	e028      	b.n	8006d00 <UART_Start_Receive_IT+0xa4>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d10d      	bne.n	8006cd2 <UART_Start_Receive_IT+0x76>
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d104      	bne.n	8006cc8 <UART_Start_Receive_IT+0x6c>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	22ff      	movs	r2, #255	; 0xff
 8006cc2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006cc6:	e01b      	b.n	8006d00 <UART_Start_Receive_IT+0xa4>
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	227f      	movs	r2, #127	; 0x7f
 8006ccc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006cd0:	e016      	b.n	8006d00 <UART_Start_Receive_IT+0xa4>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cda:	d10d      	bne.n	8006cf8 <UART_Start_Receive_IT+0x9c>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d104      	bne.n	8006cee <UART_Start_Receive_IT+0x92>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	227f      	movs	r2, #127	; 0x7f
 8006ce8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006cec:	e008      	b.n	8006d00 <UART_Start_Receive_IT+0xa4>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	223f      	movs	r2, #63	; 0x3f
 8006cf2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006cf6:	e003      	b.n	8006d00 <UART_Start_Receive_IT+0xa4>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2222      	movs	r2, #34	; 0x22
 8006d0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	3308      	adds	r3, #8
 8006d16:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d1a:	e853 3f00 	ldrex	r3, [r3]
 8006d1e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006d20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d22:	f043 0301 	orr.w	r3, r3, #1
 8006d26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	3308      	adds	r3, #8
 8006d30:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006d34:	673a      	str	r2, [r7, #112]	; 0x70
 8006d36:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d38:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006d3a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006d3c:	e841 2300 	strex	r3, r2, [r1]
 8006d40:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006d42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1e3      	bne.n	8006d10 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d50:	d153      	bne.n	8006dfa <UART_Start_Receive_IT+0x19e>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006d58:	88fa      	ldrh	r2, [r7, #6]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d34d      	bcc.n	8006dfa <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d66:	d107      	bne.n	8006d78 <UART_Start_Receive_IT+0x11c>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d103      	bne.n	8006d78 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	4a4b      	ldr	r2, [pc, #300]	; (8006ea0 <UART_Start_Receive_IT+0x244>)
 8006d74:	671a      	str	r2, [r3, #112]	; 0x70
 8006d76:	e002      	b.n	8006d7e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	4a4a      	ldr	r2, [pc, #296]	; (8006ea4 <UART_Start_Receive_IT+0x248>)
 8006d7c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d01a      	beq.n	8006dc4 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d96:	e853 3f00 	ldrex	r3, [r3]
 8006d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006da2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	461a      	mov	r2, r3
 8006dac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006db0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006db2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006db6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006db8:	e841 2300 	strex	r3, r2, [r1]
 8006dbc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006dbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d1e4      	bne.n	8006d8e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	3308      	adds	r3, #8
 8006dca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dce:	e853 3f00 	ldrex	r3, [r3]
 8006dd2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dda:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	3308      	adds	r3, #8
 8006de2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006de4:	64ba      	str	r2, [r7, #72]	; 0x48
 8006de6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006dea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006dec:	e841 2300 	strex	r3, r2, [r1]
 8006df0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006df2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d1e5      	bne.n	8006dc4 <UART_Start_Receive_IT+0x168>
 8006df8:	e04a      	b.n	8006e90 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e02:	d107      	bne.n	8006e14 <UART_Start_Receive_IT+0x1b8>
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d103      	bne.n	8006e14 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	4a26      	ldr	r2, [pc, #152]	; (8006ea8 <UART_Start_Receive_IT+0x24c>)
 8006e10:	671a      	str	r2, [r3, #112]	; 0x70
 8006e12:	e002      	b.n	8006e1a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	4a25      	ldr	r2, [pc, #148]	; (8006eac <UART_Start_Receive_IT+0x250>)
 8006e18:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d019      	beq.n	8006e5e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e32:	e853 3f00 	ldrex	r3, [r3]
 8006e36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006e3e:	677b      	str	r3, [r7, #116]	; 0x74
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	461a      	mov	r2, r3
 8006e46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e48:	637b      	str	r3, [r7, #52]	; 0x34
 8006e4a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e50:	e841 2300 	strex	r3, r2, [r1]
 8006e54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d1e6      	bne.n	8006e2a <UART_Start_Receive_IT+0x1ce>
 8006e5c:	e018      	b.n	8006e90 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	e853 3f00 	ldrex	r3, [r3]
 8006e6a:	613b      	str	r3, [r7, #16]
   return(result);
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	f043 0320 	orr.w	r3, r3, #32
 8006e72:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	461a      	mov	r2, r3
 8006e7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e7c:	623b      	str	r3, [r7, #32]
 8006e7e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e80:	69f9      	ldr	r1, [r7, #28]
 8006e82:	6a3a      	ldr	r2, [r7, #32]
 8006e84:	e841 2300 	strex	r3, r2, [r1]
 8006e88:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1e6      	bne.n	8006e5e <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	378c      	adds	r7, #140	; 0x8c
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	080075b9 	.word	0x080075b9
 8006ea4:	080072c1 	.word	0x080072c1
 8006ea8:	0800715f 	.word	0x0800715f
 8006eac:	08006fff 	.word	0x08006fff

08006eb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b095      	sub	sp, #84	; 0x54
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ec0:	e853 3f00 	ldrex	r3, [r3]
 8006ec4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ecc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ed6:	643b      	str	r3, [r7, #64]	; 0x40
 8006ed8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eda:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006edc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ede:	e841 2300 	strex	r3, r2, [r1]
 8006ee2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d1e6      	bne.n	8006eb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	3308      	adds	r3, #8
 8006ef0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef2:	6a3b      	ldr	r3, [r7, #32]
 8006ef4:	e853 3f00 	ldrex	r3, [r3]
 8006ef8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f00:	f023 0301 	bic.w	r3, r3, #1
 8006f04:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	3308      	adds	r3, #8
 8006f0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f16:	e841 2300 	strex	r3, r2, [r1]
 8006f1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1e3      	bne.n	8006eea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d118      	bne.n	8006f5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	e853 3f00 	ldrex	r3, [r3]
 8006f36:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	f023 0310 	bic.w	r3, r3, #16
 8006f3e:	647b      	str	r3, [r7, #68]	; 0x44
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	461a      	mov	r2, r3
 8006f46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f48:	61bb      	str	r3, [r7, #24]
 8006f4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4c:	6979      	ldr	r1, [r7, #20]
 8006f4e:	69ba      	ldr	r2, [r7, #24]
 8006f50:	e841 2300 	strex	r3, r2, [r1]
 8006f54:	613b      	str	r3, [r7, #16]
   return(result);
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1e6      	bne.n	8006f2a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2220      	movs	r2, #32
 8006f60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006f70:	bf00      	nop
 8006f72:	3754      	adds	r7, #84	; 0x54
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	f7ff f996 	bl	80062cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fa0:	bf00      	nop
 8006fa2:	3710      	adds	r7, #16
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b088      	sub	sp, #32
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	e853 3f00 	ldrex	r3, [r3]
 8006fbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fc4:	61fb      	str	r3, [r7, #28]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	61bb      	str	r3, [r7, #24]
 8006fd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd2:	6979      	ldr	r1, [r7, #20]
 8006fd4:	69ba      	ldr	r2, [r7, #24]
 8006fd6:	e841 2300 	strex	r3, r2, [r1]
 8006fda:	613b      	str	r3, [r7, #16]
   return(result);
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1e6      	bne.n	8006fb0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2220      	movs	r2, #32
 8006fe6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f7ff f961 	bl	80062b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ff6:	bf00      	nop
 8006ff8:	3720      	adds	r7, #32
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b096      	sub	sp, #88	; 0x58
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800700c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007016:	2b22      	cmp	r3, #34	; 0x22
 8007018:	f040 8095 	bne.w	8007146 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007022:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007026:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800702a:	b2d9      	uxtb	r1, r3
 800702c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007030:	b2da      	uxtb	r2, r3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007036:	400a      	ands	r2, r1
 8007038:	b2d2      	uxtb	r2, r2
 800703a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007040:	1c5a      	adds	r2, r3, #1
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800704c:	b29b      	uxth	r3, r3
 800704e:	3b01      	subs	r3, #1
 8007050:	b29a      	uxth	r2, r3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800705e:	b29b      	uxth	r3, r3
 8007060:	2b00      	cmp	r3, #0
 8007062:	d178      	bne.n	8007156 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706c:	e853 3f00 	ldrex	r3, [r3]
 8007070:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007074:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007078:	653b      	str	r3, [r7, #80]	; 0x50
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	461a      	mov	r2, r3
 8007080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007082:	647b      	str	r3, [r7, #68]	; 0x44
 8007084:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007086:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007088:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800708a:	e841 2300 	strex	r3, r2, [r1]
 800708e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007092:	2b00      	cmp	r3, #0
 8007094:	d1e6      	bne.n	8007064 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	3308      	adds	r3, #8
 800709c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a0:	e853 3f00 	ldrex	r3, [r3]
 80070a4:	623b      	str	r3, [r7, #32]
   return(result);
 80070a6:	6a3b      	ldr	r3, [r7, #32]
 80070a8:	f023 0301 	bic.w	r3, r3, #1
 80070ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	3308      	adds	r3, #8
 80070b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80070b6:	633a      	str	r2, [r7, #48]	; 0x30
 80070b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070be:	e841 2300 	strex	r3, r2, [r1]
 80070c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80070c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1e5      	bne.n	8007096 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2220      	movs	r2, #32
 80070ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d12e      	bne.n	800713e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	e853 3f00 	ldrex	r3, [r3]
 80070f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f023 0310 	bic.w	r3, r3, #16
 80070fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	461a      	mov	r2, r3
 8007102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007104:	61fb      	str	r3, [r7, #28]
 8007106:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007108:	69b9      	ldr	r1, [r7, #24]
 800710a:	69fa      	ldr	r2, [r7, #28]
 800710c:	e841 2300 	strex	r3, r2, [r1]
 8007110:	617b      	str	r3, [r7, #20]
   return(result);
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1e6      	bne.n	80070e6 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	69db      	ldr	r3, [r3, #28]
 800711e:	f003 0310 	and.w	r3, r3, #16
 8007122:	2b10      	cmp	r3, #16
 8007124:	d103      	bne.n	800712e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2210      	movs	r2, #16
 800712c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007134:	4619      	mov	r1, r3
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f7ff f8d2 	bl	80062e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800713c:	e00b      	b.n	8007156 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f7fa f918 	bl	8001374 <HAL_UART_RxCpltCallback>
}
 8007144:	e007      	b.n	8007156 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	699a      	ldr	r2, [r3, #24]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f042 0208 	orr.w	r2, r2, #8
 8007154:	619a      	str	r2, [r3, #24]
}
 8007156:	bf00      	nop
 8007158:	3758      	adds	r7, #88	; 0x58
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b096      	sub	sp, #88	; 0x58
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800716c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007176:	2b22      	cmp	r3, #34	; 0x22
 8007178:	f040 8095 	bne.w	80072a6 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007182:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800718a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800718c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007190:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007194:	4013      	ands	r3, r2
 8007196:	b29a      	uxth	r2, r3
 8007198:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800719a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071a0:	1c9a      	adds	r2, r3, #2
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	3b01      	subs	r3, #1
 80071b0:	b29a      	uxth	r2, r3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80071be:	b29b      	uxth	r3, r3
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d178      	bne.n	80072b6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071cc:	e853 3f00 	ldrex	r3, [r3]
 80071d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80071d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	461a      	mov	r2, r3
 80071e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071e2:	643b      	str	r3, [r7, #64]	; 0x40
 80071e4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80071e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80071ea:	e841 2300 	strex	r3, r2, [r1]
 80071ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1e6      	bne.n	80071c4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	3308      	adds	r3, #8
 80071fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071fe:	6a3b      	ldr	r3, [r7, #32]
 8007200:	e853 3f00 	ldrex	r3, [r3]
 8007204:	61fb      	str	r3, [r7, #28]
   return(result);
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	f023 0301 	bic.w	r3, r3, #1
 800720c:	64bb      	str	r3, [r7, #72]	; 0x48
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	3308      	adds	r3, #8
 8007214:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007216:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007218:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800721c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800721e:	e841 2300 	strex	r3, r2, [r1]
 8007222:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007226:	2b00      	cmp	r3, #0
 8007228:	d1e5      	bne.n	80071f6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2220      	movs	r2, #32
 800722e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800723c:	2b01      	cmp	r3, #1
 800723e:	d12e      	bne.n	800729e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	e853 3f00 	ldrex	r3, [r3]
 8007252:	60bb      	str	r3, [r7, #8]
   return(result);
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	f023 0310 	bic.w	r3, r3, #16
 800725a:	647b      	str	r3, [r7, #68]	; 0x44
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	461a      	mov	r2, r3
 8007262:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007264:	61bb      	str	r3, [r7, #24]
 8007266:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007268:	6979      	ldr	r1, [r7, #20]
 800726a:	69ba      	ldr	r2, [r7, #24]
 800726c:	e841 2300 	strex	r3, r2, [r1]
 8007270:	613b      	str	r3, [r7, #16]
   return(result);
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d1e6      	bne.n	8007246 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	69db      	ldr	r3, [r3, #28]
 800727e:	f003 0310 	and.w	r3, r3, #16
 8007282:	2b10      	cmp	r3, #16
 8007284:	d103      	bne.n	800728e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2210      	movs	r2, #16
 800728c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007294:	4619      	mov	r1, r3
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f7ff f822 	bl	80062e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800729c:	e00b      	b.n	80072b6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f7fa f868 	bl	8001374 <HAL_UART_RxCpltCallback>
}
 80072a4:	e007      	b.n	80072b6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	699a      	ldr	r2, [r3, #24]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f042 0208 	orr.w	r2, r2, #8
 80072b4:	619a      	str	r2, [r3, #24]
}
 80072b6:	bf00      	nop
 80072b8:	3758      	adds	r7, #88	; 0x58
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
	...

080072c0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b0a6      	sub	sp, #152	; 0x98
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80072ce:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	69db      	ldr	r3, [r3, #28]
 80072d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072f6:	2b22      	cmp	r3, #34	; 0x22
 80072f8:	f040 814f 	bne.w	800759a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007302:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007306:	e0f6      	b.n	80074f6 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007312:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8007316:	b2d9      	uxtb	r1, r3
 8007318:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800731c:	b2da      	uxtb	r2, r3
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007322:	400a      	ands	r2, r1
 8007324:	b2d2      	uxtb	r2, r2
 8007326:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800732c:	1c5a      	adds	r2, r3, #1
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007338:	b29b      	uxth	r3, r3
 800733a:	3b01      	subs	r3, #1
 800733c:	b29a      	uxth	r2, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	69db      	ldr	r3, [r3, #28]
 800734a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800734e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007352:	f003 0307 	and.w	r3, r3, #7
 8007356:	2b00      	cmp	r3, #0
 8007358:	d053      	beq.n	8007402 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800735a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800735e:	f003 0301 	and.w	r3, r3, #1
 8007362:	2b00      	cmp	r3, #0
 8007364:	d011      	beq.n	800738a <UART_RxISR_8BIT_FIFOEN+0xca>
 8007366:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800736a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800736e:	2b00      	cmp	r3, #0
 8007370:	d00b      	beq.n	800738a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2201      	movs	r2, #1
 8007378:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007380:	f043 0201 	orr.w	r2, r3, #1
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800738a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800738e:	f003 0302 	and.w	r3, r3, #2
 8007392:	2b00      	cmp	r3, #0
 8007394:	d011      	beq.n	80073ba <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007396:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800739a:	f003 0301 	and.w	r3, r3, #1
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d00b      	beq.n	80073ba <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2202      	movs	r2, #2
 80073a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073b0:	f043 0204 	orr.w	r2, r3, #4
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80073ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80073be:	f003 0304 	and.w	r3, r3, #4
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d011      	beq.n	80073ea <UART_RxISR_8BIT_FIFOEN+0x12a>
 80073c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80073ca:	f003 0301 	and.w	r3, r3, #1
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d00b      	beq.n	80073ea <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2204      	movs	r2, #4
 80073d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073e0:	f043 0202 	orr.w	r2, r3, #2
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d006      	beq.n	8007402 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f7fe ff69 	bl	80062cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007408:	b29b      	uxth	r3, r3
 800740a:	2b00      	cmp	r3, #0
 800740c:	d173      	bne.n	80074f6 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007414:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007416:	e853 3f00 	ldrex	r3, [r3]
 800741a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800741c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800741e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007422:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	461a      	mov	r2, r3
 800742c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007430:	66bb      	str	r3, [r7, #104]	; 0x68
 8007432:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007434:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007436:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007438:	e841 2300 	strex	r3, r2, [r1]
 800743c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800743e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007440:	2b00      	cmp	r3, #0
 8007442:	d1e4      	bne.n	800740e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	3308      	adds	r3, #8
 800744a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800744c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800744e:	e853 3f00 	ldrex	r3, [r3]
 8007452:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007456:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800745a:	f023 0301 	bic.w	r3, r3, #1
 800745e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	3308      	adds	r3, #8
 8007466:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007468:	657a      	str	r2, [r7, #84]	; 0x54
 800746a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800746e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007470:	e841 2300 	strex	r3, r2, [r1]
 8007474:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007478:	2b00      	cmp	r3, #0
 800747a:	d1e3      	bne.n	8007444 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2220      	movs	r2, #32
 8007480:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800748e:	2b01      	cmp	r3, #1
 8007490:	d12e      	bne.n	80074f0 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800749e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074a0:	e853 3f00 	ldrex	r3, [r3]
 80074a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80074a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a8:	f023 0310 	bic.w	r3, r3, #16
 80074ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	461a      	mov	r2, r3
 80074b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074b6:	643b      	str	r3, [r7, #64]	; 0x40
 80074b8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80074bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80074be:	e841 2300 	strex	r3, r2, [r1]
 80074c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80074c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d1e6      	bne.n	8007498 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	69db      	ldr	r3, [r3, #28]
 80074d0:	f003 0310 	and.w	r3, r3, #16
 80074d4:	2b10      	cmp	r3, #16
 80074d6:	d103      	bne.n	80074e0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2210      	movs	r2, #16
 80074de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80074e6:	4619      	mov	r1, r3
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f7fe fef9 	bl	80062e0 <HAL_UARTEx_RxEventCallback>
 80074ee:	e002      	b.n	80074f6 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f7f9 ff3f 	bl	8001374 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80074f6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d006      	beq.n	800750c <UART_RxISR_8BIT_FIFOEN+0x24c>
 80074fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007502:	f003 0320 	and.w	r3, r3, #32
 8007506:	2b00      	cmp	r3, #0
 8007508:	f47f aefe 	bne.w	8007308 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007512:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007516:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800751a:	2b00      	cmp	r3, #0
 800751c:	d045      	beq.n	80075aa <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007524:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007528:	429a      	cmp	r2, r3
 800752a:	d23e      	bcs.n	80075aa <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	3308      	adds	r3, #8
 8007532:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007534:	6a3b      	ldr	r3, [r7, #32]
 8007536:	e853 3f00 	ldrex	r3, [r3]
 800753a:	61fb      	str	r3, [r7, #28]
   return(result);
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007542:	673b      	str	r3, [r7, #112]	; 0x70
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	3308      	adds	r3, #8
 800754a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800754c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800754e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007550:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007552:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007554:	e841 2300 	strex	r3, r2, [r1]
 8007558:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755c:	2b00      	cmp	r3, #0
 800755e:	d1e5      	bne.n	800752c <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4a14      	ldr	r2, [pc, #80]	; (80075b4 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8007564:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	e853 3f00 	ldrex	r3, [r3]
 8007572:	60bb      	str	r3, [r7, #8]
   return(result);
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	f043 0320 	orr.w	r3, r3, #32
 800757a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	461a      	mov	r2, r3
 8007582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007584:	61bb      	str	r3, [r7, #24]
 8007586:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007588:	6979      	ldr	r1, [r7, #20]
 800758a:	69ba      	ldr	r2, [r7, #24]
 800758c:	e841 2300 	strex	r3, r2, [r1]
 8007590:	613b      	str	r3, [r7, #16]
   return(result);
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d1e6      	bne.n	8007566 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007598:	e007      	b.n	80075aa <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	699a      	ldr	r2, [r3, #24]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f042 0208 	orr.w	r2, r2, #8
 80075a8:	619a      	str	r2, [r3, #24]
}
 80075aa:	bf00      	nop
 80075ac:	3798      	adds	r7, #152	; 0x98
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	08006fff 	.word	0x08006fff

080075b8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b0a8      	sub	sp, #160	; 0xa0
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80075c6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	69db      	ldr	r3, [r3, #28]
 80075d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ee:	2b22      	cmp	r3, #34	; 0x22
 80075f0:	f040 8153 	bne.w	800789a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80075fa:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80075fe:	e0fa      	b.n	80077f6 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007606:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800760e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8007612:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8007616:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800761a:	4013      	ands	r3, r2
 800761c:	b29a      	uxth	r2, r3
 800761e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007622:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007628:	1c9a      	adds	r2, r3, #2
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007634:	b29b      	uxth	r3, r3
 8007636:	3b01      	subs	r3, #1
 8007638:	b29a      	uxth	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	69db      	ldr	r3, [r3, #28]
 8007646:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800764a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800764e:	f003 0307 	and.w	r3, r3, #7
 8007652:	2b00      	cmp	r3, #0
 8007654:	d053      	beq.n	80076fe <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007656:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800765a:	f003 0301 	and.w	r3, r3, #1
 800765e:	2b00      	cmp	r3, #0
 8007660:	d011      	beq.n	8007686 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007662:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00b      	beq.n	8007686 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	2201      	movs	r2, #1
 8007674:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800767c:	f043 0201 	orr.w	r2, r3, #1
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007686:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800768a:	f003 0302 	and.w	r3, r3, #2
 800768e:	2b00      	cmp	r3, #0
 8007690:	d011      	beq.n	80076b6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007692:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007696:	f003 0301 	and.w	r3, r3, #1
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00b      	beq.n	80076b6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	2202      	movs	r2, #2
 80076a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076ac:	f043 0204 	orr.w	r2, r3, #4
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076ba:	f003 0304 	and.w	r3, r3, #4
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d011      	beq.n	80076e6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80076c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80076c6:	f003 0301 	and.w	r3, r3, #1
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00b      	beq.n	80076e6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	2204      	movs	r2, #4
 80076d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076dc:	f043 0202 	orr.w	r2, r3, #2
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d006      	beq.n	80076fe <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f7fe fdeb 	bl	80062cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007704:	b29b      	uxth	r3, r3
 8007706:	2b00      	cmp	r3, #0
 8007708:	d175      	bne.n	80077f6 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007710:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007712:	e853 3f00 	ldrex	r3, [r3]
 8007716:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007718:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800771a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800771e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	461a      	mov	r2, r3
 8007728:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800772c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800772e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007730:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007732:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007734:	e841 2300 	strex	r3, r2, [r1]
 8007738:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800773a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800773c:	2b00      	cmp	r3, #0
 800773e:	d1e4      	bne.n	800770a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	3308      	adds	r3, #8
 8007746:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800774a:	e853 3f00 	ldrex	r3, [r3]
 800774e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007750:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007752:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007756:	f023 0301 	bic.w	r3, r3, #1
 800775a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	3308      	adds	r3, #8
 8007764:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007768:	65ba      	str	r2, [r7, #88]	; 0x58
 800776a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800776c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800776e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007770:	e841 2300 	strex	r3, r2, [r1]
 8007774:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007778:	2b00      	cmp	r3, #0
 800777a:	d1e1      	bne.n	8007740 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2220      	movs	r2, #32
 8007780:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800778e:	2b01      	cmp	r3, #1
 8007790:	d12e      	bne.n	80077f0 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a0:	e853 3f00 	ldrex	r3, [r3]
 80077a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80077a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077a8:	f023 0310 	bic.w	r3, r3, #16
 80077ac:	67fb      	str	r3, [r7, #124]	; 0x7c
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	461a      	mov	r2, r3
 80077b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80077b6:	647b      	str	r3, [r7, #68]	; 0x44
 80077b8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80077bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077be:	e841 2300 	strex	r3, r2, [r1]
 80077c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80077c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d1e6      	bne.n	8007798 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	69db      	ldr	r3, [r3, #28]
 80077d0:	f003 0310 	and.w	r3, r3, #16
 80077d4:	2b10      	cmp	r3, #16
 80077d6:	d103      	bne.n	80077e0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2210      	movs	r2, #16
 80077de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80077e6:	4619      	mov	r1, r3
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f7fe fd79 	bl	80062e0 <HAL_UARTEx_RxEventCallback>
 80077ee:	e002      	b.n	80077f6 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f7f9 fdbf 	bl	8001374 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80077f6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d006      	beq.n	800780c <UART_RxISR_16BIT_FIFOEN+0x254>
 80077fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007802:	f003 0320 	and.w	r3, r3, #32
 8007806:	2b00      	cmp	r3, #0
 8007808:	f47f aefa 	bne.w	8007600 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007812:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007816:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800781a:	2b00      	cmp	r3, #0
 800781c:	d045      	beq.n	80078aa <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007824:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8007828:	429a      	cmp	r2, r3
 800782a:	d23e      	bcs.n	80078aa <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	3308      	adds	r3, #8
 8007832:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007836:	e853 3f00 	ldrex	r3, [r3]
 800783a:	623b      	str	r3, [r7, #32]
   return(result);
 800783c:	6a3b      	ldr	r3, [r7, #32]
 800783e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007842:	677b      	str	r3, [r7, #116]	; 0x74
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	3308      	adds	r3, #8
 800784a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800784c:	633a      	str	r2, [r7, #48]	; 0x30
 800784e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007850:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007852:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007854:	e841 2300 	strex	r3, r2, [r1]
 8007858:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800785a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785c:	2b00      	cmp	r3, #0
 800785e:	d1e5      	bne.n	800782c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	4a14      	ldr	r2, [pc, #80]	; (80078b4 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8007864:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	e853 3f00 	ldrex	r3, [r3]
 8007872:	60fb      	str	r3, [r7, #12]
   return(result);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f043 0320 	orr.w	r3, r3, #32
 800787a:	673b      	str	r3, [r7, #112]	; 0x70
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	461a      	mov	r2, r3
 8007882:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007884:	61fb      	str	r3, [r7, #28]
 8007886:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007888:	69b9      	ldr	r1, [r7, #24]
 800788a:	69fa      	ldr	r2, [r7, #28]
 800788c:	e841 2300 	strex	r3, r2, [r1]
 8007890:	617b      	str	r3, [r7, #20]
   return(result);
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d1e6      	bne.n	8007866 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007898:	e007      	b.n	80078aa <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	699a      	ldr	r2, [r3, #24]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f042 0208 	orr.w	r2, r2, #8
 80078a8:	619a      	str	r2, [r3, #24]
}
 80078aa:	bf00      	nop
 80078ac:	37a0      	adds	r7, #160	; 0xa0
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	0800715f 	.word	0x0800715f

080078b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80078d4:	bf00      	nop
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80078e8:	bf00      	nop
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b085      	sub	sp, #20
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007902:	2b01      	cmp	r3, #1
 8007904:	d101      	bne.n	800790a <HAL_UARTEx_DisableFifoMode+0x16>
 8007906:	2302      	movs	r3, #2
 8007908:	e027      	b.n	800795a <HAL_UARTEx_DisableFifoMode+0x66>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2201      	movs	r2, #1
 800790e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2224      	movs	r2, #36	; 0x24
 8007916:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f022 0201 	bic.w	r2, r2, #1
 8007930:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007938:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68fa      	ldr	r2, [r7, #12]
 8007946:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2220      	movs	r2, #32
 800794c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3714      	adds	r7, #20
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr

08007966 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007966:	b580      	push	{r7, lr}
 8007968:	b084      	sub	sp, #16
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
 800796e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007976:	2b01      	cmp	r3, #1
 8007978:	d101      	bne.n	800797e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800797a:	2302      	movs	r3, #2
 800797c:	e02d      	b.n	80079da <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2201      	movs	r2, #1
 8007982:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2224      	movs	r2, #36	; 0x24
 800798a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f022 0201 	bic.w	r2, r2, #1
 80079a4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	683a      	ldr	r2, [r7, #0]
 80079b6:	430a      	orrs	r2, r1
 80079b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 f850 	bl	8007a60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2220      	movs	r2, #32
 80079cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b084      	sub	sp, #16
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
 80079ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d101      	bne.n	80079fa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80079f6:	2302      	movs	r3, #2
 80079f8:	e02d      	b.n	8007a56 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2201      	movs	r2, #1
 80079fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2224      	movs	r2, #36	; 0x24
 8007a06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f022 0201 	bic.w	r2, r2, #1
 8007a20:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	683a      	ldr	r2, [r7, #0]
 8007a32:	430a      	orrs	r2, r1
 8007a34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f812 	bl	8007a60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2220      	movs	r2, #32
 8007a48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
	...

08007a60 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b085      	sub	sp, #20
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d108      	bne.n	8007a82 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007a80:	e031      	b.n	8007ae6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007a82:	2308      	movs	r3, #8
 8007a84:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007a86:	2308      	movs	r3, #8
 8007a88:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	0e5b      	lsrs	r3, r3, #25
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	f003 0307 	and.w	r3, r3, #7
 8007a98:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	0f5b      	lsrs	r3, r3, #29
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	f003 0307 	and.w	r3, r3, #7
 8007aa8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007aaa:	7bbb      	ldrb	r3, [r7, #14]
 8007aac:	7b3a      	ldrb	r2, [r7, #12]
 8007aae:	4911      	ldr	r1, [pc, #68]	; (8007af4 <UARTEx_SetNbDataToProcess+0x94>)
 8007ab0:	5c8a      	ldrb	r2, [r1, r2]
 8007ab2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007ab6:	7b3a      	ldrb	r2, [r7, #12]
 8007ab8:	490f      	ldr	r1, [pc, #60]	; (8007af8 <UARTEx_SetNbDataToProcess+0x98>)
 8007aba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007abc:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ac0:	b29a      	uxth	r2, r3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ac8:	7bfb      	ldrb	r3, [r7, #15]
 8007aca:	7b7a      	ldrb	r2, [r7, #13]
 8007acc:	4909      	ldr	r1, [pc, #36]	; (8007af4 <UARTEx_SetNbDataToProcess+0x94>)
 8007ace:	5c8a      	ldrb	r2, [r1, r2]
 8007ad0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007ad4:	7b7a      	ldrb	r2, [r7, #13]
 8007ad6:	4908      	ldr	r1, [pc, #32]	; (8007af8 <UARTEx_SetNbDataToProcess+0x98>)
 8007ad8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ada:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ade:	b29a      	uxth	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007ae6:	bf00      	nop
 8007ae8:	3714      	adds	r7, #20
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	080094bc 	.word	0x080094bc
 8007af8:	080094c4 	.word	0x080094c4

08007afc <atoi>:
 8007afc:	220a      	movs	r2, #10
 8007afe:	2100      	movs	r1, #0
 8007b00:	f000 b944 	b.w	8007d8c <strtol>

08007b04 <__errno>:
 8007b04:	4b01      	ldr	r3, [pc, #4]	; (8007b0c <__errno+0x8>)
 8007b06:	6818      	ldr	r0, [r3, #0]
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop
 8007b0c:	2000000c 	.word	0x2000000c

08007b10 <__libc_init_array>:
 8007b10:	b570      	push	{r4, r5, r6, lr}
 8007b12:	4d0d      	ldr	r5, [pc, #52]	; (8007b48 <__libc_init_array+0x38>)
 8007b14:	4c0d      	ldr	r4, [pc, #52]	; (8007b4c <__libc_init_array+0x3c>)
 8007b16:	1b64      	subs	r4, r4, r5
 8007b18:	10a4      	asrs	r4, r4, #2
 8007b1a:	2600      	movs	r6, #0
 8007b1c:	42a6      	cmp	r6, r4
 8007b1e:	d109      	bne.n	8007b34 <__libc_init_array+0x24>
 8007b20:	4d0b      	ldr	r5, [pc, #44]	; (8007b50 <__libc_init_array+0x40>)
 8007b22:	4c0c      	ldr	r4, [pc, #48]	; (8007b54 <__libc_init_array+0x44>)
 8007b24:	f001 faf2 	bl	800910c <_init>
 8007b28:	1b64      	subs	r4, r4, r5
 8007b2a:	10a4      	asrs	r4, r4, #2
 8007b2c:	2600      	movs	r6, #0
 8007b2e:	42a6      	cmp	r6, r4
 8007b30:	d105      	bne.n	8007b3e <__libc_init_array+0x2e>
 8007b32:	bd70      	pop	{r4, r5, r6, pc}
 8007b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b38:	4798      	blx	r3
 8007b3a:	3601      	adds	r6, #1
 8007b3c:	e7ee      	b.n	8007b1c <__libc_init_array+0xc>
 8007b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b42:	4798      	blx	r3
 8007b44:	3601      	adds	r6, #1
 8007b46:	e7f2      	b.n	8007b2e <__libc_init_array+0x1e>
 8007b48:	0800971c 	.word	0x0800971c
 8007b4c:	0800971c 	.word	0x0800971c
 8007b50:	0800971c 	.word	0x0800971c
 8007b54:	08009720 	.word	0x08009720

08007b58 <memset>:
 8007b58:	4402      	add	r2, r0
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d100      	bne.n	8007b62 <memset+0xa>
 8007b60:	4770      	bx	lr
 8007b62:	f803 1b01 	strb.w	r1, [r3], #1
 8007b66:	e7f9      	b.n	8007b5c <memset+0x4>

08007b68 <sniprintf>:
 8007b68:	b40c      	push	{r2, r3}
 8007b6a:	b530      	push	{r4, r5, lr}
 8007b6c:	4b17      	ldr	r3, [pc, #92]	; (8007bcc <sniprintf+0x64>)
 8007b6e:	1e0c      	subs	r4, r1, #0
 8007b70:	681d      	ldr	r5, [r3, #0]
 8007b72:	b09d      	sub	sp, #116	; 0x74
 8007b74:	da08      	bge.n	8007b88 <sniprintf+0x20>
 8007b76:	238b      	movs	r3, #139	; 0x8b
 8007b78:	602b      	str	r3, [r5, #0]
 8007b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b7e:	b01d      	add	sp, #116	; 0x74
 8007b80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b84:	b002      	add	sp, #8
 8007b86:	4770      	bx	lr
 8007b88:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007b8c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007b90:	bf14      	ite	ne
 8007b92:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007b96:	4623      	moveq	r3, r4
 8007b98:	9304      	str	r3, [sp, #16]
 8007b9a:	9307      	str	r3, [sp, #28]
 8007b9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007ba0:	9002      	str	r0, [sp, #8]
 8007ba2:	9006      	str	r0, [sp, #24]
 8007ba4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007ba8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007baa:	ab21      	add	r3, sp, #132	; 0x84
 8007bac:	a902      	add	r1, sp, #8
 8007bae:	4628      	mov	r0, r5
 8007bb0:	9301      	str	r3, [sp, #4]
 8007bb2:	f000 fa69 	bl	8008088 <_svfiprintf_r>
 8007bb6:	1c43      	adds	r3, r0, #1
 8007bb8:	bfbc      	itt	lt
 8007bba:	238b      	movlt	r3, #139	; 0x8b
 8007bbc:	602b      	strlt	r3, [r5, #0]
 8007bbe:	2c00      	cmp	r4, #0
 8007bc0:	d0dd      	beq.n	8007b7e <sniprintf+0x16>
 8007bc2:	9b02      	ldr	r3, [sp, #8]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	701a      	strb	r2, [r3, #0]
 8007bc8:	e7d9      	b.n	8007b7e <sniprintf+0x16>
 8007bca:	bf00      	nop
 8007bcc:	2000000c 	.word	0x2000000c

08007bd0 <strtok>:
 8007bd0:	4b16      	ldr	r3, [pc, #88]	; (8007c2c <strtok+0x5c>)
 8007bd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007bd4:	681e      	ldr	r6, [r3, #0]
 8007bd6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8007bd8:	4605      	mov	r5, r0
 8007bda:	b9fc      	cbnz	r4, 8007c1c <strtok+0x4c>
 8007bdc:	2050      	movs	r0, #80	; 0x50
 8007bde:	9101      	str	r1, [sp, #4]
 8007be0:	f000 f90e 	bl	8007e00 <malloc>
 8007be4:	9901      	ldr	r1, [sp, #4]
 8007be6:	65b0      	str	r0, [r6, #88]	; 0x58
 8007be8:	4602      	mov	r2, r0
 8007bea:	b920      	cbnz	r0, 8007bf6 <strtok+0x26>
 8007bec:	4b10      	ldr	r3, [pc, #64]	; (8007c30 <strtok+0x60>)
 8007bee:	4811      	ldr	r0, [pc, #68]	; (8007c34 <strtok+0x64>)
 8007bf0:	2157      	movs	r1, #87	; 0x57
 8007bf2:	f000 f8d5 	bl	8007da0 <__assert_func>
 8007bf6:	e9c0 4400 	strd	r4, r4, [r0]
 8007bfa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007bfe:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007c02:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8007c06:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8007c0a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8007c0e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8007c12:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8007c16:	6184      	str	r4, [r0, #24]
 8007c18:	7704      	strb	r4, [r0, #28]
 8007c1a:	6244      	str	r4, [r0, #36]	; 0x24
 8007c1c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8007c1e:	2301      	movs	r3, #1
 8007c20:	4628      	mov	r0, r5
 8007c22:	b002      	add	sp, #8
 8007c24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007c28:	f000 b806 	b.w	8007c38 <__strtok_r>
 8007c2c:	2000000c 	.word	0x2000000c
 8007c30:	080094d0 	.word	0x080094d0
 8007c34:	080094e7 	.word	0x080094e7

08007c38 <__strtok_r>:
 8007c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c3a:	b908      	cbnz	r0, 8007c40 <__strtok_r+0x8>
 8007c3c:	6810      	ldr	r0, [r2, #0]
 8007c3e:	b188      	cbz	r0, 8007c64 <__strtok_r+0x2c>
 8007c40:	4604      	mov	r4, r0
 8007c42:	4620      	mov	r0, r4
 8007c44:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007c48:	460f      	mov	r7, r1
 8007c4a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007c4e:	b91e      	cbnz	r6, 8007c58 <__strtok_r+0x20>
 8007c50:	b965      	cbnz	r5, 8007c6c <__strtok_r+0x34>
 8007c52:	6015      	str	r5, [r2, #0]
 8007c54:	4628      	mov	r0, r5
 8007c56:	e005      	b.n	8007c64 <__strtok_r+0x2c>
 8007c58:	42b5      	cmp	r5, r6
 8007c5a:	d1f6      	bne.n	8007c4a <__strtok_r+0x12>
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d1f0      	bne.n	8007c42 <__strtok_r+0xa>
 8007c60:	6014      	str	r4, [r2, #0]
 8007c62:	7003      	strb	r3, [r0, #0]
 8007c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c66:	461c      	mov	r4, r3
 8007c68:	e00c      	b.n	8007c84 <__strtok_r+0x4c>
 8007c6a:	b915      	cbnz	r5, 8007c72 <__strtok_r+0x3a>
 8007c6c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007c70:	460e      	mov	r6, r1
 8007c72:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007c76:	42ab      	cmp	r3, r5
 8007c78:	d1f7      	bne.n	8007c6a <__strtok_r+0x32>
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d0f3      	beq.n	8007c66 <__strtok_r+0x2e>
 8007c7e:	2300      	movs	r3, #0
 8007c80:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007c84:	6014      	str	r4, [r2, #0]
 8007c86:	e7ed      	b.n	8007c64 <__strtok_r+0x2c>

08007c88 <_strtol_l.constprop.0>:
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c8e:	d001      	beq.n	8007c94 <_strtol_l.constprop.0+0xc>
 8007c90:	2b24      	cmp	r3, #36	; 0x24
 8007c92:	d906      	bls.n	8007ca2 <_strtol_l.constprop.0+0x1a>
 8007c94:	f7ff ff36 	bl	8007b04 <__errno>
 8007c98:	2316      	movs	r3, #22
 8007c9a:	6003      	str	r3, [r0, #0]
 8007c9c:	2000      	movs	r0, #0
 8007c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ca2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007d88 <_strtol_l.constprop.0+0x100>
 8007ca6:	460d      	mov	r5, r1
 8007ca8:	462e      	mov	r6, r5
 8007caa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007cae:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007cb2:	f017 0708 	ands.w	r7, r7, #8
 8007cb6:	d1f7      	bne.n	8007ca8 <_strtol_l.constprop.0+0x20>
 8007cb8:	2c2d      	cmp	r4, #45	; 0x2d
 8007cba:	d132      	bne.n	8007d22 <_strtol_l.constprop.0+0x9a>
 8007cbc:	782c      	ldrb	r4, [r5, #0]
 8007cbe:	2701      	movs	r7, #1
 8007cc0:	1cb5      	adds	r5, r6, #2
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d05b      	beq.n	8007d7e <_strtol_l.constprop.0+0xf6>
 8007cc6:	2b10      	cmp	r3, #16
 8007cc8:	d109      	bne.n	8007cde <_strtol_l.constprop.0+0x56>
 8007cca:	2c30      	cmp	r4, #48	; 0x30
 8007ccc:	d107      	bne.n	8007cde <_strtol_l.constprop.0+0x56>
 8007cce:	782c      	ldrb	r4, [r5, #0]
 8007cd0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007cd4:	2c58      	cmp	r4, #88	; 0x58
 8007cd6:	d14d      	bne.n	8007d74 <_strtol_l.constprop.0+0xec>
 8007cd8:	786c      	ldrb	r4, [r5, #1]
 8007cda:	2310      	movs	r3, #16
 8007cdc:	3502      	adds	r5, #2
 8007cde:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007ce2:	f108 38ff 	add.w	r8, r8, #4294967295
 8007ce6:	f04f 0c00 	mov.w	ip, #0
 8007cea:	fbb8 f9f3 	udiv	r9, r8, r3
 8007cee:	4666      	mov	r6, ip
 8007cf0:	fb03 8a19 	mls	sl, r3, r9, r8
 8007cf4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007cf8:	f1be 0f09 	cmp.w	lr, #9
 8007cfc:	d816      	bhi.n	8007d2c <_strtol_l.constprop.0+0xa4>
 8007cfe:	4674      	mov	r4, lr
 8007d00:	42a3      	cmp	r3, r4
 8007d02:	dd24      	ble.n	8007d4e <_strtol_l.constprop.0+0xc6>
 8007d04:	f1bc 0f00 	cmp.w	ip, #0
 8007d08:	db1e      	blt.n	8007d48 <_strtol_l.constprop.0+0xc0>
 8007d0a:	45b1      	cmp	r9, r6
 8007d0c:	d31c      	bcc.n	8007d48 <_strtol_l.constprop.0+0xc0>
 8007d0e:	d101      	bne.n	8007d14 <_strtol_l.constprop.0+0x8c>
 8007d10:	45a2      	cmp	sl, r4
 8007d12:	db19      	blt.n	8007d48 <_strtol_l.constprop.0+0xc0>
 8007d14:	fb06 4603 	mla	r6, r6, r3, r4
 8007d18:	f04f 0c01 	mov.w	ip, #1
 8007d1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d20:	e7e8      	b.n	8007cf4 <_strtol_l.constprop.0+0x6c>
 8007d22:	2c2b      	cmp	r4, #43	; 0x2b
 8007d24:	bf04      	itt	eq
 8007d26:	782c      	ldrbeq	r4, [r5, #0]
 8007d28:	1cb5      	addeq	r5, r6, #2
 8007d2a:	e7ca      	b.n	8007cc2 <_strtol_l.constprop.0+0x3a>
 8007d2c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007d30:	f1be 0f19 	cmp.w	lr, #25
 8007d34:	d801      	bhi.n	8007d3a <_strtol_l.constprop.0+0xb2>
 8007d36:	3c37      	subs	r4, #55	; 0x37
 8007d38:	e7e2      	b.n	8007d00 <_strtol_l.constprop.0+0x78>
 8007d3a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007d3e:	f1be 0f19 	cmp.w	lr, #25
 8007d42:	d804      	bhi.n	8007d4e <_strtol_l.constprop.0+0xc6>
 8007d44:	3c57      	subs	r4, #87	; 0x57
 8007d46:	e7db      	b.n	8007d00 <_strtol_l.constprop.0+0x78>
 8007d48:	f04f 3cff 	mov.w	ip, #4294967295
 8007d4c:	e7e6      	b.n	8007d1c <_strtol_l.constprop.0+0x94>
 8007d4e:	f1bc 0f00 	cmp.w	ip, #0
 8007d52:	da05      	bge.n	8007d60 <_strtol_l.constprop.0+0xd8>
 8007d54:	2322      	movs	r3, #34	; 0x22
 8007d56:	6003      	str	r3, [r0, #0]
 8007d58:	4646      	mov	r6, r8
 8007d5a:	b942      	cbnz	r2, 8007d6e <_strtol_l.constprop.0+0xe6>
 8007d5c:	4630      	mov	r0, r6
 8007d5e:	e79e      	b.n	8007c9e <_strtol_l.constprop.0+0x16>
 8007d60:	b107      	cbz	r7, 8007d64 <_strtol_l.constprop.0+0xdc>
 8007d62:	4276      	negs	r6, r6
 8007d64:	2a00      	cmp	r2, #0
 8007d66:	d0f9      	beq.n	8007d5c <_strtol_l.constprop.0+0xd4>
 8007d68:	f1bc 0f00 	cmp.w	ip, #0
 8007d6c:	d000      	beq.n	8007d70 <_strtol_l.constprop.0+0xe8>
 8007d6e:	1e69      	subs	r1, r5, #1
 8007d70:	6011      	str	r1, [r2, #0]
 8007d72:	e7f3      	b.n	8007d5c <_strtol_l.constprop.0+0xd4>
 8007d74:	2430      	movs	r4, #48	; 0x30
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d1b1      	bne.n	8007cde <_strtol_l.constprop.0+0x56>
 8007d7a:	2308      	movs	r3, #8
 8007d7c:	e7af      	b.n	8007cde <_strtol_l.constprop.0+0x56>
 8007d7e:	2c30      	cmp	r4, #48	; 0x30
 8007d80:	d0a5      	beq.n	8007cce <_strtol_l.constprop.0+0x46>
 8007d82:	230a      	movs	r3, #10
 8007d84:	e7ab      	b.n	8007cde <_strtol_l.constprop.0+0x56>
 8007d86:	bf00      	nop
 8007d88:	08009581 	.word	0x08009581

08007d8c <strtol>:
 8007d8c:	4613      	mov	r3, r2
 8007d8e:	460a      	mov	r2, r1
 8007d90:	4601      	mov	r1, r0
 8007d92:	4802      	ldr	r0, [pc, #8]	; (8007d9c <strtol+0x10>)
 8007d94:	6800      	ldr	r0, [r0, #0]
 8007d96:	f7ff bf77 	b.w	8007c88 <_strtol_l.constprop.0>
 8007d9a:	bf00      	nop
 8007d9c:	2000000c 	.word	0x2000000c

08007da0 <__assert_func>:
 8007da0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007da2:	4614      	mov	r4, r2
 8007da4:	461a      	mov	r2, r3
 8007da6:	4b09      	ldr	r3, [pc, #36]	; (8007dcc <__assert_func+0x2c>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4605      	mov	r5, r0
 8007dac:	68d8      	ldr	r0, [r3, #12]
 8007dae:	b14c      	cbz	r4, 8007dc4 <__assert_func+0x24>
 8007db0:	4b07      	ldr	r3, [pc, #28]	; (8007dd0 <__assert_func+0x30>)
 8007db2:	9100      	str	r1, [sp, #0]
 8007db4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007db8:	4906      	ldr	r1, [pc, #24]	; (8007dd4 <__assert_func+0x34>)
 8007dba:	462b      	mov	r3, r5
 8007dbc:	f000 f80e 	bl	8007ddc <fiprintf>
 8007dc0:	f000 fe20 	bl	8008a04 <abort>
 8007dc4:	4b04      	ldr	r3, [pc, #16]	; (8007dd8 <__assert_func+0x38>)
 8007dc6:	461c      	mov	r4, r3
 8007dc8:	e7f3      	b.n	8007db2 <__assert_func+0x12>
 8007dca:	bf00      	nop
 8007dcc:	2000000c 	.word	0x2000000c
 8007dd0:	08009544 	.word	0x08009544
 8007dd4:	08009551 	.word	0x08009551
 8007dd8:	0800957f 	.word	0x0800957f

08007ddc <fiprintf>:
 8007ddc:	b40e      	push	{r1, r2, r3}
 8007dde:	b503      	push	{r0, r1, lr}
 8007de0:	4601      	mov	r1, r0
 8007de2:	ab03      	add	r3, sp, #12
 8007de4:	4805      	ldr	r0, [pc, #20]	; (8007dfc <fiprintf+0x20>)
 8007de6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dea:	6800      	ldr	r0, [r0, #0]
 8007dec:	9301      	str	r3, [sp, #4]
 8007dee:	f000 fa75 	bl	80082dc <_vfiprintf_r>
 8007df2:	b002      	add	sp, #8
 8007df4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007df8:	b003      	add	sp, #12
 8007dfa:	4770      	bx	lr
 8007dfc:	2000000c 	.word	0x2000000c

08007e00 <malloc>:
 8007e00:	4b02      	ldr	r3, [pc, #8]	; (8007e0c <malloc+0xc>)
 8007e02:	4601      	mov	r1, r0
 8007e04:	6818      	ldr	r0, [r3, #0]
 8007e06:	f000 b86f 	b.w	8007ee8 <_malloc_r>
 8007e0a:	bf00      	nop
 8007e0c:	2000000c 	.word	0x2000000c

08007e10 <_free_r>:
 8007e10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e12:	2900      	cmp	r1, #0
 8007e14:	d044      	beq.n	8007ea0 <_free_r+0x90>
 8007e16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e1a:	9001      	str	r0, [sp, #4]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	f1a1 0404 	sub.w	r4, r1, #4
 8007e22:	bfb8      	it	lt
 8007e24:	18e4      	addlt	r4, r4, r3
 8007e26:	f001 f83d 	bl	8008ea4 <__malloc_lock>
 8007e2a:	4a1e      	ldr	r2, [pc, #120]	; (8007ea4 <_free_r+0x94>)
 8007e2c:	9801      	ldr	r0, [sp, #4]
 8007e2e:	6813      	ldr	r3, [r2, #0]
 8007e30:	b933      	cbnz	r3, 8007e40 <_free_r+0x30>
 8007e32:	6063      	str	r3, [r4, #4]
 8007e34:	6014      	str	r4, [r2, #0]
 8007e36:	b003      	add	sp, #12
 8007e38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e3c:	f001 b838 	b.w	8008eb0 <__malloc_unlock>
 8007e40:	42a3      	cmp	r3, r4
 8007e42:	d908      	bls.n	8007e56 <_free_r+0x46>
 8007e44:	6825      	ldr	r5, [r4, #0]
 8007e46:	1961      	adds	r1, r4, r5
 8007e48:	428b      	cmp	r3, r1
 8007e4a:	bf01      	itttt	eq
 8007e4c:	6819      	ldreq	r1, [r3, #0]
 8007e4e:	685b      	ldreq	r3, [r3, #4]
 8007e50:	1949      	addeq	r1, r1, r5
 8007e52:	6021      	streq	r1, [r4, #0]
 8007e54:	e7ed      	b.n	8007e32 <_free_r+0x22>
 8007e56:	461a      	mov	r2, r3
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	b10b      	cbz	r3, 8007e60 <_free_r+0x50>
 8007e5c:	42a3      	cmp	r3, r4
 8007e5e:	d9fa      	bls.n	8007e56 <_free_r+0x46>
 8007e60:	6811      	ldr	r1, [r2, #0]
 8007e62:	1855      	adds	r5, r2, r1
 8007e64:	42a5      	cmp	r5, r4
 8007e66:	d10b      	bne.n	8007e80 <_free_r+0x70>
 8007e68:	6824      	ldr	r4, [r4, #0]
 8007e6a:	4421      	add	r1, r4
 8007e6c:	1854      	adds	r4, r2, r1
 8007e6e:	42a3      	cmp	r3, r4
 8007e70:	6011      	str	r1, [r2, #0]
 8007e72:	d1e0      	bne.n	8007e36 <_free_r+0x26>
 8007e74:	681c      	ldr	r4, [r3, #0]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	6053      	str	r3, [r2, #4]
 8007e7a:	4421      	add	r1, r4
 8007e7c:	6011      	str	r1, [r2, #0]
 8007e7e:	e7da      	b.n	8007e36 <_free_r+0x26>
 8007e80:	d902      	bls.n	8007e88 <_free_r+0x78>
 8007e82:	230c      	movs	r3, #12
 8007e84:	6003      	str	r3, [r0, #0]
 8007e86:	e7d6      	b.n	8007e36 <_free_r+0x26>
 8007e88:	6825      	ldr	r5, [r4, #0]
 8007e8a:	1961      	adds	r1, r4, r5
 8007e8c:	428b      	cmp	r3, r1
 8007e8e:	bf04      	itt	eq
 8007e90:	6819      	ldreq	r1, [r3, #0]
 8007e92:	685b      	ldreq	r3, [r3, #4]
 8007e94:	6063      	str	r3, [r4, #4]
 8007e96:	bf04      	itt	eq
 8007e98:	1949      	addeq	r1, r1, r5
 8007e9a:	6021      	streq	r1, [r4, #0]
 8007e9c:	6054      	str	r4, [r2, #4]
 8007e9e:	e7ca      	b.n	8007e36 <_free_r+0x26>
 8007ea0:	b003      	add	sp, #12
 8007ea2:	bd30      	pop	{r4, r5, pc}
 8007ea4:	200002e0 	.word	0x200002e0

08007ea8 <sbrk_aligned>:
 8007ea8:	b570      	push	{r4, r5, r6, lr}
 8007eaa:	4e0e      	ldr	r6, [pc, #56]	; (8007ee4 <sbrk_aligned+0x3c>)
 8007eac:	460c      	mov	r4, r1
 8007eae:	6831      	ldr	r1, [r6, #0]
 8007eb0:	4605      	mov	r5, r0
 8007eb2:	b911      	cbnz	r1, 8007eba <sbrk_aligned+0x12>
 8007eb4:	f000 fcd6 	bl	8008864 <_sbrk_r>
 8007eb8:	6030      	str	r0, [r6, #0]
 8007eba:	4621      	mov	r1, r4
 8007ebc:	4628      	mov	r0, r5
 8007ebe:	f000 fcd1 	bl	8008864 <_sbrk_r>
 8007ec2:	1c43      	adds	r3, r0, #1
 8007ec4:	d00a      	beq.n	8007edc <sbrk_aligned+0x34>
 8007ec6:	1cc4      	adds	r4, r0, #3
 8007ec8:	f024 0403 	bic.w	r4, r4, #3
 8007ecc:	42a0      	cmp	r0, r4
 8007ece:	d007      	beq.n	8007ee0 <sbrk_aligned+0x38>
 8007ed0:	1a21      	subs	r1, r4, r0
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	f000 fcc6 	bl	8008864 <_sbrk_r>
 8007ed8:	3001      	adds	r0, #1
 8007eda:	d101      	bne.n	8007ee0 <sbrk_aligned+0x38>
 8007edc:	f04f 34ff 	mov.w	r4, #4294967295
 8007ee0:	4620      	mov	r0, r4
 8007ee2:	bd70      	pop	{r4, r5, r6, pc}
 8007ee4:	200002e4 	.word	0x200002e4

08007ee8 <_malloc_r>:
 8007ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eec:	1ccd      	adds	r5, r1, #3
 8007eee:	f025 0503 	bic.w	r5, r5, #3
 8007ef2:	3508      	adds	r5, #8
 8007ef4:	2d0c      	cmp	r5, #12
 8007ef6:	bf38      	it	cc
 8007ef8:	250c      	movcc	r5, #12
 8007efa:	2d00      	cmp	r5, #0
 8007efc:	4607      	mov	r7, r0
 8007efe:	db01      	blt.n	8007f04 <_malloc_r+0x1c>
 8007f00:	42a9      	cmp	r1, r5
 8007f02:	d905      	bls.n	8007f10 <_malloc_r+0x28>
 8007f04:	230c      	movs	r3, #12
 8007f06:	603b      	str	r3, [r7, #0]
 8007f08:	2600      	movs	r6, #0
 8007f0a:	4630      	mov	r0, r6
 8007f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f10:	4e2e      	ldr	r6, [pc, #184]	; (8007fcc <_malloc_r+0xe4>)
 8007f12:	f000 ffc7 	bl	8008ea4 <__malloc_lock>
 8007f16:	6833      	ldr	r3, [r6, #0]
 8007f18:	461c      	mov	r4, r3
 8007f1a:	bb34      	cbnz	r4, 8007f6a <_malloc_r+0x82>
 8007f1c:	4629      	mov	r1, r5
 8007f1e:	4638      	mov	r0, r7
 8007f20:	f7ff ffc2 	bl	8007ea8 <sbrk_aligned>
 8007f24:	1c43      	adds	r3, r0, #1
 8007f26:	4604      	mov	r4, r0
 8007f28:	d14d      	bne.n	8007fc6 <_malloc_r+0xde>
 8007f2a:	6834      	ldr	r4, [r6, #0]
 8007f2c:	4626      	mov	r6, r4
 8007f2e:	2e00      	cmp	r6, #0
 8007f30:	d140      	bne.n	8007fb4 <_malloc_r+0xcc>
 8007f32:	6823      	ldr	r3, [r4, #0]
 8007f34:	4631      	mov	r1, r6
 8007f36:	4638      	mov	r0, r7
 8007f38:	eb04 0803 	add.w	r8, r4, r3
 8007f3c:	f000 fc92 	bl	8008864 <_sbrk_r>
 8007f40:	4580      	cmp	r8, r0
 8007f42:	d13a      	bne.n	8007fba <_malloc_r+0xd2>
 8007f44:	6821      	ldr	r1, [r4, #0]
 8007f46:	3503      	adds	r5, #3
 8007f48:	1a6d      	subs	r5, r5, r1
 8007f4a:	f025 0503 	bic.w	r5, r5, #3
 8007f4e:	3508      	adds	r5, #8
 8007f50:	2d0c      	cmp	r5, #12
 8007f52:	bf38      	it	cc
 8007f54:	250c      	movcc	r5, #12
 8007f56:	4629      	mov	r1, r5
 8007f58:	4638      	mov	r0, r7
 8007f5a:	f7ff ffa5 	bl	8007ea8 <sbrk_aligned>
 8007f5e:	3001      	adds	r0, #1
 8007f60:	d02b      	beq.n	8007fba <_malloc_r+0xd2>
 8007f62:	6823      	ldr	r3, [r4, #0]
 8007f64:	442b      	add	r3, r5
 8007f66:	6023      	str	r3, [r4, #0]
 8007f68:	e00e      	b.n	8007f88 <_malloc_r+0xa0>
 8007f6a:	6822      	ldr	r2, [r4, #0]
 8007f6c:	1b52      	subs	r2, r2, r5
 8007f6e:	d41e      	bmi.n	8007fae <_malloc_r+0xc6>
 8007f70:	2a0b      	cmp	r2, #11
 8007f72:	d916      	bls.n	8007fa2 <_malloc_r+0xba>
 8007f74:	1961      	adds	r1, r4, r5
 8007f76:	42a3      	cmp	r3, r4
 8007f78:	6025      	str	r5, [r4, #0]
 8007f7a:	bf18      	it	ne
 8007f7c:	6059      	strne	r1, [r3, #4]
 8007f7e:	6863      	ldr	r3, [r4, #4]
 8007f80:	bf08      	it	eq
 8007f82:	6031      	streq	r1, [r6, #0]
 8007f84:	5162      	str	r2, [r4, r5]
 8007f86:	604b      	str	r3, [r1, #4]
 8007f88:	4638      	mov	r0, r7
 8007f8a:	f104 060b 	add.w	r6, r4, #11
 8007f8e:	f000 ff8f 	bl	8008eb0 <__malloc_unlock>
 8007f92:	f026 0607 	bic.w	r6, r6, #7
 8007f96:	1d23      	adds	r3, r4, #4
 8007f98:	1af2      	subs	r2, r6, r3
 8007f9a:	d0b6      	beq.n	8007f0a <_malloc_r+0x22>
 8007f9c:	1b9b      	subs	r3, r3, r6
 8007f9e:	50a3      	str	r3, [r4, r2]
 8007fa0:	e7b3      	b.n	8007f0a <_malloc_r+0x22>
 8007fa2:	6862      	ldr	r2, [r4, #4]
 8007fa4:	42a3      	cmp	r3, r4
 8007fa6:	bf0c      	ite	eq
 8007fa8:	6032      	streq	r2, [r6, #0]
 8007faa:	605a      	strne	r2, [r3, #4]
 8007fac:	e7ec      	b.n	8007f88 <_malloc_r+0xa0>
 8007fae:	4623      	mov	r3, r4
 8007fb0:	6864      	ldr	r4, [r4, #4]
 8007fb2:	e7b2      	b.n	8007f1a <_malloc_r+0x32>
 8007fb4:	4634      	mov	r4, r6
 8007fb6:	6876      	ldr	r6, [r6, #4]
 8007fb8:	e7b9      	b.n	8007f2e <_malloc_r+0x46>
 8007fba:	230c      	movs	r3, #12
 8007fbc:	603b      	str	r3, [r7, #0]
 8007fbe:	4638      	mov	r0, r7
 8007fc0:	f000 ff76 	bl	8008eb0 <__malloc_unlock>
 8007fc4:	e7a1      	b.n	8007f0a <_malloc_r+0x22>
 8007fc6:	6025      	str	r5, [r4, #0]
 8007fc8:	e7de      	b.n	8007f88 <_malloc_r+0xa0>
 8007fca:	bf00      	nop
 8007fcc:	200002e0 	.word	0x200002e0

08007fd0 <__ssputs_r>:
 8007fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fd4:	688e      	ldr	r6, [r1, #8]
 8007fd6:	429e      	cmp	r6, r3
 8007fd8:	4682      	mov	sl, r0
 8007fda:	460c      	mov	r4, r1
 8007fdc:	4690      	mov	r8, r2
 8007fde:	461f      	mov	r7, r3
 8007fe0:	d838      	bhi.n	8008054 <__ssputs_r+0x84>
 8007fe2:	898a      	ldrh	r2, [r1, #12]
 8007fe4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007fe8:	d032      	beq.n	8008050 <__ssputs_r+0x80>
 8007fea:	6825      	ldr	r5, [r4, #0]
 8007fec:	6909      	ldr	r1, [r1, #16]
 8007fee:	eba5 0901 	sub.w	r9, r5, r1
 8007ff2:	6965      	ldr	r5, [r4, #20]
 8007ff4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ff8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	444b      	add	r3, r9
 8008000:	106d      	asrs	r5, r5, #1
 8008002:	429d      	cmp	r5, r3
 8008004:	bf38      	it	cc
 8008006:	461d      	movcc	r5, r3
 8008008:	0553      	lsls	r3, r2, #21
 800800a:	d531      	bpl.n	8008070 <__ssputs_r+0xa0>
 800800c:	4629      	mov	r1, r5
 800800e:	f7ff ff6b 	bl	8007ee8 <_malloc_r>
 8008012:	4606      	mov	r6, r0
 8008014:	b950      	cbnz	r0, 800802c <__ssputs_r+0x5c>
 8008016:	230c      	movs	r3, #12
 8008018:	f8ca 3000 	str.w	r3, [sl]
 800801c:	89a3      	ldrh	r3, [r4, #12]
 800801e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008022:	81a3      	strh	r3, [r4, #12]
 8008024:	f04f 30ff 	mov.w	r0, #4294967295
 8008028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800802c:	6921      	ldr	r1, [r4, #16]
 800802e:	464a      	mov	r2, r9
 8008030:	f000 ff10 	bl	8008e54 <memcpy>
 8008034:	89a3      	ldrh	r3, [r4, #12]
 8008036:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800803a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800803e:	81a3      	strh	r3, [r4, #12]
 8008040:	6126      	str	r6, [r4, #16]
 8008042:	6165      	str	r5, [r4, #20]
 8008044:	444e      	add	r6, r9
 8008046:	eba5 0509 	sub.w	r5, r5, r9
 800804a:	6026      	str	r6, [r4, #0]
 800804c:	60a5      	str	r5, [r4, #8]
 800804e:	463e      	mov	r6, r7
 8008050:	42be      	cmp	r6, r7
 8008052:	d900      	bls.n	8008056 <__ssputs_r+0x86>
 8008054:	463e      	mov	r6, r7
 8008056:	6820      	ldr	r0, [r4, #0]
 8008058:	4632      	mov	r2, r6
 800805a:	4641      	mov	r1, r8
 800805c:	f000 ff08 	bl	8008e70 <memmove>
 8008060:	68a3      	ldr	r3, [r4, #8]
 8008062:	1b9b      	subs	r3, r3, r6
 8008064:	60a3      	str	r3, [r4, #8]
 8008066:	6823      	ldr	r3, [r4, #0]
 8008068:	4433      	add	r3, r6
 800806a:	6023      	str	r3, [r4, #0]
 800806c:	2000      	movs	r0, #0
 800806e:	e7db      	b.n	8008028 <__ssputs_r+0x58>
 8008070:	462a      	mov	r2, r5
 8008072:	f000 ff23 	bl	8008ebc <_realloc_r>
 8008076:	4606      	mov	r6, r0
 8008078:	2800      	cmp	r0, #0
 800807a:	d1e1      	bne.n	8008040 <__ssputs_r+0x70>
 800807c:	6921      	ldr	r1, [r4, #16]
 800807e:	4650      	mov	r0, sl
 8008080:	f7ff fec6 	bl	8007e10 <_free_r>
 8008084:	e7c7      	b.n	8008016 <__ssputs_r+0x46>
	...

08008088 <_svfiprintf_r>:
 8008088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800808c:	4698      	mov	r8, r3
 800808e:	898b      	ldrh	r3, [r1, #12]
 8008090:	061b      	lsls	r3, r3, #24
 8008092:	b09d      	sub	sp, #116	; 0x74
 8008094:	4607      	mov	r7, r0
 8008096:	460d      	mov	r5, r1
 8008098:	4614      	mov	r4, r2
 800809a:	d50e      	bpl.n	80080ba <_svfiprintf_r+0x32>
 800809c:	690b      	ldr	r3, [r1, #16]
 800809e:	b963      	cbnz	r3, 80080ba <_svfiprintf_r+0x32>
 80080a0:	2140      	movs	r1, #64	; 0x40
 80080a2:	f7ff ff21 	bl	8007ee8 <_malloc_r>
 80080a6:	6028      	str	r0, [r5, #0]
 80080a8:	6128      	str	r0, [r5, #16]
 80080aa:	b920      	cbnz	r0, 80080b6 <_svfiprintf_r+0x2e>
 80080ac:	230c      	movs	r3, #12
 80080ae:	603b      	str	r3, [r7, #0]
 80080b0:	f04f 30ff 	mov.w	r0, #4294967295
 80080b4:	e0d1      	b.n	800825a <_svfiprintf_r+0x1d2>
 80080b6:	2340      	movs	r3, #64	; 0x40
 80080b8:	616b      	str	r3, [r5, #20]
 80080ba:	2300      	movs	r3, #0
 80080bc:	9309      	str	r3, [sp, #36]	; 0x24
 80080be:	2320      	movs	r3, #32
 80080c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80080c8:	2330      	movs	r3, #48	; 0x30
 80080ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008274 <_svfiprintf_r+0x1ec>
 80080ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080d2:	f04f 0901 	mov.w	r9, #1
 80080d6:	4623      	mov	r3, r4
 80080d8:	469a      	mov	sl, r3
 80080da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080de:	b10a      	cbz	r2, 80080e4 <_svfiprintf_r+0x5c>
 80080e0:	2a25      	cmp	r2, #37	; 0x25
 80080e2:	d1f9      	bne.n	80080d8 <_svfiprintf_r+0x50>
 80080e4:	ebba 0b04 	subs.w	fp, sl, r4
 80080e8:	d00b      	beq.n	8008102 <_svfiprintf_r+0x7a>
 80080ea:	465b      	mov	r3, fp
 80080ec:	4622      	mov	r2, r4
 80080ee:	4629      	mov	r1, r5
 80080f0:	4638      	mov	r0, r7
 80080f2:	f7ff ff6d 	bl	8007fd0 <__ssputs_r>
 80080f6:	3001      	adds	r0, #1
 80080f8:	f000 80aa 	beq.w	8008250 <_svfiprintf_r+0x1c8>
 80080fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080fe:	445a      	add	r2, fp
 8008100:	9209      	str	r2, [sp, #36]	; 0x24
 8008102:	f89a 3000 	ldrb.w	r3, [sl]
 8008106:	2b00      	cmp	r3, #0
 8008108:	f000 80a2 	beq.w	8008250 <_svfiprintf_r+0x1c8>
 800810c:	2300      	movs	r3, #0
 800810e:	f04f 32ff 	mov.w	r2, #4294967295
 8008112:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008116:	f10a 0a01 	add.w	sl, sl, #1
 800811a:	9304      	str	r3, [sp, #16]
 800811c:	9307      	str	r3, [sp, #28]
 800811e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008122:	931a      	str	r3, [sp, #104]	; 0x68
 8008124:	4654      	mov	r4, sl
 8008126:	2205      	movs	r2, #5
 8008128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800812c:	4851      	ldr	r0, [pc, #324]	; (8008274 <_svfiprintf_r+0x1ec>)
 800812e:	f7f8 f887 	bl	8000240 <memchr>
 8008132:	9a04      	ldr	r2, [sp, #16]
 8008134:	b9d8      	cbnz	r0, 800816e <_svfiprintf_r+0xe6>
 8008136:	06d0      	lsls	r0, r2, #27
 8008138:	bf44      	itt	mi
 800813a:	2320      	movmi	r3, #32
 800813c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008140:	0711      	lsls	r1, r2, #28
 8008142:	bf44      	itt	mi
 8008144:	232b      	movmi	r3, #43	; 0x2b
 8008146:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800814a:	f89a 3000 	ldrb.w	r3, [sl]
 800814e:	2b2a      	cmp	r3, #42	; 0x2a
 8008150:	d015      	beq.n	800817e <_svfiprintf_r+0xf6>
 8008152:	9a07      	ldr	r2, [sp, #28]
 8008154:	4654      	mov	r4, sl
 8008156:	2000      	movs	r0, #0
 8008158:	f04f 0c0a 	mov.w	ip, #10
 800815c:	4621      	mov	r1, r4
 800815e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008162:	3b30      	subs	r3, #48	; 0x30
 8008164:	2b09      	cmp	r3, #9
 8008166:	d94e      	bls.n	8008206 <_svfiprintf_r+0x17e>
 8008168:	b1b0      	cbz	r0, 8008198 <_svfiprintf_r+0x110>
 800816a:	9207      	str	r2, [sp, #28]
 800816c:	e014      	b.n	8008198 <_svfiprintf_r+0x110>
 800816e:	eba0 0308 	sub.w	r3, r0, r8
 8008172:	fa09 f303 	lsl.w	r3, r9, r3
 8008176:	4313      	orrs	r3, r2
 8008178:	9304      	str	r3, [sp, #16]
 800817a:	46a2      	mov	sl, r4
 800817c:	e7d2      	b.n	8008124 <_svfiprintf_r+0x9c>
 800817e:	9b03      	ldr	r3, [sp, #12]
 8008180:	1d19      	adds	r1, r3, #4
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	9103      	str	r1, [sp, #12]
 8008186:	2b00      	cmp	r3, #0
 8008188:	bfbb      	ittet	lt
 800818a:	425b      	neglt	r3, r3
 800818c:	f042 0202 	orrlt.w	r2, r2, #2
 8008190:	9307      	strge	r3, [sp, #28]
 8008192:	9307      	strlt	r3, [sp, #28]
 8008194:	bfb8      	it	lt
 8008196:	9204      	strlt	r2, [sp, #16]
 8008198:	7823      	ldrb	r3, [r4, #0]
 800819a:	2b2e      	cmp	r3, #46	; 0x2e
 800819c:	d10c      	bne.n	80081b8 <_svfiprintf_r+0x130>
 800819e:	7863      	ldrb	r3, [r4, #1]
 80081a0:	2b2a      	cmp	r3, #42	; 0x2a
 80081a2:	d135      	bne.n	8008210 <_svfiprintf_r+0x188>
 80081a4:	9b03      	ldr	r3, [sp, #12]
 80081a6:	1d1a      	adds	r2, r3, #4
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	9203      	str	r2, [sp, #12]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	bfb8      	it	lt
 80081b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80081b4:	3402      	adds	r4, #2
 80081b6:	9305      	str	r3, [sp, #20]
 80081b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008284 <_svfiprintf_r+0x1fc>
 80081bc:	7821      	ldrb	r1, [r4, #0]
 80081be:	2203      	movs	r2, #3
 80081c0:	4650      	mov	r0, sl
 80081c2:	f7f8 f83d 	bl	8000240 <memchr>
 80081c6:	b140      	cbz	r0, 80081da <_svfiprintf_r+0x152>
 80081c8:	2340      	movs	r3, #64	; 0x40
 80081ca:	eba0 000a 	sub.w	r0, r0, sl
 80081ce:	fa03 f000 	lsl.w	r0, r3, r0
 80081d2:	9b04      	ldr	r3, [sp, #16]
 80081d4:	4303      	orrs	r3, r0
 80081d6:	3401      	adds	r4, #1
 80081d8:	9304      	str	r3, [sp, #16]
 80081da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081de:	4826      	ldr	r0, [pc, #152]	; (8008278 <_svfiprintf_r+0x1f0>)
 80081e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081e4:	2206      	movs	r2, #6
 80081e6:	f7f8 f82b 	bl	8000240 <memchr>
 80081ea:	2800      	cmp	r0, #0
 80081ec:	d038      	beq.n	8008260 <_svfiprintf_r+0x1d8>
 80081ee:	4b23      	ldr	r3, [pc, #140]	; (800827c <_svfiprintf_r+0x1f4>)
 80081f0:	bb1b      	cbnz	r3, 800823a <_svfiprintf_r+0x1b2>
 80081f2:	9b03      	ldr	r3, [sp, #12]
 80081f4:	3307      	adds	r3, #7
 80081f6:	f023 0307 	bic.w	r3, r3, #7
 80081fa:	3308      	adds	r3, #8
 80081fc:	9303      	str	r3, [sp, #12]
 80081fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008200:	4433      	add	r3, r6
 8008202:	9309      	str	r3, [sp, #36]	; 0x24
 8008204:	e767      	b.n	80080d6 <_svfiprintf_r+0x4e>
 8008206:	fb0c 3202 	mla	r2, ip, r2, r3
 800820a:	460c      	mov	r4, r1
 800820c:	2001      	movs	r0, #1
 800820e:	e7a5      	b.n	800815c <_svfiprintf_r+0xd4>
 8008210:	2300      	movs	r3, #0
 8008212:	3401      	adds	r4, #1
 8008214:	9305      	str	r3, [sp, #20]
 8008216:	4619      	mov	r1, r3
 8008218:	f04f 0c0a 	mov.w	ip, #10
 800821c:	4620      	mov	r0, r4
 800821e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008222:	3a30      	subs	r2, #48	; 0x30
 8008224:	2a09      	cmp	r2, #9
 8008226:	d903      	bls.n	8008230 <_svfiprintf_r+0x1a8>
 8008228:	2b00      	cmp	r3, #0
 800822a:	d0c5      	beq.n	80081b8 <_svfiprintf_r+0x130>
 800822c:	9105      	str	r1, [sp, #20]
 800822e:	e7c3      	b.n	80081b8 <_svfiprintf_r+0x130>
 8008230:	fb0c 2101 	mla	r1, ip, r1, r2
 8008234:	4604      	mov	r4, r0
 8008236:	2301      	movs	r3, #1
 8008238:	e7f0      	b.n	800821c <_svfiprintf_r+0x194>
 800823a:	ab03      	add	r3, sp, #12
 800823c:	9300      	str	r3, [sp, #0]
 800823e:	462a      	mov	r2, r5
 8008240:	4b0f      	ldr	r3, [pc, #60]	; (8008280 <_svfiprintf_r+0x1f8>)
 8008242:	a904      	add	r1, sp, #16
 8008244:	4638      	mov	r0, r7
 8008246:	f3af 8000 	nop.w
 800824a:	1c42      	adds	r2, r0, #1
 800824c:	4606      	mov	r6, r0
 800824e:	d1d6      	bne.n	80081fe <_svfiprintf_r+0x176>
 8008250:	89ab      	ldrh	r3, [r5, #12]
 8008252:	065b      	lsls	r3, r3, #25
 8008254:	f53f af2c 	bmi.w	80080b0 <_svfiprintf_r+0x28>
 8008258:	9809      	ldr	r0, [sp, #36]	; 0x24
 800825a:	b01d      	add	sp, #116	; 0x74
 800825c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008260:	ab03      	add	r3, sp, #12
 8008262:	9300      	str	r3, [sp, #0]
 8008264:	462a      	mov	r2, r5
 8008266:	4b06      	ldr	r3, [pc, #24]	; (8008280 <_svfiprintf_r+0x1f8>)
 8008268:	a904      	add	r1, sp, #16
 800826a:	4638      	mov	r0, r7
 800826c:	f000 f9d4 	bl	8008618 <_printf_i>
 8008270:	e7eb      	b.n	800824a <_svfiprintf_r+0x1c2>
 8008272:	bf00      	nop
 8008274:	08009681 	.word	0x08009681
 8008278:	0800968b 	.word	0x0800968b
 800827c:	00000000 	.word	0x00000000
 8008280:	08007fd1 	.word	0x08007fd1
 8008284:	08009687 	.word	0x08009687

08008288 <__sfputc_r>:
 8008288:	6893      	ldr	r3, [r2, #8]
 800828a:	3b01      	subs	r3, #1
 800828c:	2b00      	cmp	r3, #0
 800828e:	b410      	push	{r4}
 8008290:	6093      	str	r3, [r2, #8]
 8008292:	da08      	bge.n	80082a6 <__sfputc_r+0x1e>
 8008294:	6994      	ldr	r4, [r2, #24]
 8008296:	42a3      	cmp	r3, r4
 8008298:	db01      	blt.n	800829e <__sfputc_r+0x16>
 800829a:	290a      	cmp	r1, #10
 800829c:	d103      	bne.n	80082a6 <__sfputc_r+0x1e>
 800829e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082a2:	f000 baef 	b.w	8008884 <__swbuf_r>
 80082a6:	6813      	ldr	r3, [r2, #0]
 80082a8:	1c58      	adds	r0, r3, #1
 80082aa:	6010      	str	r0, [r2, #0]
 80082ac:	7019      	strb	r1, [r3, #0]
 80082ae:	4608      	mov	r0, r1
 80082b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082b4:	4770      	bx	lr

080082b6 <__sfputs_r>:
 80082b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082b8:	4606      	mov	r6, r0
 80082ba:	460f      	mov	r7, r1
 80082bc:	4614      	mov	r4, r2
 80082be:	18d5      	adds	r5, r2, r3
 80082c0:	42ac      	cmp	r4, r5
 80082c2:	d101      	bne.n	80082c8 <__sfputs_r+0x12>
 80082c4:	2000      	movs	r0, #0
 80082c6:	e007      	b.n	80082d8 <__sfputs_r+0x22>
 80082c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082cc:	463a      	mov	r2, r7
 80082ce:	4630      	mov	r0, r6
 80082d0:	f7ff ffda 	bl	8008288 <__sfputc_r>
 80082d4:	1c43      	adds	r3, r0, #1
 80082d6:	d1f3      	bne.n	80082c0 <__sfputs_r+0xa>
 80082d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080082dc <_vfiprintf_r>:
 80082dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082e0:	460d      	mov	r5, r1
 80082e2:	b09d      	sub	sp, #116	; 0x74
 80082e4:	4614      	mov	r4, r2
 80082e6:	4698      	mov	r8, r3
 80082e8:	4606      	mov	r6, r0
 80082ea:	b118      	cbz	r0, 80082f4 <_vfiprintf_r+0x18>
 80082ec:	6983      	ldr	r3, [r0, #24]
 80082ee:	b90b      	cbnz	r3, 80082f4 <_vfiprintf_r+0x18>
 80082f0:	f000 fcaa 	bl	8008c48 <__sinit>
 80082f4:	4b89      	ldr	r3, [pc, #548]	; (800851c <_vfiprintf_r+0x240>)
 80082f6:	429d      	cmp	r5, r3
 80082f8:	d11b      	bne.n	8008332 <_vfiprintf_r+0x56>
 80082fa:	6875      	ldr	r5, [r6, #4]
 80082fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082fe:	07d9      	lsls	r1, r3, #31
 8008300:	d405      	bmi.n	800830e <_vfiprintf_r+0x32>
 8008302:	89ab      	ldrh	r3, [r5, #12]
 8008304:	059a      	lsls	r2, r3, #22
 8008306:	d402      	bmi.n	800830e <_vfiprintf_r+0x32>
 8008308:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800830a:	f000 fd3b 	bl	8008d84 <__retarget_lock_acquire_recursive>
 800830e:	89ab      	ldrh	r3, [r5, #12]
 8008310:	071b      	lsls	r3, r3, #28
 8008312:	d501      	bpl.n	8008318 <_vfiprintf_r+0x3c>
 8008314:	692b      	ldr	r3, [r5, #16]
 8008316:	b9eb      	cbnz	r3, 8008354 <_vfiprintf_r+0x78>
 8008318:	4629      	mov	r1, r5
 800831a:	4630      	mov	r0, r6
 800831c:	f000 fb04 	bl	8008928 <__swsetup_r>
 8008320:	b1c0      	cbz	r0, 8008354 <_vfiprintf_r+0x78>
 8008322:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008324:	07dc      	lsls	r4, r3, #31
 8008326:	d50e      	bpl.n	8008346 <_vfiprintf_r+0x6a>
 8008328:	f04f 30ff 	mov.w	r0, #4294967295
 800832c:	b01d      	add	sp, #116	; 0x74
 800832e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008332:	4b7b      	ldr	r3, [pc, #492]	; (8008520 <_vfiprintf_r+0x244>)
 8008334:	429d      	cmp	r5, r3
 8008336:	d101      	bne.n	800833c <_vfiprintf_r+0x60>
 8008338:	68b5      	ldr	r5, [r6, #8]
 800833a:	e7df      	b.n	80082fc <_vfiprintf_r+0x20>
 800833c:	4b79      	ldr	r3, [pc, #484]	; (8008524 <_vfiprintf_r+0x248>)
 800833e:	429d      	cmp	r5, r3
 8008340:	bf08      	it	eq
 8008342:	68f5      	ldreq	r5, [r6, #12]
 8008344:	e7da      	b.n	80082fc <_vfiprintf_r+0x20>
 8008346:	89ab      	ldrh	r3, [r5, #12]
 8008348:	0598      	lsls	r0, r3, #22
 800834a:	d4ed      	bmi.n	8008328 <_vfiprintf_r+0x4c>
 800834c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800834e:	f000 fd1a 	bl	8008d86 <__retarget_lock_release_recursive>
 8008352:	e7e9      	b.n	8008328 <_vfiprintf_r+0x4c>
 8008354:	2300      	movs	r3, #0
 8008356:	9309      	str	r3, [sp, #36]	; 0x24
 8008358:	2320      	movs	r3, #32
 800835a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800835e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008362:	2330      	movs	r3, #48	; 0x30
 8008364:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008528 <_vfiprintf_r+0x24c>
 8008368:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800836c:	f04f 0901 	mov.w	r9, #1
 8008370:	4623      	mov	r3, r4
 8008372:	469a      	mov	sl, r3
 8008374:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008378:	b10a      	cbz	r2, 800837e <_vfiprintf_r+0xa2>
 800837a:	2a25      	cmp	r2, #37	; 0x25
 800837c:	d1f9      	bne.n	8008372 <_vfiprintf_r+0x96>
 800837e:	ebba 0b04 	subs.w	fp, sl, r4
 8008382:	d00b      	beq.n	800839c <_vfiprintf_r+0xc0>
 8008384:	465b      	mov	r3, fp
 8008386:	4622      	mov	r2, r4
 8008388:	4629      	mov	r1, r5
 800838a:	4630      	mov	r0, r6
 800838c:	f7ff ff93 	bl	80082b6 <__sfputs_r>
 8008390:	3001      	adds	r0, #1
 8008392:	f000 80aa 	beq.w	80084ea <_vfiprintf_r+0x20e>
 8008396:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008398:	445a      	add	r2, fp
 800839a:	9209      	str	r2, [sp, #36]	; 0x24
 800839c:	f89a 3000 	ldrb.w	r3, [sl]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	f000 80a2 	beq.w	80084ea <_vfiprintf_r+0x20e>
 80083a6:	2300      	movs	r3, #0
 80083a8:	f04f 32ff 	mov.w	r2, #4294967295
 80083ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083b0:	f10a 0a01 	add.w	sl, sl, #1
 80083b4:	9304      	str	r3, [sp, #16]
 80083b6:	9307      	str	r3, [sp, #28]
 80083b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083bc:	931a      	str	r3, [sp, #104]	; 0x68
 80083be:	4654      	mov	r4, sl
 80083c0:	2205      	movs	r2, #5
 80083c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083c6:	4858      	ldr	r0, [pc, #352]	; (8008528 <_vfiprintf_r+0x24c>)
 80083c8:	f7f7 ff3a 	bl	8000240 <memchr>
 80083cc:	9a04      	ldr	r2, [sp, #16]
 80083ce:	b9d8      	cbnz	r0, 8008408 <_vfiprintf_r+0x12c>
 80083d0:	06d1      	lsls	r1, r2, #27
 80083d2:	bf44      	itt	mi
 80083d4:	2320      	movmi	r3, #32
 80083d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083da:	0713      	lsls	r3, r2, #28
 80083dc:	bf44      	itt	mi
 80083de:	232b      	movmi	r3, #43	; 0x2b
 80083e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083e4:	f89a 3000 	ldrb.w	r3, [sl]
 80083e8:	2b2a      	cmp	r3, #42	; 0x2a
 80083ea:	d015      	beq.n	8008418 <_vfiprintf_r+0x13c>
 80083ec:	9a07      	ldr	r2, [sp, #28]
 80083ee:	4654      	mov	r4, sl
 80083f0:	2000      	movs	r0, #0
 80083f2:	f04f 0c0a 	mov.w	ip, #10
 80083f6:	4621      	mov	r1, r4
 80083f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083fc:	3b30      	subs	r3, #48	; 0x30
 80083fe:	2b09      	cmp	r3, #9
 8008400:	d94e      	bls.n	80084a0 <_vfiprintf_r+0x1c4>
 8008402:	b1b0      	cbz	r0, 8008432 <_vfiprintf_r+0x156>
 8008404:	9207      	str	r2, [sp, #28]
 8008406:	e014      	b.n	8008432 <_vfiprintf_r+0x156>
 8008408:	eba0 0308 	sub.w	r3, r0, r8
 800840c:	fa09 f303 	lsl.w	r3, r9, r3
 8008410:	4313      	orrs	r3, r2
 8008412:	9304      	str	r3, [sp, #16]
 8008414:	46a2      	mov	sl, r4
 8008416:	e7d2      	b.n	80083be <_vfiprintf_r+0xe2>
 8008418:	9b03      	ldr	r3, [sp, #12]
 800841a:	1d19      	adds	r1, r3, #4
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	9103      	str	r1, [sp, #12]
 8008420:	2b00      	cmp	r3, #0
 8008422:	bfbb      	ittet	lt
 8008424:	425b      	neglt	r3, r3
 8008426:	f042 0202 	orrlt.w	r2, r2, #2
 800842a:	9307      	strge	r3, [sp, #28]
 800842c:	9307      	strlt	r3, [sp, #28]
 800842e:	bfb8      	it	lt
 8008430:	9204      	strlt	r2, [sp, #16]
 8008432:	7823      	ldrb	r3, [r4, #0]
 8008434:	2b2e      	cmp	r3, #46	; 0x2e
 8008436:	d10c      	bne.n	8008452 <_vfiprintf_r+0x176>
 8008438:	7863      	ldrb	r3, [r4, #1]
 800843a:	2b2a      	cmp	r3, #42	; 0x2a
 800843c:	d135      	bne.n	80084aa <_vfiprintf_r+0x1ce>
 800843e:	9b03      	ldr	r3, [sp, #12]
 8008440:	1d1a      	adds	r2, r3, #4
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	9203      	str	r2, [sp, #12]
 8008446:	2b00      	cmp	r3, #0
 8008448:	bfb8      	it	lt
 800844a:	f04f 33ff 	movlt.w	r3, #4294967295
 800844e:	3402      	adds	r4, #2
 8008450:	9305      	str	r3, [sp, #20]
 8008452:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008538 <_vfiprintf_r+0x25c>
 8008456:	7821      	ldrb	r1, [r4, #0]
 8008458:	2203      	movs	r2, #3
 800845a:	4650      	mov	r0, sl
 800845c:	f7f7 fef0 	bl	8000240 <memchr>
 8008460:	b140      	cbz	r0, 8008474 <_vfiprintf_r+0x198>
 8008462:	2340      	movs	r3, #64	; 0x40
 8008464:	eba0 000a 	sub.w	r0, r0, sl
 8008468:	fa03 f000 	lsl.w	r0, r3, r0
 800846c:	9b04      	ldr	r3, [sp, #16]
 800846e:	4303      	orrs	r3, r0
 8008470:	3401      	adds	r4, #1
 8008472:	9304      	str	r3, [sp, #16]
 8008474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008478:	482c      	ldr	r0, [pc, #176]	; (800852c <_vfiprintf_r+0x250>)
 800847a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800847e:	2206      	movs	r2, #6
 8008480:	f7f7 fede 	bl	8000240 <memchr>
 8008484:	2800      	cmp	r0, #0
 8008486:	d03f      	beq.n	8008508 <_vfiprintf_r+0x22c>
 8008488:	4b29      	ldr	r3, [pc, #164]	; (8008530 <_vfiprintf_r+0x254>)
 800848a:	bb1b      	cbnz	r3, 80084d4 <_vfiprintf_r+0x1f8>
 800848c:	9b03      	ldr	r3, [sp, #12]
 800848e:	3307      	adds	r3, #7
 8008490:	f023 0307 	bic.w	r3, r3, #7
 8008494:	3308      	adds	r3, #8
 8008496:	9303      	str	r3, [sp, #12]
 8008498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800849a:	443b      	add	r3, r7
 800849c:	9309      	str	r3, [sp, #36]	; 0x24
 800849e:	e767      	b.n	8008370 <_vfiprintf_r+0x94>
 80084a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80084a4:	460c      	mov	r4, r1
 80084a6:	2001      	movs	r0, #1
 80084a8:	e7a5      	b.n	80083f6 <_vfiprintf_r+0x11a>
 80084aa:	2300      	movs	r3, #0
 80084ac:	3401      	adds	r4, #1
 80084ae:	9305      	str	r3, [sp, #20]
 80084b0:	4619      	mov	r1, r3
 80084b2:	f04f 0c0a 	mov.w	ip, #10
 80084b6:	4620      	mov	r0, r4
 80084b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084bc:	3a30      	subs	r2, #48	; 0x30
 80084be:	2a09      	cmp	r2, #9
 80084c0:	d903      	bls.n	80084ca <_vfiprintf_r+0x1ee>
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d0c5      	beq.n	8008452 <_vfiprintf_r+0x176>
 80084c6:	9105      	str	r1, [sp, #20]
 80084c8:	e7c3      	b.n	8008452 <_vfiprintf_r+0x176>
 80084ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80084ce:	4604      	mov	r4, r0
 80084d0:	2301      	movs	r3, #1
 80084d2:	e7f0      	b.n	80084b6 <_vfiprintf_r+0x1da>
 80084d4:	ab03      	add	r3, sp, #12
 80084d6:	9300      	str	r3, [sp, #0]
 80084d8:	462a      	mov	r2, r5
 80084da:	4b16      	ldr	r3, [pc, #88]	; (8008534 <_vfiprintf_r+0x258>)
 80084dc:	a904      	add	r1, sp, #16
 80084de:	4630      	mov	r0, r6
 80084e0:	f3af 8000 	nop.w
 80084e4:	4607      	mov	r7, r0
 80084e6:	1c78      	adds	r0, r7, #1
 80084e8:	d1d6      	bne.n	8008498 <_vfiprintf_r+0x1bc>
 80084ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084ec:	07d9      	lsls	r1, r3, #31
 80084ee:	d405      	bmi.n	80084fc <_vfiprintf_r+0x220>
 80084f0:	89ab      	ldrh	r3, [r5, #12]
 80084f2:	059a      	lsls	r2, r3, #22
 80084f4:	d402      	bmi.n	80084fc <_vfiprintf_r+0x220>
 80084f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084f8:	f000 fc45 	bl	8008d86 <__retarget_lock_release_recursive>
 80084fc:	89ab      	ldrh	r3, [r5, #12]
 80084fe:	065b      	lsls	r3, r3, #25
 8008500:	f53f af12 	bmi.w	8008328 <_vfiprintf_r+0x4c>
 8008504:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008506:	e711      	b.n	800832c <_vfiprintf_r+0x50>
 8008508:	ab03      	add	r3, sp, #12
 800850a:	9300      	str	r3, [sp, #0]
 800850c:	462a      	mov	r2, r5
 800850e:	4b09      	ldr	r3, [pc, #36]	; (8008534 <_vfiprintf_r+0x258>)
 8008510:	a904      	add	r1, sp, #16
 8008512:	4630      	mov	r0, r6
 8008514:	f000 f880 	bl	8008618 <_printf_i>
 8008518:	e7e4      	b.n	80084e4 <_vfiprintf_r+0x208>
 800851a:	bf00      	nop
 800851c:	080096d4 	.word	0x080096d4
 8008520:	080096f4 	.word	0x080096f4
 8008524:	080096b4 	.word	0x080096b4
 8008528:	08009681 	.word	0x08009681
 800852c:	0800968b 	.word	0x0800968b
 8008530:	00000000 	.word	0x00000000
 8008534:	080082b7 	.word	0x080082b7
 8008538:	08009687 	.word	0x08009687

0800853c <_printf_common>:
 800853c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008540:	4616      	mov	r6, r2
 8008542:	4699      	mov	r9, r3
 8008544:	688a      	ldr	r2, [r1, #8]
 8008546:	690b      	ldr	r3, [r1, #16]
 8008548:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800854c:	4293      	cmp	r3, r2
 800854e:	bfb8      	it	lt
 8008550:	4613      	movlt	r3, r2
 8008552:	6033      	str	r3, [r6, #0]
 8008554:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008558:	4607      	mov	r7, r0
 800855a:	460c      	mov	r4, r1
 800855c:	b10a      	cbz	r2, 8008562 <_printf_common+0x26>
 800855e:	3301      	adds	r3, #1
 8008560:	6033      	str	r3, [r6, #0]
 8008562:	6823      	ldr	r3, [r4, #0]
 8008564:	0699      	lsls	r1, r3, #26
 8008566:	bf42      	ittt	mi
 8008568:	6833      	ldrmi	r3, [r6, #0]
 800856a:	3302      	addmi	r3, #2
 800856c:	6033      	strmi	r3, [r6, #0]
 800856e:	6825      	ldr	r5, [r4, #0]
 8008570:	f015 0506 	ands.w	r5, r5, #6
 8008574:	d106      	bne.n	8008584 <_printf_common+0x48>
 8008576:	f104 0a19 	add.w	sl, r4, #25
 800857a:	68e3      	ldr	r3, [r4, #12]
 800857c:	6832      	ldr	r2, [r6, #0]
 800857e:	1a9b      	subs	r3, r3, r2
 8008580:	42ab      	cmp	r3, r5
 8008582:	dc26      	bgt.n	80085d2 <_printf_common+0x96>
 8008584:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008588:	1e13      	subs	r3, r2, #0
 800858a:	6822      	ldr	r2, [r4, #0]
 800858c:	bf18      	it	ne
 800858e:	2301      	movne	r3, #1
 8008590:	0692      	lsls	r2, r2, #26
 8008592:	d42b      	bmi.n	80085ec <_printf_common+0xb0>
 8008594:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008598:	4649      	mov	r1, r9
 800859a:	4638      	mov	r0, r7
 800859c:	47c0      	blx	r8
 800859e:	3001      	adds	r0, #1
 80085a0:	d01e      	beq.n	80085e0 <_printf_common+0xa4>
 80085a2:	6823      	ldr	r3, [r4, #0]
 80085a4:	68e5      	ldr	r5, [r4, #12]
 80085a6:	6832      	ldr	r2, [r6, #0]
 80085a8:	f003 0306 	and.w	r3, r3, #6
 80085ac:	2b04      	cmp	r3, #4
 80085ae:	bf08      	it	eq
 80085b0:	1aad      	subeq	r5, r5, r2
 80085b2:	68a3      	ldr	r3, [r4, #8]
 80085b4:	6922      	ldr	r2, [r4, #16]
 80085b6:	bf0c      	ite	eq
 80085b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085bc:	2500      	movne	r5, #0
 80085be:	4293      	cmp	r3, r2
 80085c0:	bfc4      	itt	gt
 80085c2:	1a9b      	subgt	r3, r3, r2
 80085c4:	18ed      	addgt	r5, r5, r3
 80085c6:	2600      	movs	r6, #0
 80085c8:	341a      	adds	r4, #26
 80085ca:	42b5      	cmp	r5, r6
 80085cc:	d11a      	bne.n	8008604 <_printf_common+0xc8>
 80085ce:	2000      	movs	r0, #0
 80085d0:	e008      	b.n	80085e4 <_printf_common+0xa8>
 80085d2:	2301      	movs	r3, #1
 80085d4:	4652      	mov	r2, sl
 80085d6:	4649      	mov	r1, r9
 80085d8:	4638      	mov	r0, r7
 80085da:	47c0      	blx	r8
 80085dc:	3001      	adds	r0, #1
 80085de:	d103      	bne.n	80085e8 <_printf_common+0xac>
 80085e0:	f04f 30ff 	mov.w	r0, #4294967295
 80085e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085e8:	3501      	adds	r5, #1
 80085ea:	e7c6      	b.n	800857a <_printf_common+0x3e>
 80085ec:	18e1      	adds	r1, r4, r3
 80085ee:	1c5a      	adds	r2, r3, #1
 80085f0:	2030      	movs	r0, #48	; 0x30
 80085f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80085f6:	4422      	add	r2, r4
 80085f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80085fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008600:	3302      	adds	r3, #2
 8008602:	e7c7      	b.n	8008594 <_printf_common+0x58>
 8008604:	2301      	movs	r3, #1
 8008606:	4622      	mov	r2, r4
 8008608:	4649      	mov	r1, r9
 800860a:	4638      	mov	r0, r7
 800860c:	47c0      	blx	r8
 800860e:	3001      	adds	r0, #1
 8008610:	d0e6      	beq.n	80085e0 <_printf_common+0xa4>
 8008612:	3601      	adds	r6, #1
 8008614:	e7d9      	b.n	80085ca <_printf_common+0x8e>
	...

08008618 <_printf_i>:
 8008618:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800861c:	7e0f      	ldrb	r7, [r1, #24]
 800861e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008620:	2f78      	cmp	r7, #120	; 0x78
 8008622:	4691      	mov	r9, r2
 8008624:	4680      	mov	r8, r0
 8008626:	460c      	mov	r4, r1
 8008628:	469a      	mov	sl, r3
 800862a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800862e:	d807      	bhi.n	8008640 <_printf_i+0x28>
 8008630:	2f62      	cmp	r7, #98	; 0x62
 8008632:	d80a      	bhi.n	800864a <_printf_i+0x32>
 8008634:	2f00      	cmp	r7, #0
 8008636:	f000 80d8 	beq.w	80087ea <_printf_i+0x1d2>
 800863a:	2f58      	cmp	r7, #88	; 0x58
 800863c:	f000 80a3 	beq.w	8008786 <_printf_i+0x16e>
 8008640:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008644:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008648:	e03a      	b.n	80086c0 <_printf_i+0xa8>
 800864a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800864e:	2b15      	cmp	r3, #21
 8008650:	d8f6      	bhi.n	8008640 <_printf_i+0x28>
 8008652:	a101      	add	r1, pc, #4	; (adr r1, 8008658 <_printf_i+0x40>)
 8008654:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008658:	080086b1 	.word	0x080086b1
 800865c:	080086c5 	.word	0x080086c5
 8008660:	08008641 	.word	0x08008641
 8008664:	08008641 	.word	0x08008641
 8008668:	08008641 	.word	0x08008641
 800866c:	08008641 	.word	0x08008641
 8008670:	080086c5 	.word	0x080086c5
 8008674:	08008641 	.word	0x08008641
 8008678:	08008641 	.word	0x08008641
 800867c:	08008641 	.word	0x08008641
 8008680:	08008641 	.word	0x08008641
 8008684:	080087d1 	.word	0x080087d1
 8008688:	080086f5 	.word	0x080086f5
 800868c:	080087b3 	.word	0x080087b3
 8008690:	08008641 	.word	0x08008641
 8008694:	08008641 	.word	0x08008641
 8008698:	080087f3 	.word	0x080087f3
 800869c:	08008641 	.word	0x08008641
 80086a0:	080086f5 	.word	0x080086f5
 80086a4:	08008641 	.word	0x08008641
 80086a8:	08008641 	.word	0x08008641
 80086ac:	080087bb 	.word	0x080087bb
 80086b0:	682b      	ldr	r3, [r5, #0]
 80086b2:	1d1a      	adds	r2, r3, #4
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	602a      	str	r2, [r5, #0]
 80086b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086c0:	2301      	movs	r3, #1
 80086c2:	e0a3      	b.n	800880c <_printf_i+0x1f4>
 80086c4:	6820      	ldr	r0, [r4, #0]
 80086c6:	6829      	ldr	r1, [r5, #0]
 80086c8:	0606      	lsls	r6, r0, #24
 80086ca:	f101 0304 	add.w	r3, r1, #4
 80086ce:	d50a      	bpl.n	80086e6 <_printf_i+0xce>
 80086d0:	680e      	ldr	r6, [r1, #0]
 80086d2:	602b      	str	r3, [r5, #0]
 80086d4:	2e00      	cmp	r6, #0
 80086d6:	da03      	bge.n	80086e0 <_printf_i+0xc8>
 80086d8:	232d      	movs	r3, #45	; 0x2d
 80086da:	4276      	negs	r6, r6
 80086dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086e0:	485e      	ldr	r0, [pc, #376]	; (800885c <_printf_i+0x244>)
 80086e2:	230a      	movs	r3, #10
 80086e4:	e019      	b.n	800871a <_printf_i+0x102>
 80086e6:	680e      	ldr	r6, [r1, #0]
 80086e8:	602b      	str	r3, [r5, #0]
 80086ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80086ee:	bf18      	it	ne
 80086f0:	b236      	sxthne	r6, r6
 80086f2:	e7ef      	b.n	80086d4 <_printf_i+0xbc>
 80086f4:	682b      	ldr	r3, [r5, #0]
 80086f6:	6820      	ldr	r0, [r4, #0]
 80086f8:	1d19      	adds	r1, r3, #4
 80086fa:	6029      	str	r1, [r5, #0]
 80086fc:	0601      	lsls	r1, r0, #24
 80086fe:	d501      	bpl.n	8008704 <_printf_i+0xec>
 8008700:	681e      	ldr	r6, [r3, #0]
 8008702:	e002      	b.n	800870a <_printf_i+0xf2>
 8008704:	0646      	lsls	r6, r0, #25
 8008706:	d5fb      	bpl.n	8008700 <_printf_i+0xe8>
 8008708:	881e      	ldrh	r6, [r3, #0]
 800870a:	4854      	ldr	r0, [pc, #336]	; (800885c <_printf_i+0x244>)
 800870c:	2f6f      	cmp	r7, #111	; 0x6f
 800870e:	bf0c      	ite	eq
 8008710:	2308      	moveq	r3, #8
 8008712:	230a      	movne	r3, #10
 8008714:	2100      	movs	r1, #0
 8008716:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800871a:	6865      	ldr	r5, [r4, #4]
 800871c:	60a5      	str	r5, [r4, #8]
 800871e:	2d00      	cmp	r5, #0
 8008720:	bfa2      	ittt	ge
 8008722:	6821      	ldrge	r1, [r4, #0]
 8008724:	f021 0104 	bicge.w	r1, r1, #4
 8008728:	6021      	strge	r1, [r4, #0]
 800872a:	b90e      	cbnz	r6, 8008730 <_printf_i+0x118>
 800872c:	2d00      	cmp	r5, #0
 800872e:	d04d      	beq.n	80087cc <_printf_i+0x1b4>
 8008730:	4615      	mov	r5, r2
 8008732:	fbb6 f1f3 	udiv	r1, r6, r3
 8008736:	fb03 6711 	mls	r7, r3, r1, r6
 800873a:	5dc7      	ldrb	r7, [r0, r7]
 800873c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008740:	4637      	mov	r7, r6
 8008742:	42bb      	cmp	r3, r7
 8008744:	460e      	mov	r6, r1
 8008746:	d9f4      	bls.n	8008732 <_printf_i+0x11a>
 8008748:	2b08      	cmp	r3, #8
 800874a:	d10b      	bne.n	8008764 <_printf_i+0x14c>
 800874c:	6823      	ldr	r3, [r4, #0]
 800874e:	07de      	lsls	r6, r3, #31
 8008750:	d508      	bpl.n	8008764 <_printf_i+0x14c>
 8008752:	6923      	ldr	r3, [r4, #16]
 8008754:	6861      	ldr	r1, [r4, #4]
 8008756:	4299      	cmp	r1, r3
 8008758:	bfde      	ittt	le
 800875a:	2330      	movle	r3, #48	; 0x30
 800875c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008760:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008764:	1b52      	subs	r2, r2, r5
 8008766:	6122      	str	r2, [r4, #16]
 8008768:	f8cd a000 	str.w	sl, [sp]
 800876c:	464b      	mov	r3, r9
 800876e:	aa03      	add	r2, sp, #12
 8008770:	4621      	mov	r1, r4
 8008772:	4640      	mov	r0, r8
 8008774:	f7ff fee2 	bl	800853c <_printf_common>
 8008778:	3001      	adds	r0, #1
 800877a:	d14c      	bne.n	8008816 <_printf_i+0x1fe>
 800877c:	f04f 30ff 	mov.w	r0, #4294967295
 8008780:	b004      	add	sp, #16
 8008782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008786:	4835      	ldr	r0, [pc, #212]	; (800885c <_printf_i+0x244>)
 8008788:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800878c:	6829      	ldr	r1, [r5, #0]
 800878e:	6823      	ldr	r3, [r4, #0]
 8008790:	f851 6b04 	ldr.w	r6, [r1], #4
 8008794:	6029      	str	r1, [r5, #0]
 8008796:	061d      	lsls	r5, r3, #24
 8008798:	d514      	bpl.n	80087c4 <_printf_i+0x1ac>
 800879a:	07df      	lsls	r7, r3, #31
 800879c:	bf44      	itt	mi
 800879e:	f043 0320 	orrmi.w	r3, r3, #32
 80087a2:	6023      	strmi	r3, [r4, #0]
 80087a4:	b91e      	cbnz	r6, 80087ae <_printf_i+0x196>
 80087a6:	6823      	ldr	r3, [r4, #0]
 80087a8:	f023 0320 	bic.w	r3, r3, #32
 80087ac:	6023      	str	r3, [r4, #0]
 80087ae:	2310      	movs	r3, #16
 80087b0:	e7b0      	b.n	8008714 <_printf_i+0xfc>
 80087b2:	6823      	ldr	r3, [r4, #0]
 80087b4:	f043 0320 	orr.w	r3, r3, #32
 80087b8:	6023      	str	r3, [r4, #0]
 80087ba:	2378      	movs	r3, #120	; 0x78
 80087bc:	4828      	ldr	r0, [pc, #160]	; (8008860 <_printf_i+0x248>)
 80087be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80087c2:	e7e3      	b.n	800878c <_printf_i+0x174>
 80087c4:	0659      	lsls	r1, r3, #25
 80087c6:	bf48      	it	mi
 80087c8:	b2b6      	uxthmi	r6, r6
 80087ca:	e7e6      	b.n	800879a <_printf_i+0x182>
 80087cc:	4615      	mov	r5, r2
 80087ce:	e7bb      	b.n	8008748 <_printf_i+0x130>
 80087d0:	682b      	ldr	r3, [r5, #0]
 80087d2:	6826      	ldr	r6, [r4, #0]
 80087d4:	6961      	ldr	r1, [r4, #20]
 80087d6:	1d18      	adds	r0, r3, #4
 80087d8:	6028      	str	r0, [r5, #0]
 80087da:	0635      	lsls	r5, r6, #24
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	d501      	bpl.n	80087e4 <_printf_i+0x1cc>
 80087e0:	6019      	str	r1, [r3, #0]
 80087e2:	e002      	b.n	80087ea <_printf_i+0x1d2>
 80087e4:	0670      	lsls	r0, r6, #25
 80087e6:	d5fb      	bpl.n	80087e0 <_printf_i+0x1c8>
 80087e8:	8019      	strh	r1, [r3, #0]
 80087ea:	2300      	movs	r3, #0
 80087ec:	6123      	str	r3, [r4, #16]
 80087ee:	4615      	mov	r5, r2
 80087f0:	e7ba      	b.n	8008768 <_printf_i+0x150>
 80087f2:	682b      	ldr	r3, [r5, #0]
 80087f4:	1d1a      	adds	r2, r3, #4
 80087f6:	602a      	str	r2, [r5, #0]
 80087f8:	681d      	ldr	r5, [r3, #0]
 80087fa:	6862      	ldr	r2, [r4, #4]
 80087fc:	2100      	movs	r1, #0
 80087fe:	4628      	mov	r0, r5
 8008800:	f7f7 fd1e 	bl	8000240 <memchr>
 8008804:	b108      	cbz	r0, 800880a <_printf_i+0x1f2>
 8008806:	1b40      	subs	r0, r0, r5
 8008808:	6060      	str	r0, [r4, #4]
 800880a:	6863      	ldr	r3, [r4, #4]
 800880c:	6123      	str	r3, [r4, #16]
 800880e:	2300      	movs	r3, #0
 8008810:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008814:	e7a8      	b.n	8008768 <_printf_i+0x150>
 8008816:	6923      	ldr	r3, [r4, #16]
 8008818:	462a      	mov	r2, r5
 800881a:	4649      	mov	r1, r9
 800881c:	4640      	mov	r0, r8
 800881e:	47d0      	blx	sl
 8008820:	3001      	adds	r0, #1
 8008822:	d0ab      	beq.n	800877c <_printf_i+0x164>
 8008824:	6823      	ldr	r3, [r4, #0]
 8008826:	079b      	lsls	r3, r3, #30
 8008828:	d413      	bmi.n	8008852 <_printf_i+0x23a>
 800882a:	68e0      	ldr	r0, [r4, #12]
 800882c:	9b03      	ldr	r3, [sp, #12]
 800882e:	4298      	cmp	r0, r3
 8008830:	bfb8      	it	lt
 8008832:	4618      	movlt	r0, r3
 8008834:	e7a4      	b.n	8008780 <_printf_i+0x168>
 8008836:	2301      	movs	r3, #1
 8008838:	4632      	mov	r2, r6
 800883a:	4649      	mov	r1, r9
 800883c:	4640      	mov	r0, r8
 800883e:	47d0      	blx	sl
 8008840:	3001      	adds	r0, #1
 8008842:	d09b      	beq.n	800877c <_printf_i+0x164>
 8008844:	3501      	adds	r5, #1
 8008846:	68e3      	ldr	r3, [r4, #12]
 8008848:	9903      	ldr	r1, [sp, #12]
 800884a:	1a5b      	subs	r3, r3, r1
 800884c:	42ab      	cmp	r3, r5
 800884e:	dcf2      	bgt.n	8008836 <_printf_i+0x21e>
 8008850:	e7eb      	b.n	800882a <_printf_i+0x212>
 8008852:	2500      	movs	r5, #0
 8008854:	f104 0619 	add.w	r6, r4, #25
 8008858:	e7f5      	b.n	8008846 <_printf_i+0x22e>
 800885a:	bf00      	nop
 800885c:	08009692 	.word	0x08009692
 8008860:	080096a3 	.word	0x080096a3

08008864 <_sbrk_r>:
 8008864:	b538      	push	{r3, r4, r5, lr}
 8008866:	4d06      	ldr	r5, [pc, #24]	; (8008880 <_sbrk_r+0x1c>)
 8008868:	2300      	movs	r3, #0
 800886a:	4604      	mov	r4, r0
 800886c:	4608      	mov	r0, r1
 800886e:	602b      	str	r3, [r5, #0]
 8008870:	f7f8 fc14 	bl	800109c <_sbrk>
 8008874:	1c43      	adds	r3, r0, #1
 8008876:	d102      	bne.n	800887e <_sbrk_r+0x1a>
 8008878:	682b      	ldr	r3, [r5, #0]
 800887a:	b103      	cbz	r3, 800887e <_sbrk_r+0x1a>
 800887c:	6023      	str	r3, [r4, #0]
 800887e:	bd38      	pop	{r3, r4, r5, pc}
 8008880:	200002ec 	.word	0x200002ec

08008884 <__swbuf_r>:
 8008884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008886:	460e      	mov	r6, r1
 8008888:	4614      	mov	r4, r2
 800888a:	4605      	mov	r5, r0
 800888c:	b118      	cbz	r0, 8008896 <__swbuf_r+0x12>
 800888e:	6983      	ldr	r3, [r0, #24]
 8008890:	b90b      	cbnz	r3, 8008896 <__swbuf_r+0x12>
 8008892:	f000 f9d9 	bl	8008c48 <__sinit>
 8008896:	4b21      	ldr	r3, [pc, #132]	; (800891c <__swbuf_r+0x98>)
 8008898:	429c      	cmp	r4, r3
 800889a:	d12b      	bne.n	80088f4 <__swbuf_r+0x70>
 800889c:	686c      	ldr	r4, [r5, #4]
 800889e:	69a3      	ldr	r3, [r4, #24]
 80088a0:	60a3      	str	r3, [r4, #8]
 80088a2:	89a3      	ldrh	r3, [r4, #12]
 80088a4:	071a      	lsls	r2, r3, #28
 80088a6:	d52f      	bpl.n	8008908 <__swbuf_r+0x84>
 80088a8:	6923      	ldr	r3, [r4, #16]
 80088aa:	b36b      	cbz	r3, 8008908 <__swbuf_r+0x84>
 80088ac:	6923      	ldr	r3, [r4, #16]
 80088ae:	6820      	ldr	r0, [r4, #0]
 80088b0:	1ac0      	subs	r0, r0, r3
 80088b2:	6963      	ldr	r3, [r4, #20]
 80088b4:	b2f6      	uxtb	r6, r6
 80088b6:	4283      	cmp	r3, r0
 80088b8:	4637      	mov	r7, r6
 80088ba:	dc04      	bgt.n	80088c6 <__swbuf_r+0x42>
 80088bc:	4621      	mov	r1, r4
 80088be:	4628      	mov	r0, r5
 80088c0:	f000 f92e 	bl	8008b20 <_fflush_r>
 80088c4:	bb30      	cbnz	r0, 8008914 <__swbuf_r+0x90>
 80088c6:	68a3      	ldr	r3, [r4, #8]
 80088c8:	3b01      	subs	r3, #1
 80088ca:	60a3      	str	r3, [r4, #8]
 80088cc:	6823      	ldr	r3, [r4, #0]
 80088ce:	1c5a      	adds	r2, r3, #1
 80088d0:	6022      	str	r2, [r4, #0]
 80088d2:	701e      	strb	r6, [r3, #0]
 80088d4:	6963      	ldr	r3, [r4, #20]
 80088d6:	3001      	adds	r0, #1
 80088d8:	4283      	cmp	r3, r0
 80088da:	d004      	beq.n	80088e6 <__swbuf_r+0x62>
 80088dc:	89a3      	ldrh	r3, [r4, #12]
 80088de:	07db      	lsls	r3, r3, #31
 80088e0:	d506      	bpl.n	80088f0 <__swbuf_r+0x6c>
 80088e2:	2e0a      	cmp	r6, #10
 80088e4:	d104      	bne.n	80088f0 <__swbuf_r+0x6c>
 80088e6:	4621      	mov	r1, r4
 80088e8:	4628      	mov	r0, r5
 80088ea:	f000 f919 	bl	8008b20 <_fflush_r>
 80088ee:	b988      	cbnz	r0, 8008914 <__swbuf_r+0x90>
 80088f0:	4638      	mov	r0, r7
 80088f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088f4:	4b0a      	ldr	r3, [pc, #40]	; (8008920 <__swbuf_r+0x9c>)
 80088f6:	429c      	cmp	r4, r3
 80088f8:	d101      	bne.n	80088fe <__swbuf_r+0x7a>
 80088fa:	68ac      	ldr	r4, [r5, #8]
 80088fc:	e7cf      	b.n	800889e <__swbuf_r+0x1a>
 80088fe:	4b09      	ldr	r3, [pc, #36]	; (8008924 <__swbuf_r+0xa0>)
 8008900:	429c      	cmp	r4, r3
 8008902:	bf08      	it	eq
 8008904:	68ec      	ldreq	r4, [r5, #12]
 8008906:	e7ca      	b.n	800889e <__swbuf_r+0x1a>
 8008908:	4621      	mov	r1, r4
 800890a:	4628      	mov	r0, r5
 800890c:	f000 f80c 	bl	8008928 <__swsetup_r>
 8008910:	2800      	cmp	r0, #0
 8008912:	d0cb      	beq.n	80088ac <__swbuf_r+0x28>
 8008914:	f04f 37ff 	mov.w	r7, #4294967295
 8008918:	e7ea      	b.n	80088f0 <__swbuf_r+0x6c>
 800891a:	bf00      	nop
 800891c:	080096d4 	.word	0x080096d4
 8008920:	080096f4 	.word	0x080096f4
 8008924:	080096b4 	.word	0x080096b4

08008928 <__swsetup_r>:
 8008928:	4b32      	ldr	r3, [pc, #200]	; (80089f4 <__swsetup_r+0xcc>)
 800892a:	b570      	push	{r4, r5, r6, lr}
 800892c:	681d      	ldr	r5, [r3, #0]
 800892e:	4606      	mov	r6, r0
 8008930:	460c      	mov	r4, r1
 8008932:	b125      	cbz	r5, 800893e <__swsetup_r+0x16>
 8008934:	69ab      	ldr	r3, [r5, #24]
 8008936:	b913      	cbnz	r3, 800893e <__swsetup_r+0x16>
 8008938:	4628      	mov	r0, r5
 800893a:	f000 f985 	bl	8008c48 <__sinit>
 800893e:	4b2e      	ldr	r3, [pc, #184]	; (80089f8 <__swsetup_r+0xd0>)
 8008940:	429c      	cmp	r4, r3
 8008942:	d10f      	bne.n	8008964 <__swsetup_r+0x3c>
 8008944:	686c      	ldr	r4, [r5, #4]
 8008946:	89a3      	ldrh	r3, [r4, #12]
 8008948:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800894c:	0719      	lsls	r1, r3, #28
 800894e:	d42c      	bmi.n	80089aa <__swsetup_r+0x82>
 8008950:	06dd      	lsls	r5, r3, #27
 8008952:	d411      	bmi.n	8008978 <__swsetup_r+0x50>
 8008954:	2309      	movs	r3, #9
 8008956:	6033      	str	r3, [r6, #0]
 8008958:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800895c:	81a3      	strh	r3, [r4, #12]
 800895e:	f04f 30ff 	mov.w	r0, #4294967295
 8008962:	e03e      	b.n	80089e2 <__swsetup_r+0xba>
 8008964:	4b25      	ldr	r3, [pc, #148]	; (80089fc <__swsetup_r+0xd4>)
 8008966:	429c      	cmp	r4, r3
 8008968:	d101      	bne.n	800896e <__swsetup_r+0x46>
 800896a:	68ac      	ldr	r4, [r5, #8]
 800896c:	e7eb      	b.n	8008946 <__swsetup_r+0x1e>
 800896e:	4b24      	ldr	r3, [pc, #144]	; (8008a00 <__swsetup_r+0xd8>)
 8008970:	429c      	cmp	r4, r3
 8008972:	bf08      	it	eq
 8008974:	68ec      	ldreq	r4, [r5, #12]
 8008976:	e7e6      	b.n	8008946 <__swsetup_r+0x1e>
 8008978:	0758      	lsls	r0, r3, #29
 800897a:	d512      	bpl.n	80089a2 <__swsetup_r+0x7a>
 800897c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800897e:	b141      	cbz	r1, 8008992 <__swsetup_r+0x6a>
 8008980:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008984:	4299      	cmp	r1, r3
 8008986:	d002      	beq.n	800898e <__swsetup_r+0x66>
 8008988:	4630      	mov	r0, r6
 800898a:	f7ff fa41 	bl	8007e10 <_free_r>
 800898e:	2300      	movs	r3, #0
 8008990:	6363      	str	r3, [r4, #52]	; 0x34
 8008992:	89a3      	ldrh	r3, [r4, #12]
 8008994:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008998:	81a3      	strh	r3, [r4, #12]
 800899a:	2300      	movs	r3, #0
 800899c:	6063      	str	r3, [r4, #4]
 800899e:	6923      	ldr	r3, [r4, #16]
 80089a0:	6023      	str	r3, [r4, #0]
 80089a2:	89a3      	ldrh	r3, [r4, #12]
 80089a4:	f043 0308 	orr.w	r3, r3, #8
 80089a8:	81a3      	strh	r3, [r4, #12]
 80089aa:	6923      	ldr	r3, [r4, #16]
 80089ac:	b94b      	cbnz	r3, 80089c2 <__swsetup_r+0x9a>
 80089ae:	89a3      	ldrh	r3, [r4, #12]
 80089b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80089b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089b8:	d003      	beq.n	80089c2 <__swsetup_r+0x9a>
 80089ba:	4621      	mov	r1, r4
 80089bc:	4630      	mov	r0, r6
 80089be:	f000 fa09 	bl	8008dd4 <__smakebuf_r>
 80089c2:	89a0      	ldrh	r0, [r4, #12]
 80089c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80089c8:	f010 0301 	ands.w	r3, r0, #1
 80089cc:	d00a      	beq.n	80089e4 <__swsetup_r+0xbc>
 80089ce:	2300      	movs	r3, #0
 80089d0:	60a3      	str	r3, [r4, #8]
 80089d2:	6963      	ldr	r3, [r4, #20]
 80089d4:	425b      	negs	r3, r3
 80089d6:	61a3      	str	r3, [r4, #24]
 80089d8:	6923      	ldr	r3, [r4, #16]
 80089da:	b943      	cbnz	r3, 80089ee <__swsetup_r+0xc6>
 80089dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80089e0:	d1ba      	bne.n	8008958 <__swsetup_r+0x30>
 80089e2:	bd70      	pop	{r4, r5, r6, pc}
 80089e4:	0781      	lsls	r1, r0, #30
 80089e6:	bf58      	it	pl
 80089e8:	6963      	ldrpl	r3, [r4, #20]
 80089ea:	60a3      	str	r3, [r4, #8]
 80089ec:	e7f4      	b.n	80089d8 <__swsetup_r+0xb0>
 80089ee:	2000      	movs	r0, #0
 80089f0:	e7f7      	b.n	80089e2 <__swsetup_r+0xba>
 80089f2:	bf00      	nop
 80089f4:	2000000c 	.word	0x2000000c
 80089f8:	080096d4 	.word	0x080096d4
 80089fc:	080096f4 	.word	0x080096f4
 8008a00:	080096b4 	.word	0x080096b4

08008a04 <abort>:
 8008a04:	b508      	push	{r3, lr}
 8008a06:	2006      	movs	r0, #6
 8008a08:	f000 fab0 	bl	8008f6c <raise>
 8008a0c:	2001      	movs	r0, #1
 8008a0e:	f7f8 facd 	bl	8000fac <_exit>
	...

08008a14 <__sflush_r>:
 8008a14:	898a      	ldrh	r2, [r1, #12]
 8008a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a1a:	4605      	mov	r5, r0
 8008a1c:	0710      	lsls	r0, r2, #28
 8008a1e:	460c      	mov	r4, r1
 8008a20:	d458      	bmi.n	8008ad4 <__sflush_r+0xc0>
 8008a22:	684b      	ldr	r3, [r1, #4]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	dc05      	bgt.n	8008a34 <__sflush_r+0x20>
 8008a28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	dc02      	bgt.n	8008a34 <__sflush_r+0x20>
 8008a2e:	2000      	movs	r0, #0
 8008a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a36:	2e00      	cmp	r6, #0
 8008a38:	d0f9      	beq.n	8008a2e <__sflush_r+0x1a>
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a40:	682f      	ldr	r7, [r5, #0]
 8008a42:	602b      	str	r3, [r5, #0]
 8008a44:	d032      	beq.n	8008aac <__sflush_r+0x98>
 8008a46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a48:	89a3      	ldrh	r3, [r4, #12]
 8008a4a:	075a      	lsls	r2, r3, #29
 8008a4c:	d505      	bpl.n	8008a5a <__sflush_r+0x46>
 8008a4e:	6863      	ldr	r3, [r4, #4]
 8008a50:	1ac0      	subs	r0, r0, r3
 8008a52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a54:	b10b      	cbz	r3, 8008a5a <__sflush_r+0x46>
 8008a56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a58:	1ac0      	subs	r0, r0, r3
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a60:	6a21      	ldr	r1, [r4, #32]
 8008a62:	4628      	mov	r0, r5
 8008a64:	47b0      	blx	r6
 8008a66:	1c43      	adds	r3, r0, #1
 8008a68:	89a3      	ldrh	r3, [r4, #12]
 8008a6a:	d106      	bne.n	8008a7a <__sflush_r+0x66>
 8008a6c:	6829      	ldr	r1, [r5, #0]
 8008a6e:	291d      	cmp	r1, #29
 8008a70:	d82c      	bhi.n	8008acc <__sflush_r+0xb8>
 8008a72:	4a2a      	ldr	r2, [pc, #168]	; (8008b1c <__sflush_r+0x108>)
 8008a74:	40ca      	lsrs	r2, r1
 8008a76:	07d6      	lsls	r6, r2, #31
 8008a78:	d528      	bpl.n	8008acc <__sflush_r+0xb8>
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	6062      	str	r2, [r4, #4]
 8008a7e:	04d9      	lsls	r1, r3, #19
 8008a80:	6922      	ldr	r2, [r4, #16]
 8008a82:	6022      	str	r2, [r4, #0]
 8008a84:	d504      	bpl.n	8008a90 <__sflush_r+0x7c>
 8008a86:	1c42      	adds	r2, r0, #1
 8008a88:	d101      	bne.n	8008a8e <__sflush_r+0x7a>
 8008a8a:	682b      	ldr	r3, [r5, #0]
 8008a8c:	b903      	cbnz	r3, 8008a90 <__sflush_r+0x7c>
 8008a8e:	6560      	str	r0, [r4, #84]	; 0x54
 8008a90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a92:	602f      	str	r7, [r5, #0]
 8008a94:	2900      	cmp	r1, #0
 8008a96:	d0ca      	beq.n	8008a2e <__sflush_r+0x1a>
 8008a98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a9c:	4299      	cmp	r1, r3
 8008a9e:	d002      	beq.n	8008aa6 <__sflush_r+0x92>
 8008aa0:	4628      	mov	r0, r5
 8008aa2:	f7ff f9b5 	bl	8007e10 <_free_r>
 8008aa6:	2000      	movs	r0, #0
 8008aa8:	6360      	str	r0, [r4, #52]	; 0x34
 8008aaa:	e7c1      	b.n	8008a30 <__sflush_r+0x1c>
 8008aac:	6a21      	ldr	r1, [r4, #32]
 8008aae:	2301      	movs	r3, #1
 8008ab0:	4628      	mov	r0, r5
 8008ab2:	47b0      	blx	r6
 8008ab4:	1c41      	adds	r1, r0, #1
 8008ab6:	d1c7      	bne.n	8008a48 <__sflush_r+0x34>
 8008ab8:	682b      	ldr	r3, [r5, #0]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d0c4      	beq.n	8008a48 <__sflush_r+0x34>
 8008abe:	2b1d      	cmp	r3, #29
 8008ac0:	d001      	beq.n	8008ac6 <__sflush_r+0xb2>
 8008ac2:	2b16      	cmp	r3, #22
 8008ac4:	d101      	bne.n	8008aca <__sflush_r+0xb6>
 8008ac6:	602f      	str	r7, [r5, #0]
 8008ac8:	e7b1      	b.n	8008a2e <__sflush_r+0x1a>
 8008aca:	89a3      	ldrh	r3, [r4, #12]
 8008acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ad0:	81a3      	strh	r3, [r4, #12]
 8008ad2:	e7ad      	b.n	8008a30 <__sflush_r+0x1c>
 8008ad4:	690f      	ldr	r7, [r1, #16]
 8008ad6:	2f00      	cmp	r7, #0
 8008ad8:	d0a9      	beq.n	8008a2e <__sflush_r+0x1a>
 8008ada:	0793      	lsls	r3, r2, #30
 8008adc:	680e      	ldr	r6, [r1, #0]
 8008ade:	bf08      	it	eq
 8008ae0:	694b      	ldreq	r3, [r1, #20]
 8008ae2:	600f      	str	r7, [r1, #0]
 8008ae4:	bf18      	it	ne
 8008ae6:	2300      	movne	r3, #0
 8008ae8:	eba6 0807 	sub.w	r8, r6, r7
 8008aec:	608b      	str	r3, [r1, #8]
 8008aee:	f1b8 0f00 	cmp.w	r8, #0
 8008af2:	dd9c      	ble.n	8008a2e <__sflush_r+0x1a>
 8008af4:	6a21      	ldr	r1, [r4, #32]
 8008af6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008af8:	4643      	mov	r3, r8
 8008afa:	463a      	mov	r2, r7
 8008afc:	4628      	mov	r0, r5
 8008afe:	47b0      	blx	r6
 8008b00:	2800      	cmp	r0, #0
 8008b02:	dc06      	bgt.n	8008b12 <__sflush_r+0xfe>
 8008b04:	89a3      	ldrh	r3, [r4, #12]
 8008b06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b0a:	81a3      	strh	r3, [r4, #12]
 8008b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b10:	e78e      	b.n	8008a30 <__sflush_r+0x1c>
 8008b12:	4407      	add	r7, r0
 8008b14:	eba8 0800 	sub.w	r8, r8, r0
 8008b18:	e7e9      	b.n	8008aee <__sflush_r+0xda>
 8008b1a:	bf00      	nop
 8008b1c:	20400001 	.word	0x20400001

08008b20 <_fflush_r>:
 8008b20:	b538      	push	{r3, r4, r5, lr}
 8008b22:	690b      	ldr	r3, [r1, #16]
 8008b24:	4605      	mov	r5, r0
 8008b26:	460c      	mov	r4, r1
 8008b28:	b913      	cbnz	r3, 8008b30 <_fflush_r+0x10>
 8008b2a:	2500      	movs	r5, #0
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	bd38      	pop	{r3, r4, r5, pc}
 8008b30:	b118      	cbz	r0, 8008b3a <_fflush_r+0x1a>
 8008b32:	6983      	ldr	r3, [r0, #24]
 8008b34:	b90b      	cbnz	r3, 8008b3a <_fflush_r+0x1a>
 8008b36:	f000 f887 	bl	8008c48 <__sinit>
 8008b3a:	4b14      	ldr	r3, [pc, #80]	; (8008b8c <_fflush_r+0x6c>)
 8008b3c:	429c      	cmp	r4, r3
 8008b3e:	d11b      	bne.n	8008b78 <_fflush_r+0x58>
 8008b40:	686c      	ldr	r4, [r5, #4]
 8008b42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d0ef      	beq.n	8008b2a <_fflush_r+0xa>
 8008b4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b4c:	07d0      	lsls	r0, r2, #31
 8008b4e:	d404      	bmi.n	8008b5a <_fflush_r+0x3a>
 8008b50:	0599      	lsls	r1, r3, #22
 8008b52:	d402      	bmi.n	8008b5a <_fflush_r+0x3a>
 8008b54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b56:	f000 f915 	bl	8008d84 <__retarget_lock_acquire_recursive>
 8008b5a:	4628      	mov	r0, r5
 8008b5c:	4621      	mov	r1, r4
 8008b5e:	f7ff ff59 	bl	8008a14 <__sflush_r>
 8008b62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b64:	07da      	lsls	r2, r3, #31
 8008b66:	4605      	mov	r5, r0
 8008b68:	d4e0      	bmi.n	8008b2c <_fflush_r+0xc>
 8008b6a:	89a3      	ldrh	r3, [r4, #12]
 8008b6c:	059b      	lsls	r3, r3, #22
 8008b6e:	d4dd      	bmi.n	8008b2c <_fflush_r+0xc>
 8008b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b72:	f000 f908 	bl	8008d86 <__retarget_lock_release_recursive>
 8008b76:	e7d9      	b.n	8008b2c <_fflush_r+0xc>
 8008b78:	4b05      	ldr	r3, [pc, #20]	; (8008b90 <_fflush_r+0x70>)
 8008b7a:	429c      	cmp	r4, r3
 8008b7c:	d101      	bne.n	8008b82 <_fflush_r+0x62>
 8008b7e:	68ac      	ldr	r4, [r5, #8]
 8008b80:	e7df      	b.n	8008b42 <_fflush_r+0x22>
 8008b82:	4b04      	ldr	r3, [pc, #16]	; (8008b94 <_fflush_r+0x74>)
 8008b84:	429c      	cmp	r4, r3
 8008b86:	bf08      	it	eq
 8008b88:	68ec      	ldreq	r4, [r5, #12]
 8008b8a:	e7da      	b.n	8008b42 <_fflush_r+0x22>
 8008b8c:	080096d4 	.word	0x080096d4
 8008b90:	080096f4 	.word	0x080096f4
 8008b94:	080096b4 	.word	0x080096b4

08008b98 <std>:
 8008b98:	2300      	movs	r3, #0
 8008b9a:	b510      	push	{r4, lr}
 8008b9c:	4604      	mov	r4, r0
 8008b9e:	e9c0 3300 	strd	r3, r3, [r0]
 8008ba2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ba6:	6083      	str	r3, [r0, #8]
 8008ba8:	8181      	strh	r1, [r0, #12]
 8008baa:	6643      	str	r3, [r0, #100]	; 0x64
 8008bac:	81c2      	strh	r2, [r0, #14]
 8008bae:	6183      	str	r3, [r0, #24]
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	2208      	movs	r2, #8
 8008bb4:	305c      	adds	r0, #92	; 0x5c
 8008bb6:	f7fe ffcf 	bl	8007b58 <memset>
 8008bba:	4b05      	ldr	r3, [pc, #20]	; (8008bd0 <std+0x38>)
 8008bbc:	6263      	str	r3, [r4, #36]	; 0x24
 8008bbe:	4b05      	ldr	r3, [pc, #20]	; (8008bd4 <std+0x3c>)
 8008bc0:	62a3      	str	r3, [r4, #40]	; 0x28
 8008bc2:	4b05      	ldr	r3, [pc, #20]	; (8008bd8 <std+0x40>)
 8008bc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008bc6:	4b05      	ldr	r3, [pc, #20]	; (8008bdc <std+0x44>)
 8008bc8:	6224      	str	r4, [r4, #32]
 8008bca:	6323      	str	r3, [r4, #48]	; 0x30
 8008bcc:	bd10      	pop	{r4, pc}
 8008bce:	bf00      	nop
 8008bd0:	08008fa5 	.word	0x08008fa5
 8008bd4:	08008fc7 	.word	0x08008fc7
 8008bd8:	08008fff 	.word	0x08008fff
 8008bdc:	08009023 	.word	0x08009023

08008be0 <_cleanup_r>:
 8008be0:	4901      	ldr	r1, [pc, #4]	; (8008be8 <_cleanup_r+0x8>)
 8008be2:	f000 b8af 	b.w	8008d44 <_fwalk_reent>
 8008be6:	bf00      	nop
 8008be8:	08008b21 	.word	0x08008b21

08008bec <__sfmoreglue>:
 8008bec:	b570      	push	{r4, r5, r6, lr}
 8008bee:	2268      	movs	r2, #104	; 0x68
 8008bf0:	1e4d      	subs	r5, r1, #1
 8008bf2:	4355      	muls	r5, r2
 8008bf4:	460e      	mov	r6, r1
 8008bf6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008bfa:	f7ff f975 	bl	8007ee8 <_malloc_r>
 8008bfe:	4604      	mov	r4, r0
 8008c00:	b140      	cbz	r0, 8008c14 <__sfmoreglue+0x28>
 8008c02:	2100      	movs	r1, #0
 8008c04:	e9c0 1600 	strd	r1, r6, [r0]
 8008c08:	300c      	adds	r0, #12
 8008c0a:	60a0      	str	r0, [r4, #8]
 8008c0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008c10:	f7fe ffa2 	bl	8007b58 <memset>
 8008c14:	4620      	mov	r0, r4
 8008c16:	bd70      	pop	{r4, r5, r6, pc}

08008c18 <__sfp_lock_acquire>:
 8008c18:	4801      	ldr	r0, [pc, #4]	; (8008c20 <__sfp_lock_acquire+0x8>)
 8008c1a:	f000 b8b3 	b.w	8008d84 <__retarget_lock_acquire_recursive>
 8008c1e:	bf00      	nop
 8008c20:	200002e9 	.word	0x200002e9

08008c24 <__sfp_lock_release>:
 8008c24:	4801      	ldr	r0, [pc, #4]	; (8008c2c <__sfp_lock_release+0x8>)
 8008c26:	f000 b8ae 	b.w	8008d86 <__retarget_lock_release_recursive>
 8008c2a:	bf00      	nop
 8008c2c:	200002e9 	.word	0x200002e9

08008c30 <__sinit_lock_acquire>:
 8008c30:	4801      	ldr	r0, [pc, #4]	; (8008c38 <__sinit_lock_acquire+0x8>)
 8008c32:	f000 b8a7 	b.w	8008d84 <__retarget_lock_acquire_recursive>
 8008c36:	bf00      	nop
 8008c38:	200002ea 	.word	0x200002ea

08008c3c <__sinit_lock_release>:
 8008c3c:	4801      	ldr	r0, [pc, #4]	; (8008c44 <__sinit_lock_release+0x8>)
 8008c3e:	f000 b8a2 	b.w	8008d86 <__retarget_lock_release_recursive>
 8008c42:	bf00      	nop
 8008c44:	200002ea 	.word	0x200002ea

08008c48 <__sinit>:
 8008c48:	b510      	push	{r4, lr}
 8008c4a:	4604      	mov	r4, r0
 8008c4c:	f7ff fff0 	bl	8008c30 <__sinit_lock_acquire>
 8008c50:	69a3      	ldr	r3, [r4, #24]
 8008c52:	b11b      	cbz	r3, 8008c5c <__sinit+0x14>
 8008c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c58:	f7ff bff0 	b.w	8008c3c <__sinit_lock_release>
 8008c5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008c60:	6523      	str	r3, [r4, #80]	; 0x50
 8008c62:	4b13      	ldr	r3, [pc, #76]	; (8008cb0 <__sinit+0x68>)
 8008c64:	4a13      	ldr	r2, [pc, #76]	; (8008cb4 <__sinit+0x6c>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	62a2      	str	r2, [r4, #40]	; 0x28
 8008c6a:	42a3      	cmp	r3, r4
 8008c6c:	bf04      	itt	eq
 8008c6e:	2301      	moveq	r3, #1
 8008c70:	61a3      	streq	r3, [r4, #24]
 8008c72:	4620      	mov	r0, r4
 8008c74:	f000 f820 	bl	8008cb8 <__sfp>
 8008c78:	6060      	str	r0, [r4, #4]
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	f000 f81c 	bl	8008cb8 <__sfp>
 8008c80:	60a0      	str	r0, [r4, #8]
 8008c82:	4620      	mov	r0, r4
 8008c84:	f000 f818 	bl	8008cb8 <__sfp>
 8008c88:	2200      	movs	r2, #0
 8008c8a:	60e0      	str	r0, [r4, #12]
 8008c8c:	2104      	movs	r1, #4
 8008c8e:	6860      	ldr	r0, [r4, #4]
 8008c90:	f7ff ff82 	bl	8008b98 <std>
 8008c94:	68a0      	ldr	r0, [r4, #8]
 8008c96:	2201      	movs	r2, #1
 8008c98:	2109      	movs	r1, #9
 8008c9a:	f7ff ff7d 	bl	8008b98 <std>
 8008c9e:	68e0      	ldr	r0, [r4, #12]
 8008ca0:	2202      	movs	r2, #2
 8008ca2:	2112      	movs	r1, #18
 8008ca4:	f7ff ff78 	bl	8008b98 <std>
 8008ca8:	2301      	movs	r3, #1
 8008caa:	61a3      	str	r3, [r4, #24]
 8008cac:	e7d2      	b.n	8008c54 <__sinit+0xc>
 8008cae:	bf00      	nop
 8008cb0:	080094cc 	.word	0x080094cc
 8008cb4:	08008be1 	.word	0x08008be1

08008cb8 <__sfp>:
 8008cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cba:	4607      	mov	r7, r0
 8008cbc:	f7ff ffac 	bl	8008c18 <__sfp_lock_acquire>
 8008cc0:	4b1e      	ldr	r3, [pc, #120]	; (8008d3c <__sfp+0x84>)
 8008cc2:	681e      	ldr	r6, [r3, #0]
 8008cc4:	69b3      	ldr	r3, [r6, #24]
 8008cc6:	b913      	cbnz	r3, 8008cce <__sfp+0x16>
 8008cc8:	4630      	mov	r0, r6
 8008cca:	f7ff ffbd 	bl	8008c48 <__sinit>
 8008cce:	3648      	adds	r6, #72	; 0x48
 8008cd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008cd4:	3b01      	subs	r3, #1
 8008cd6:	d503      	bpl.n	8008ce0 <__sfp+0x28>
 8008cd8:	6833      	ldr	r3, [r6, #0]
 8008cda:	b30b      	cbz	r3, 8008d20 <__sfp+0x68>
 8008cdc:	6836      	ldr	r6, [r6, #0]
 8008cde:	e7f7      	b.n	8008cd0 <__sfp+0x18>
 8008ce0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008ce4:	b9d5      	cbnz	r5, 8008d1c <__sfp+0x64>
 8008ce6:	4b16      	ldr	r3, [pc, #88]	; (8008d40 <__sfp+0x88>)
 8008ce8:	60e3      	str	r3, [r4, #12]
 8008cea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008cee:	6665      	str	r5, [r4, #100]	; 0x64
 8008cf0:	f000 f847 	bl	8008d82 <__retarget_lock_init_recursive>
 8008cf4:	f7ff ff96 	bl	8008c24 <__sfp_lock_release>
 8008cf8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008cfc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008d00:	6025      	str	r5, [r4, #0]
 8008d02:	61a5      	str	r5, [r4, #24]
 8008d04:	2208      	movs	r2, #8
 8008d06:	4629      	mov	r1, r5
 8008d08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008d0c:	f7fe ff24 	bl	8007b58 <memset>
 8008d10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008d14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008d18:	4620      	mov	r0, r4
 8008d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d1c:	3468      	adds	r4, #104	; 0x68
 8008d1e:	e7d9      	b.n	8008cd4 <__sfp+0x1c>
 8008d20:	2104      	movs	r1, #4
 8008d22:	4638      	mov	r0, r7
 8008d24:	f7ff ff62 	bl	8008bec <__sfmoreglue>
 8008d28:	4604      	mov	r4, r0
 8008d2a:	6030      	str	r0, [r6, #0]
 8008d2c:	2800      	cmp	r0, #0
 8008d2e:	d1d5      	bne.n	8008cdc <__sfp+0x24>
 8008d30:	f7ff ff78 	bl	8008c24 <__sfp_lock_release>
 8008d34:	230c      	movs	r3, #12
 8008d36:	603b      	str	r3, [r7, #0]
 8008d38:	e7ee      	b.n	8008d18 <__sfp+0x60>
 8008d3a:	bf00      	nop
 8008d3c:	080094cc 	.word	0x080094cc
 8008d40:	ffff0001 	.word	0xffff0001

08008d44 <_fwalk_reent>:
 8008d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d48:	4606      	mov	r6, r0
 8008d4a:	4688      	mov	r8, r1
 8008d4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008d50:	2700      	movs	r7, #0
 8008d52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d56:	f1b9 0901 	subs.w	r9, r9, #1
 8008d5a:	d505      	bpl.n	8008d68 <_fwalk_reent+0x24>
 8008d5c:	6824      	ldr	r4, [r4, #0]
 8008d5e:	2c00      	cmp	r4, #0
 8008d60:	d1f7      	bne.n	8008d52 <_fwalk_reent+0xe>
 8008d62:	4638      	mov	r0, r7
 8008d64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d68:	89ab      	ldrh	r3, [r5, #12]
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d907      	bls.n	8008d7e <_fwalk_reent+0x3a>
 8008d6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d72:	3301      	adds	r3, #1
 8008d74:	d003      	beq.n	8008d7e <_fwalk_reent+0x3a>
 8008d76:	4629      	mov	r1, r5
 8008d78:	4630      	mov	r0, r6
 8008d7a:	47c0      	blx	r8
 8008d7c:	4307      	orrs	r7, r0
 8008d7e:	3568      	adds	r5, #104	; 0x68
 8008d80:	e7e9      	b.n	8008d56 <_fwalk_reent+0x12>

08008d82 <__retarget_lock_init_recursive>:
 8008d82:	4770      	bx	lr

08008d84 <__retarget_lock_acquire_recursive>:
 8008d84:	4770      	bx	lr

08008d86 <__retarget_lock_release_recursive>:
 8008d86:	4770      	bx	lr

08008d88 <__swhatbuf_r>:
 8008d88:	b570      	push	{r4, r5, r6, lr}
 8008d8a:	460e      	mov	r6, r1
 8008d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d90:	2900      	cmp	r1, #0
 8008d92:	b096      	sub	sp, #88	; 0x58
 8008d94:	4614      	mov	r4, r2
 8008d96:	461d      	mov	r5, r3
 8008d98:	da08      	bge.n	8008dac <__swhatbuf_r+0x24>
 8008d9a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	602a      	str	r2, [r5, #0]
 8008da2:	061a      	lsls	r2, r3, #24
 8008da4:	d410      	bmi.n	8008dc8 <__swhatbuf_r+0x40>
 8008da6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008daa:	e00e      	b.n	8008dca <__swhatbuf_r+0x42>
 8008dac:	466a      	mov	r2, sp
 8008dae:	f000 f95f 	bl	8009070 <_fstat_r>
 8008db2:	2800      	cmp	r0, #0
 8008db4:	dbf1      	blt.n	8008d9a <__swhatbuf_r+0x12>
 8008db6:	9a01      	ldr	r2, [sp, #4]
 8008db8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008dbc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008dc0:	425a      	negs	r2, r3
 8008dc2:	415a      	adcs	r2, r3
 8008dc4:	602a      	str	r2, [r5, #0]
 8008dc6:	e7ee      	b.n	8008da6 <__swhatbuf_r+0x1e>
 8008dc8:	2340      	movs	r3, #64	; 0x40
 8008dca:	2000      	movs	r0, #0
 8008dcc:	6023      	str	r3, [r4, #0]
 8008dce:	b016      	add	sp, #88	; 0x58
 8008dd0:	bd70      	pop	{r4, r5, r6, pc}
	...

08008dd4 <__smakebuf_r>:
 8008dd4:	898b      	ldrh	r3, [r1, #12]
 8008dd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008dd8:	079d      	lsls	r5, r3, #30
 8008dda:	4606      	mov	r6, r0
 8008ddc:	460c      	mov	r4, r1
 8008dde:	d507      	bpl.n	8008df0 <__smakebuf_r+0x1c>
 8008de0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008de4:	6023      	str	r3, [r4, #0]
 8008de6:	6123      	str	r3, [r4, #16]
 8008de8:	2301      	movs	r3, #1
 8008dea:	6163      	str	r3, [r4, #20]
 8008dec:	b002      	add	sp, #8
 8008dee:	bd70      	pop	{r4, r5, r6, pc}
 8008df0:	ab01      	add	r3, sp, #4
 8008df2:	466a      	mov	r2, sp
 8008df4:	f7ff ffc8 	bl	8008d88 <__swhatbuf_r>
 8008df8:	9900      	ldr	r1, [sp, #0]
 8008dfa:	4605      	mov	r5, r0
 8008dfc:	4630      	mov	r0, r6
 8008dfe:	f7ff f873 	bl	8007ee8 <_malloc_r>
 8008e02:	b948      	cbnz	r0, 8008e18 <__smakebuf_r+0x44>
 8008e04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e08:	059a      	lsls	r2, r3, #22
 8008e0a:	d4ef      	bmi.n	8008dec <__smakebuf_r+0x18>
 8008e0c:	f023 0303 	bic.w	r3, r3, #3
 8008e10:	f043 0302 	orr.w	r3, r3, #2
 8008e14:	81a3      	strh	r3, [r4, #12]
 8008e16:	e7e3      	b.n	8008de0 <__smakebuf_r+0xc>
 8008e18:	4b0d      	ldr	r3, [pc, #52]	; (8008e50 <__smakebuf_r+0x7c>)
 8008e1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008e1c:	89a3      	ldrh	r3, [r4, #12]
 8008e1e:	6020      	str	r0, [r4, #0]
 8008e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e24:	81a3      	strh	r3, [r4, #12]
 8008e26:	9b00      	ldr	r3, [sp, #0]
 8008e28:	6163      	str	r3, [r4, #20]
 8008e2a:	9b01      	ldr	r3, [sp, #4]
 8008e2c:	6120      	str	r0, [r4, #16]
 8008e2e:	b15b      	cbz	r3, 8008e48 <__smakebuf_r+0x74>
 8008e30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e34:	4630      	mov	r0, r6
 8008e36:	f000 f92d 	bl	8009094 <_isatty_r>
 8008e3a:	b128      	cbz	r0, 8008e48 <__smakebuf_r+0x74>
 8008e3c:	89a3      	ldrh	r3, [r4, #12]
 8008e3e:	f023 0303 	bic.w	r3, r3, #3
 8008e42:	f043 0301 	orr.w	r3, r3, #1
 8008e46:	81a3      	strh	r3, [r4, #12]
 8008e48:	89a0      	ldrh	r0, [r4, #12]
 8008e4a:	4305      	orrs	r5, r0
 8008e4c:	81a5      	strh	r5, [r4, #12]
 8008e4e:	e7cd      	b.n	8008dec <__smakebuf_r+0x18>
 8008e50:	08008be1 	.word	0x08008be1

08008e54 <memcpy>:
 8008e54:	440a      	add	r2, r1
 8008e56:	4291      	cmp	r1, r2
 8008e58:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e5c:	d100      	bne.n	8008e60 <memcpy+0xc>
 8008e5e:	4770      	bx	lr
 8008e60:	b510      	push	{r4, lr}
 8008e62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e6a:	4291      	cmp	r1, r2
 8008e6c:	d1f9      	bne.n	8008e62 <memcpy+0xe>
 8008e6e:	bd10      	pop	{r4, pc}

08008e70 <memmove>:
 8008e70:	4288      	cmp	r0, r1
 8008e72:	b510      	push	{r4, lr}
 8008e74:	eb01 0402 	add.w	r4, r1, r2
 8008e78:	d902      	bls.n	8008e80 <memmove+0x10>
 8008e7a:	4284      	cmp	r4, r0
 8008e7c:	4623      	mov	r3, r4
 8008e7e:	d807      	bhi.n	8008e90 <memmove+0x20>
 8008e80:	1e43      	subs	r3, r0, #1
 8008e82:	42a1      	cmp	r1, r4
 8008e84:	d008      	beq.n	8008e98 <memmove+0x28>
 8008e86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e8e:	e7f8      	b.n	8008e82 <memmove+0x12>
 8008e90:	4402      	add	r2, r0
 8008e92:	4601      	mov	r1, r0
 8008e94:	428a      	cmp	r2, r1
 8008e96:	d100      	bne.n	8008e9a <memmove+0x2a>
 8008e98:	bd10      	pop	{r4, pc}
 8008e9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ea2:	e7f7      	b.n	8008e94 <memmove+0x24>

08008ea4 <__malloc_lock>:
 8008ea4:	4801      	ldr	r0, [pc, #4]	; (8008eac <__malloc_lock+0x8>)
 8008ea6:	f7ff bf6d 	b.w	8008d84 <__retarget_lock_acquire_recursive>
 8008eaa:	bf00      	nop
 8008eac:	200002e8 	.word	0x200002e8

08008eb0 <__malloc_unlock>:
 8008eb0:	4801      	ldr	r0, [pc, #4]	; (8008eb8 <__malloc_unlock+0x8>)
 8008eb2:	f7ff bf68 	b.w	8008d86 <__retarget_lock_release_recursive>
 8008eb6:	bf00      	nop
 8008eb8:	200002e8 	.word	0x200002e8

08008ebc <_realloc_r>:
 8008ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ec0:	4680      	mov	r8, r0
 8008ec2:	4614      	mov	r4, r2
 8008ec4:	460e      	mov	r6, r1
 8008ec6:	b921      	cbnz	r1, 8008ed2 <_realloc_r+0x16>
 8008ec8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ecc:	4611      	mov	r1, r2
 8008ece:	f7ff b80b 	b.w	8007ee8 <_malloc_r>
 8008ed2:	b92a      	cbnz	r2, 8008ee0 <_realloc_r+0x24>
 8008ed4:	f7fe ff9c 	bl	8007e10 <_free_r>
 8008ed8:	4625      	mov	r5, r4
 8008eda:	4628      	mov	r0, r5
 8008edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ee0:	f000 f8fa 	bl	80090d8 <_malloc_usable_size_r>
 8008ee4:	4284      	cmp	r4, r0
 8008ee6:	4607      	mov	r7, r0
 8008ee8:	d802      	bhi.n	8008ef0 <_realloc_r+0x34>
 8008eea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008eee:	d812      	bhi.n	8008f16 <_realloc_r+0x5a>
 8008ef0:	4621      	mov	r1, r4
 8008ef2:	4640      	mov	r0, r8
 8008ef4:	f7fe fff8 	bl	8007ee8 <_malloc_r>
 8008ef8:	4605      	mov	r5, r0
 8008efa:	2800      	cmp	r0, #0
 8008efc:	d0ed      	beq.n	8008eda <_realloc_r+0x1e>
 8008efe:	42bc      	cmp	r4, r7
 8008f00:	4622      	mov	r2, r4
 8008f02:	4631      	mov	r1, r6
 8008f04:	bf28      	it	cs
 8008f06:	463a      	movcs	r2, r7
 8008f08:	f7ff ffa4 	bl	8008e54 <memcpy>
 8008f0c:	4631      	mov	r1, r6
 8008f0e:	4640      	mov	r0, r8
 8008f10:	f7fe ff7e 	bl	8007e10 <_free_r>
 8008f14:	e7e1      	b.n	8008eda <_realloc_r+0x1e>
 8008f16:	4635      	mov	r5, r6
 8008f18:	e7df      	b.n	8008eda <_realloc_r+0x1e>

08008f1a <_raise_r>:
 8008f1a:	291f      	cmp	r1, #31
 8008f1c:	b538      	push	{r3, r4, r5, lr}
 8008f1e:	4604      	mov	r4, r0
 8008f20:	460d      	mov	r5, r1
 8008f22:	d904      	bls.n	8008f2e <_raise_r+0x14>
 8008f24:	2316      	movs	r3, #22
 8008f26:	6003      	str	r3, [r0, #0]
 8008f28:	f04f 30ff 	mov.w	r0, #4294967295
 8008f2c:	bd38      	pop	{r3, r4, r5, pc}
 8008f2e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008f30:	b112      	cbz	r2, 8008f38 <_raise_r+0x1e>
 8008f32:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f36:	b94b      	cbnz	r3, 8008f4c <_raise_r+0x32>
 8008f38:	4620      	mov	r0, r4
 8008f3a:	f000 f831 	bl	8008fa0 <_getpid_r>
 8008f3e:	462a      	mov	r2, r5
 8008f40:	4601      	mov	r1, r0
 8008f42:	4620      	mov	r0, r4
 8008f44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f48:	f000 b818 	b.w	8008f7c <_kill_r>
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d00a      	beq.n	8008f66 <_raise_r+0x4c>
 8008f50:	1c59      	adds	r1, r3, #1
 8008f52:	d103      	bne.n	8008f5c <_raise_r+0x42>
 8008f54:	2316      	movs	r3, #22
 8008f56:	6003      	str	r3, [r0, #0]
 8008f58:	2001      	movs	r0, #1
 8008f5a:	e7e7      	b.n	8008f2c <_raise_r+0x12>
 8008f5c:	2400      	movs	r4, #0
 8008f5e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008f62:	4628      	mov	r0, r5
 8008f64:	4798      	blx	r3
 8008f66:	2000      	movs	r0, #0
 8008f68:	e7e0      	b.n	8008f2c <_raise_r+0x12>
	...

08008f6c <raise>:
 8008f6c:	4b02      	ldr	r3, [pc, #8]	; (8008f78 <raise+0xc>)
 8008f6e:	4601      	mov	r1, r0
 8008f70:	6818      	ldr	r0, [r3, #0]
 8008f72:	f7ff bfd2 	b.w	8008f1a <_raise_r>
 8008f76:	bf00      	nop
 8008f78:	2000000c 	.word	0x2000000c

08008f7c <_kill_r>:
 8008f7c:	b538      	push	{r3, r4, r5, lr}
 8008f7e:	4d07      	ldr	r5, [pc, #28]	; (8008f9c <_kill_r+0x20>)
 8008f80:	2300      	movs	r3, #0
 8008f82:	4604      	mov	r4, r0
 8008f84:	4608      	mov	r0, r1
 8008f86:	4611      	mov	r1, r2
 8008f88:	602b      	str	r3, [r5, #0]
 8008f8a:	f7f7 ffff 	bl	8000f8c <_kill>
 8008f8e:	1c43      	adds	r3, r0, #1
 8008f90:	d102      	bne.n	8008f98 <_kill_r+0x1c>
 8008f92:	682b      	ldr	r3, [r5, #0]
 8008f94:	b103      	cbz	r3, 8008f98 <_kill_r+0x1c>
 8008f96:	6023      	str	r3, [r4, #0]
 8008f98:	bd38      	pop	{r3, r4, r5, pc}
 8008f9a:	bf00      	nop
 8008f9c:	200002ec 	.word	0x200002ec

08008fa0 <_getpid_r>:
 8008fa0:	f7f7 bfec 	b.w	8000f7c <_getpid>

08008fa4 <__sread>:
 8008fa4:	b510      	push	{r4, lr}
 8008fa6:	460c      	mov	r4, r1
 8008fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fac:	f000 f89c 	bl	80090e8 <_read_r>
 8008fb0:	2800      	cmp	r0, #0
 8008fb2:	bfab      	itete	ge
 8008fb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008fb6:	89a3      	ldrhlt	r3, [r4, #12]
 8008fb8:	181b      	addge	r3, r3, r0
 8008fba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008fbe:	bfac      	ite	ge
 8008fc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8008fc2:	81a3      	strhlt	r3, [r4, #12]
 8008fc4:	bd10      	pop	{r4, pc}

08008fc6 <__swrite>:
 8008fc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fca:	461f      	mov	r7, r3
 8008fcc:	898b      	ldrh	r3, [r1, #12]
 8008fce:	05db      	lsls	r3, r3, #23
 8008fd0:	4605      	mov	r5, r0
 8008fd2:	460c      	mov	r4, r1
 8008fd4:	4616      	mov	r6, r2
 8008fd6:	d505      	bpl.n	8008fe4 <__swrite+0x1e>
 8008fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fdc:	2302      	movs	r3, #2
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f000 f868 	bl	80090b4 <_lseek_r>
 8008fe4:	89a3      	ldrh	r3, [r4, #12]
 8008fe6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fee:	81a3      	strh	r3, [r4, #12]
 8008ff0:	4632      	mov	r2, r6
 8008ff2:	463b      	mov	r3, r7
 8008ff4:	4628      	mov	r0, r5
 8008ff6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ffa:	f000 b817 	b.w	800902c <_write_r>

08008ffe <__sseek>:
 8008ffe:	b510      	push	{r4, lr}
 8009000:	460c      	mov	r4, r1
 8009002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009006:	f000 f855 	bl	80090b4 <_lseek_r>
 800900a:	1c43      	adds	r3, r0, #1
 800900c:	89a3      	ldrh	r3, [r4, #12]
 800900e:	bf15      	itete	ne
 8009010:	6560      	strne	r0, [r4, #84]	; 0x54
 8009012:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009016:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800901a:	81a3      	strheq	r3, [r4, #12]
 800901c:	bf18      	it	ne
 800901e:	81a3      	strhne	r3, [r4, #12]
 8009020:	bd10      	pop	{r4, pc}

08009022 <__sclose>:
 8009022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009026:	f000 b813 	b.w	8009050 <_close_r>
	...

0800902c <_write_r>:
 800902c:	b538      	push	{r3, r4, r5, lr}
 800902e:	4d07      	ldr	r5, [pc, #28]	; (800904c <_write_r+0x20>)
 8009030:	4604      	mov	r4, r0
 8009032:	4608      	mov	r0, r1
 8009034:	4611      	mov	r1, r2
 8009036:	2200      	movs	r2, #0
 8009038:	602a      	str	r2, [r5, #0]
 800903a:	461a      	mov	r2, r3
 800903c:	f7f7 ffdd 	bl	8000ffa <_write>
 8009040:	1c43      	adds	r3, r0, #1
 8009042:	d102      	bne.n	800904a <_write_r+0x1e>
 8009044:	682b      	ldr	r3, [r5, #0]
 8009046:	b103      	cbz	r3, 800904a <_write_r+0x1e>
 8009048:	6023      	str	r3, [r4, #0]
 800904a:	bd38      	pop	{r3, r4, r5, pc}
 800904c:	200002ec 	.word	0x200002ec

08009050 <_close_r>:
 8009050:	b538      	push	{r3, r4, r5, lr}
 8009052:	4d06      	ldr	r5, [pc, #24]	; (800906c <_close_r+0x1c>)
 8009054:	2300      	movs	r3, #0
 8009056:	4604      	mov	r4, r0
 8009058:	4608      	mov	r0, r1
 800905a:	602b      	str	r3, [r5, #0]
 800905c:	f7f7 ffe9 	bl	8001032 <_close>
 8009060:	1c43      	adds	r3, r0, #1
 8009062:	d102      	bne.n	800906a <_close_r+0x1a>
 8009064:	682b      	ldr	r3, [r5, #0]
 8009066:	b103      	cbz	r3, 800906a <_close_r+0x1a>
 8009068:	6023      	str	r3, [r4, #0]
 800906a:	bd38      	pop	{r3, r4, r5, pc}
 800906c:	200002ec 	.word	0x200002ec

08009070 <_fstat_r>:
 8009070:	b538      	push	{r3, r4, r5, lr}
 8009072:	4d07      	ldr	r5, [pc, #28]	; (8009090 <_fstat_r+0x20>)
 8009074:	2300      	movs	r3, #0
 8009076:	4604      	mov	r4, r0
 8009078:	4608      	mov	r0, r1
 800907a:	4611      	mov	r1, r2
 800907c:	602b      	str	r3, [r5, #0]
 800907e:	f7f7 ffe4 	bl	800104a <_fstat>
 8009082:	1c43      	adds	r3, r0, #1
 8009084:	d102      	bne.n	800908c <_fstat_r+0x1c>
 8009086:	682b      	ldr	r3, [r5, #0]
 8009088:	b103      	cbz	r3, 800908c <_fstat_r+0x1c>
 800908a:	6023      	str	r3, [r4, #0]
 800908c:	bd38      	pop	{r3, r4, r5, pc}
 800908e:	bf00      	nop
 8009090:	200002ec 	.word	0x200002ec

08009094 <_isatty_r>:
 8009094:	b538      	push	{r3, r4, r5, lr}
 8009096:	4d06      	ldr	r5, [pc, #24]	; (80090b0 <_isatty_r+0x1c>)
 8009098:	2300      	movs	r3, #0
 800909a:	4604      	mov	r4, r0
 800909c:	4608      	mov	r0, r1
 800909e:	602b      	str	r3, [r5, #0]
 80090a0:	f7f7 ffe3 	bl	800106a <_isatty>
 80090a4:	1c43      	adds	r3, r0, #1
 80090a6:	d102      	bne.n	80090ae <_isatty_r+0x1a>
 80090a8:	682b      	ldr	r3, [r5, #0]
 80090aa:	b103      	cbz	r3, 80090ae <_isatty_r+0x1a>
 80090ac:	6023      	str	r3, [r4, #0]
 80090ae:	bd38      	pop	{r3, r4, r5, pc}
 80090b0:	200002ec 	.word	0x200002ec

080090b4 <_lseek_r>:
 80090b4:	b538      	push	{r3, r4, r5, lr}
 80090b6:	4d07      	ldr	r5, [pc, #28]	; (80090d4 <_lseek_r+0x20>)
 80090b8:	4604      	mov	r4, r0
 80090ba:	4608      	mov	r0, r1
 80090bc:	4611      	mov	r1, r2
 80090be:	2200      	movs	r2, #0
 80090c0:	602a      	str	r2, [r5, #0]
 80090c2:	461a      	mov	r2, r3
 80090c4:	f7f7 ffdc 	bl	8001080 <_lseek>
 80090c8:	1c43      	adds	r3, r0, #1
 80090ca:	d102      	bne.n	80090d2 <_lseek_r+0x1e>
 80090cc:	682b      	ldr	r3, [r5, #0]
 80090ce:	b103      	cbz	r3, 80090d2 <_lseek_r+0x1e>
 80090d0:	6023      	str	r3, [r4, #0]
 80090d2:	bd38      	pop	{r3, r4, r5, pc}
 80090d4:	200002ec 	.word	0x200002ec

080090d8 <_malloc_usable_size_r>:
 80090d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090dc:	1f18      	subs	r0, r3, #4
 80090de:	2b00      	cmp	r3, #0
 80090e0:	bfbc      	itt	lt
 80090e2:	580b      	ldrlt	r3, [r1, r0]
 80090e4:	18c0      	addlt	r0, r0, r3
 80090e6:	4770      	bx	lr

080090e8 <_read_r>:
 80090e8:	b538      	push	{r3, r4, r5, lr}
 80090ea:	4d07      	ldr	r5, [pc, #28]	; (8009108 <_read_r+0x20>)
 80090ec:	4604      	mov	r4, r0
 80090ee:	4608      	mov	r0, r1
 80090f0:	4611      	mov	r1, r2
 80090f2:	2200      	movs	r2, #0
 80090f4:	602a      	str	r2, [r5, #0]
 80090f6:	461a      	mov	r2, r3
 80090f8:	f7f7 ff62 	bl	8000fc0 <_read>
 80090fc:	1c43      	adds	r3, r0, #1
 80090fe:	d102      	bne.n	8009106 <_read_r+0x1e>
 8009100:	682b      	ldr	r3, [r5, #0]
 8009102:	b103      	cbz	r3, 8009106 <_read_r+0x1e>
 8009104:	6023      	str	r3, [r4, #0]
 8009106:	bd38      	pop	{r3, r4, r5, pc}
 8009108:	200002ec 	.word	0x200002ec

0800910c <_init>:
 800910c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800910e:	bf00      	nop
 8009110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009112:	bc08      	pop	{r3}
 8009114:	469e      	mov	lr, r3
 8009116:	4770      	bx	lr

08009118 <_fini>:
 8009118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800911a:	bf00      	nop
 800911c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800911e:	bc08      	pop	{r3}
 8009120:	469e      	mov	lr, r3
 8009122:	4770      	bx	lr
