
NUCLEO-G474RE-AEI_Base_TP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007694  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f0  08007874  08007874  00017874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e64  08007e64  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007e64  08007e64  00017e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e6c  08007e6c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e6c  08007e6c  00017e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e70  08007e70  00017e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007e74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  20000070  08007ee4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08007ee4  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001679a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e7c  00000000  00000000  0003683a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d8  00000000  00000000  000396b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001090  00000000  00000000  0003a890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028225  00000000  00000000  0003b920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016225  00000000  00000000  00063b45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd575  00000000  00000000  00079d6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001772df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055c0  00000000  00000000  00177330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800785c 	.word	0x0800785c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	0800785c 	.word	0x0800785c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fa:	4b33      	ldr	r3, [pc, #204]	; (80006c8 <MX_GPIO_Init+0xe4>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fe:	4a32      	ldr	r2, [pc, #200]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000600:	f043 0304 	orr.w	r3, r3, #4
 8000604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000606:	4b30      	ldr	r3, [pc, #192]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060a:	f003 0304 	and.w	r3, r3, #4
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000612:	4b2d      	ldr	r3, [pc, #180]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000616:	4a2c      	ldr	r2, [pc, #176]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000618:	f043 0320 	orr.w	r3, r3, #32
 800061c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800061e:	4b2a      	ldr	r3, [pc, #168]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000622:	f003 0320 	and.w	r3, r3, #32
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	4b27      	ldr	r3, [pc, #156]	; (80006c8 <MX_GPIO_Init+0xe4>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062e:	4a26      	ldr	r2, [pc, #152]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000636:	4b24      	ldr	r3, [pc, #144]	; (80006c8 <MX_GPIO_Init+0xe4>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	2108      	movs	r1, #8
 8000646:	4821      	ldr	r0, [pc, #132]	; (80006cc <MX_GPIO_Init+0xe8>)
 8000648:	f001 f9ce 	bl	80019e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2120      	movs	r1, #32
 8000650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000654:	f001 f9c8 	bl	80019e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000658:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800065c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800065e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000662:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	4619      	mov	r1, r3
 800066e:	4817      	ldr	r0, [pc, #92]	; (80006cc <MX_GPIO_Init+0xe8>)
 8000670:	f001 f838 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ISO_RESET_Pin;
 8000674:	2308      	movs	r3, #8
 8000676:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000678:	2301      	movs	r3, #1
 800067a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000680:	2300      	movs	r3, #0
 8000682:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ISO_RESET_GPIO_Port, &GPIO_InitStruct);
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	4619      	mov	r1, r3
 800068a:	4810      	ldr	r0, [pc, #64]	; (80006cc <MX_GPIO_Init+0xe8>)
 800068c:	f001 f82a 	bl	80016e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000690:	2320      	movs	r3, #32
 8000692:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000694:	2301      	movs	r3, #1
 8000696:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069c:	2300      	movs	r3, #0
 800069e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	4619      	mov	r1, r3
 80006a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006aa:	f001 f81b 	bl	80016e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2100      	movs	r1, #0
 80006b2:	2028      	movs	r0, #40	; 0x28
 80006b4:	f000 ff2e 	bl	8001514 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006b8:	2028      	movs	r0, #40	; 0x28
 80006ba:	f000 ff45 	bl	8001548 <HAL_NVIC_EnableIRQ>

}
 80006be:	bf00      	nop
 80006c0:	3720      	adds	r7, #32
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40021000 	.word	0x40021000
 80006cc:	48000800 	.word	0x48000800

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d4:	f000 fe0d 	bl	80012f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d8:	f000 f828 	bl	800072c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006dc:	f7ff ff82 	bl	80005e4 <MX_GPIO_Init>
  MX_TIM1_Init();
 80006e0:	f000 fc08 	bl	8000ef4 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80006e4:	f000 fd30 	bl	8001148 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80006e8:	2201      	movs	r2, #1
 80006ea:	490d      	ldr	r1, [pc, #52]	; (8000720 <main+0x50>)
 80006ec:	480d      	ldr	r0, [pc, #52]	; (8000724 <main+0x54>)
 80006ee:	f003 fe1d 	bl	800432c <HAL_UART_Receive_IT>
	HAL_Delay(1);
 80006f2:	2001      	movs	r0, #1
 80006f4:	f000 fe34 	bl	8001360 <HAL_Delay>
	shellInit();
 80006f8:	f000 f898 	bl	800082c <shellInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		// SuperLoop inside the while(1), only flag changed from interrupt could launch functions
		if(uartRxReceived){
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <main+0x58>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d0fb      	beq.n	80006fc <main+0x2c>
			if(shellGetChar()){
 8000704:	f000 f8ca 	bl	800089c <shellGetChar>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d003      	beq.n	8000716 <main+0x46>
				shellExec();
 800070e:	f000 f939 	bl	8000984 <shellExec>
				shellPrompt();
 8000712:	f000 f8a3 	bl	800085c <shellPrompt>
			}
			uartRxReceived = 0;
 8000716:	4b04      	ldr	r3, [pc, #16]	; (8000728 <main+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	701a      	strb	r2, [r3, #0]
		if(uartRxReceived){
 800071c:	e7ee      	b.n	80006fc <main+0x2c>
 800071e:	bf00      	nop
 8000720:	20000198 	.word	0x20000198
 8000724:	200001e0 	.word	0x200001e0
 8000728:	20000194 	.word	0x20000194

0800072c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b094      	sub	sp, #80	; 0x50
 8000730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000732:	f107 0318 	add.w	r3, r7, #24
 8000736:	2238      	movs	r2, #56	; 0x38
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f005 fdb4 	bl	80062a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800074e:	2000      	movs	r0, #0
 8000750:	f001 f9a0 	bl	8001a94 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000754:	2301      	movs	r3, #1
 8000756:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000758:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800075c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075e:	2302      	movs	r3, #2
 8000760:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000762:	2303      	movs	r3, #3
 8000764:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000766:	2306      	movs	r3, #6
 8000768:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800076a:	2355      	movs	r3, #85	; 0x55
 800076c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800076e:	2302      	movs	r3, #2
 8000770:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000772:	2302      	movs	r3, #2
 8000774:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000776:	2302      	movs	r3, #2
 8000778:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077a:	f107 0318 	add.w	r3, r7, #24
 800077e:	4618      	mov	r0, r3
 8000780:	f001 fa3c 	bl	8001bfc <HAL_RCC_OscConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800078a:	f000 f82b 	bl	80007e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078e:	230f      	movs	r3, #15
 8000790:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000792:	2303      	movs	r3, #3
 8000794:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	2104      	movs	r1, #4
 80007a6:	4618      	mov	r0, r3
 80007a8:	f001 fd40 	bl	800222c <HAL_RCC_ClockConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80007b2:	f000 f817 	bl	80007e4 <Error_Handler>
  }
}
 80007b6:	bf00      	nop
 80007b8:	3750      	adds	r7, #80	; 0x50
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
	...

080007c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a04      	ldr	r2, [pc, #16]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d101      	bne.n	80007d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007d2:	f000 fda7 	bl	8001324 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40001000 	.word	0x40001000

080007e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e8:	b672      	cpsid	i
}
 80007ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80007ec:	e7fe      	b.n	80007ec <Error_Handler+0x8>

080007ee <motorPowerOn>:

/**
  * @brief  Switch on the motor driver
  * @retval None
  */
void motorPowerOn(void){
 80007ee:	b580      	push	{r7, lr}
 80007f0:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // just for test, you can delete it
 80007f2:	2120      	movs	r1, #32
 80007f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f8:	f001 f90e 	bl	8001a18 <HAL_GPIO_TogglePin>
}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}

08000800 <motorPowerOff>:

/**
  * @brief  Switch off the motor driver
  * @retval None
  */
void motorPowerOff(void){
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // just for test, you can delete it
 8000804:	2120      	movs	r1, #32
 8000806:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080a:	f001 f905 	bl	8001a18 <HAL_GPIO_TogglePin>
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}

08000812 <motorSetSpeed>:
/**
  * @brief  Set the motor speed
  * @param  speed : target speed of the motor
  * @retval None
  */
void motorSetSpeed(int speed){
 8000812:	b580      	push	{r7, lr}
 8000814:	b082      	sub	sp, #8
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // just for test, you can delete it
 800081a:	2120      	movs	r1, #32
 800081c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000820:	f001 f8fa 	bl	8001a18 <HAL_GPIO_TogglePin>
}
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <shellInit>:

/**
  * @brief  Send a stating message
  * @retval None
  */
void shellInit(void){
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 8000830:	f04f 33ff 	mov.w	r3, #4294967295
 8000834:	226c      	movs	r2, #108	; 0x6c
 8000836:	4906      	ldr	r1, [pc, #24]	; (8000850 <shellInit+0x24>)
 8000838:	4806      	ldr	r0, [pc, #24]	; (8000854 <shellInit+0x28>)
 800083a:	f003 fce1 	bl	8004200 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 800083e:	f04f 33ff 	mov.w	r3, #4294967295
 8000842:	221a      	movs	r2, #26
 8000844:	4904      	ldr	r1, [pc, #16]	; (8000858 <shellInit+0x2c>)
 8000846:	4803      	ldr	r0, [pc, #12]	; (8000854 <shellInit+0x28>)
 8000848:	f003 fcda 	bl	8004200 <HAL_UART_Transmit>
}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	080078e8 	.word	0x080078e8
 8000854:	200001e0 	.word	0x200001e0
 8000858:	080078cc 	.word	0x080078cc

0800085c <shellPrompt>:

/**
  * @brief  Send the prompt
  * @retval None
  */
void shellPrompt(void){
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000860:	f04f 33ff 	mov.w	r3, #4294967295
 8000864:	221a      	movs	r2, #26
 8000866:	4903      	ldr	r1, [pc, #12]	; (8000874 <shellPrompt+0x18>)
 8000868:	4803      	ldr	r0, [pc, #12]	; (8000878 <shellPrompt+0x1c>)
 800086a:	f003 fcc9 	bl	8004200 <HAL_UART_Transmit>
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	080078cc 	.word	0x080078cc
 8000878:	200001e0 	.word	0x200001e0

0800087c <shellCmdNotFound>:

/**
  * @brief  Send the default message if the command is not found
  * @retval None
  */
void shellCmdNotFound(void){
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000880:	f04f 33ff 	mov.w	r3, #4294967295
 8000884:	2214      	movs	r2, #20
 8000886:	4903      	ldr	r1, [pc, #12]	; (8000894 <shellCmdNotFound+0x18>)
 8000888:	4803      	ldr	r0, [pc, #12]	; (8000898 <shellCmdNotFound+0x1c>)
 800088a:	f003 fcb9 	bl	8004200 <HAL_UART_Transmit>
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	08007bc8 	.word	0x08007bc8
 8000898:	200001e0 	.word	0x200001e0

0800089c <shellGetChar>:

/**
  * @brief  Function called for saving the new character and call and setup argc and argv variable if ENTER is pressed
  * @retval 1 if a new command is available, 0 if not.
  */
uint8_t shellGetChar(void){
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
	uint8_t newCmdReady = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	71fb      	strb	r3, [r7, #7]
	char* token;

	switch(uartRxBuffer[0]){
 80008a6:	4b2f      	ldr	r3, [pc, #188]	; (8000964 <shellGetChar+0xc8>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b08      	cmp	r3, #8
 80008ac:	d030      	beq.n	8000910 <shellGetChar+0x74>
 80008ae:	2b0d      	cmp	r3, #13
 80008b0:	d140      	bne.n	8000934 <shellGetChar+0x98>
		// If Enter, update argc and argv
	case ASCII_CR:
		HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 80008b2:	f04f 33ff 	mov.w	r3, #4294967295
 80008b6:	2203      	movs	r2, #3
 80008b8:	492b      	ldr	r1, [pc, #172]	; (8000968 <shellGetChar+0xcc>)
 80008ba:	482c      	ldr	r0, [pc, #176]	; (800096c <shellGetChar+0xd0>)
 80008bc:	f003 fca0 	bl	8004200 <HAL_UART_Transmit>
		cmdBuffer[idxCmd] = '\0';
 80008c0:	4b2b      	ldr	r3, [pc, #172]	; (8000970 <shellGetChar+0xd4>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	461a      	mov	r2, r3
 80008c6:	4b2b      	ldr	r3, [pc, #172]	; (8000974 <shellGetChar+0xd8>)
 80008c8:	2100      	movs	r1, #0
 80008ca:	5499      	strb	r1, [r3, r2]
		argc = 0;
 80008cc:	4b2a      	ldr	r3, [pc, #168]	; (8000978 <shellGetChar+0xdc>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	701a      	strb	r2, [r3, #0]
		token = (char*)strtok(cmdBuffer, " ");
 80008d2:	492a      	ldr	r1, [pc, #168]	; (800097c <shellGetChar+0xe0>)
 80008d4:	4827      	ldr	r0, [pc, #156]	; (8000974 <shellGetChar+0xd8>)
 80008d6:	f005 fd23 	bl	8006320 <strtok>
 80008da:	6038      	str	r0, [r7, #0]
		while(token!=NULL){
 80008dc:	e00f      	b.n	80008fe <shellGetChar+0x62>
			argv[argc++] = token;
 80008de:	4b26      	ldr	r3, [pc, #152]	; (8000978 <shellGetChar+0xdc>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	1c5a      	adds	r2, r3, #1
 80008e4:	b2d1      	uxtb	r1, r2
 80008e6:	4a24      	ldr	r2, [pc, #144]	; (8000978 <shellGetChar+0xdc>)
 80008e8:	7011      	strb	r1, [r2, #0]
 80008ea:	4619      	mov	r1, r3
 80008ec:	4a24      	ldr	r2, [pc, #144]	; (8000980 <shellGetChar+0xe4>)
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			token = (char*)strtok(NULL, " ");
 80008f4:	4921      	ldr	r1, [pc, #132]	; (800097c <shellGetChar+0xe0>)
 80008f6:	2000      	movs	r0, #0
 80008f8:	f005 fd12 	bl	8006320 <strtok>
 80008fc:	6038      	str	r0, [r7, #0]
		while(token!=NULL){
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d1ec      	bne.n	80008de <shellGetChar+0x42>
		}

		idxCmd = 0;
 8000904:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <shellGetChar+0xd4>)
 8000906:	2200      	movs	r2, #0
 8000908:	701a      	strb	r2, [r3, #0]
		newCmdReady = 1;
 800090a:	2301      	movs	r3, #1
 800090c:	71fb      	strb	r3, [r7, #7]
		break;
 800090e:	e023      	b.n	8000958 <shellGetChar+0xbc>
		// Delete last character if "return" is pressed
	case ASCII_BS:
		cmdBuffer[idxCmd--] = '\0';
 8000910:	4b17      	ldr	r3, [pc, #92]	; (8000970 <shellGetChar+0xd4>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	1e5a      	subs	r2, r3, #1
 8000916:	b2d1      	uxtb	r1, r2
 8000918:	4a15      	ldr	r2, [pc, #84]	; (8000970 <shellGetChar+0xd4>)
 800091a:	7011      	strb	r1, [r2, #0]
 800091c:	461a      	mov	r2, r3
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <shellGetChar+0xd8>)
 8000920:	2100      	movs	r1, #0
 8000922:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart2, uartRxBuffer, 1, HAL_MAX_DELAY);
 8000924:	f04f 33ff 	mov.w	r3, #4294967295
 8000928:	2201      	movs	r2, #1
 800092a:	490e      	ldr	r1, [pc, #56]	; (8000964 <shellGetChar+0xc8>)
 800092c:	480f      	ldr	r0, [pc, #60]	; (800096c <shellGetChar+0xd0>)
 800092e:	f003 fc67 	bl	8004200 <HAL_UART_Transmit>
		break;
 8000932:	e011      	b.n	8000958 <shellGetChar+0xbc>
		// Default state : add new character to the command buffer
	default:
		cmdBuffer[idxCmd++] = uartRxBuffer[0];
 8000934:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <shellGetChar+0xd4>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	1c5a      	adds	r2, r3, #1
 800093a:	b2d1      	uxtb	r1, r2
 800093c:	4a0c      	ldr	r2, [pc, #48]	; (8000970 <shellGetChar+0xd4>)
 800093e:	7011      	strb	r1, [r2, #0]
 8000940:	461a      	mov	r2, r3
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <shellGetChar+0xc8>)
 8000944:	7819      	ldrb	r1, [r3, #0]
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <shellGetChar+0xd8>)
 8000948:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart2, uartRxBuffer, 1, HAL_MAX_DELAY);
 800094a:	f04f 33ff 	mov.w	r3, #4294967295
 800094e:	2201      	movs	r2, #1
 8000950:	4904      	ldr	r1, [pc, #16]	; (8000964 <shellGetChar+0xc8>)
 8000952:	4806      	ldr	r0, [pc, #24]	; (800096c <shellGetChar+0xd0>)
 8000954:	f003 fc54 	bl	8004200 <HAL_UART_Transmit>
	}

	return newCmdReady;
 8000958:	79fb      	ldrb	r3, [r7, #7]
}
 800095a:	4618      	mov	r0, r3
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000198 	.word	0x20000198
 8000968:	08007954 	.word	0x08007954
 800096c:	200001e0 	.word	0x200001e0
 8000970:	200000cc 	.word	0x200000cc
 8000974:	2000008c 	.word	0x2000008c
 8000978:	200000f4 	.word	0x200000f4
 800097c:	08007874 	.word	0x08007874
 8000980:	200000d0 	.word	0x200000d0

08000984 <shellExec>:

/**
  * @brief  Call function depends of the value of argc and argv
  * @retval None
  */
void shellExec(void){
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
	if(strcmp(argv[0],"set")==0){
 8000988:	4b6c      	ldr	r3, [pc, #432]	; (8000b3c <shellExec+0x1b8>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	496c      	ldr	r1, [pc, #432]	; (8000b40 <shellExec+0x1bc>)
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff fc46 	bl	8000220 <strcmp>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d16f      	bne.n	8000a7a <shellExec+0xf6>
		if(strcmp(argv[1],"PA5")==0 && ((strcmp(argv[2],"0")==0)||(strcmp(argv[2],"1")==0)) ){
 800099a:	4b68      	ldr	r3, [pc, #416]	; (8000b3c <shellExec+0x1b8>)
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	4969      	ldr	r1, [pc, #420]	; (8000b44 <shellExec+0x1c0>)
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff fc3d 	bl	8000220 <strcmp>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d137      	bne.n	8000a1c <shellExec+0x98>
 80009ac:	4b63      	ldr	r3, [pc, #396]	; (8000b3c <shellExec+0x1b8>)
 80009ae:	689b      	ldr	r3, [r3, #8]
 80009b0:	4965      	ldr	r1, [pc, #404]	; (8000b48 <shellExec+0x1c4>)
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fc34 	bl	8000220 <strcmp>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d008      	beq.n	80009d0 <shellExec+0x4c>
 80009be:	4b5f      	ldr	r3, [pc, #380]	; (8000b3c <shellExec+0x1b8>)
 80009c0:	689b      	ldr	r3, [r3, #8]
 80009c2:	4962      	ldr	r1, [pc, #392]	; (8000b4c <shellExec+0x1c8>)
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fc2b 	bl	8000220 <strcmp>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d125      	bne.n	8000a1c <shellExec+0x98>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, atoi(argv[2]));
 80009d0:	4b5a      	ldr	r3, [pc, #360]	; (8000b3c <shellExec+0x1b8>)
 80009d2:	689b      	ldr	r3, [r3, #8]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f005 fc39 	bl	800624c <atoi>
 80009da:	4603      	mov	r3, r0
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	461a      	mov	r2, r3
 80009e0:	2120      	movs	r1, #32
 80009e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e6:	f000 ffff 	bl	80019e8 <HAL_GPIO_WritePin>
			stringSize = snprintf((char*)uartTxBuffer,UART_TX_BUFFER_SIZE,"Switch on/off led : %d\r\n",atoi(argv[2]));
 80009ea:	4b54      	ldr	r3, [pc, #336]	; (8000b3c <shellExec+0x1b8>)
 80009ec:	689b      	ldr	r3, [r3, #8]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f005 fc2c 	bl	800624c <atoi>
 80009f4:	4603      	mov	r3, r0
 80009f6:	4a56      	ldr	r2, [pc, #344]	; (8000b50 <shellExec+0x1cc>)
 80009f8:	2140      	movs	r1, #64	; 0x40
 80009fa:	4856      	ldr	r0, [pc, #344]	; (8000b54 <shellExec+0x1d0>)
 80009fc:	f005 fc5c 	bl	80062b8 <sniprintf>
 8000a00:	4603      	mov	r3, r0
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	4b54      	ldr	r3, [pc, #336]	; (8000b58 <shellExec+0x1d4>)
 8000a06:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, uartTxBuffer, stringSize, HAL_MAX_DELAY);
 8000a08:	4b53      	ldr	r3, [pc, #332]	; (8000b58 <shellExec+0x1d4>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	b29a      	uxth	r2, r3
 8000a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a12:	4950      	ldr	r1, [pc, #320]	; (8000b54 <shellExec+0x1d0>)
 8000a14:	4851      	ldr	r0, [pc, #324]	; (8000b5c <shellExec+0x1d8>)
 8000a16:	f003 fbf3 	bl	8004200 <HAL_UART_Transmit>
 8000a1a:	e08d      	b.n	8000b38 <shellExec+0x1b4>
		}
		else if(strcmp(argv[1],"speed")==0){
 8000a1c:	4b47      	ldr	r3, [pc, #284]	; (8000b3c <shellExec+0x1b8>)
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	494f      	ldr	r1, [pc, #316]	; (8000b60 <shellExec+0x1dc>)
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff fbfc 	bl	8000220 <strcmp>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d122      	bne.n	8000a74 <shellExec+0xf0>
			if(atoi(argv[2])==0 && strcmp(argv[2],"0")!=0){
 8000a2e:	4b43      	ldr	r3, [pc, #268]	; (8000b3c <shellExec+0x1b8>)
 8000a30:	689b      	ldr	r3, [r3, #8]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f005 fc0a 	bl	800624c <atoi>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d110      	bne.n	8000a60 <shellExec+0xdc>
 8000a3e:	4b3f      	ldr	r3, [pc, #252]	; (8000b3c <shellExec+0x1b8>)
 8000a40:	689b      	ldr	r3, [r3, #8]
 8000a42:	4941      	ldr	r1, [pc, #260]	; (8000b48 <shellExec+0x1c4>)
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff fbeb 	bl	8000220 <strcmp>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d007      	beq.n	8000a60 <shellExec+0xdc>
				HAL_UART_Transmit(&huart2, motorSpeedInst, sizeof(motorSpeedInst), HAL_MAX_DELAY);
 8000a50:	f04f 33ff 	mov.w	r3, #4294967295
 8000a54:	2230      	movs	r2, #48	; 0x30
 8000a56:	4943      	ldr	r1, [pc, #268]	; (8000b64 <shellExec+0x1e0>)
 8000a58:	4840      	ldr	r0, [pc, #256]	; (8000b5c <shellExec+0x1d8>)
 8000a5a:	f003 fbd1 	bl	8004200 <HAL_UART_Transmit>
 8000a5e:	e06b      	b.n	8000b38 <shellExec+0x1b4>
			}
			else{
				motorSetSpeed(atoi(argv[2]));
 8000a60:	4b36      	ldr	r3, [pc, #216]	; (8000b3c <shellExec+0x1b8>)
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f005 fbf1 	bl	800624c <atoi>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff fed0 	bl	8000812 <motorSetSpeed>
		motorPowerOff();
	}
	else{
		shellCmdNotFound();
	}
}
 8000a72:	e061      	b.n	8000b38 <shellExec+0x1b4>
			shellCmdNotFound();
 8000a74:	f7ff ff02 	bl	800087c <shellCmdNotFound>
}
 8000a78:	e05e      	b.n	8000b38 <shellExec+0x1b4>
	else if(strcmp(argv[0],"help")==0)
 8000a7a:	4b30      	ldr	r3, [pc, #192]	; (8000b3c <shellExec+0x1b8>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	493a      	ldr	r1, [pc, #232]	; (8000b68 <shellExec+0x1e4>)
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff fbcd 	bl	8000220 <strcmp>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d108      	bne.n	8000a9e <shellExec+0x11a>
		HAL_UART_Transmit(&huart2, help, sizeof(help), HAL_MAX_DELAY);
 8000a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a90:	f44f 7281 	mov.w	r2, #258	; 0x102
 8000a94:	4935      	ldr	r1, [pc, #212]	; (8000b6c <shellExec+0x1e8>)
 8000a96:	4831      	ldr	r0, [pc, #196]	; (8000b5c <shellExec+0x1d8>)
 8000a98:	f003 fbb2 	bl	8004200 <HAL_UART_Transmit>
}
 8000a9c:	e04c      	b.n	8000b38 <shellExec+0x1b4>
	else if(strcmp(argv[0],"pinout")==0)
 8000a9e:	4b27      	ldr	r3, [pc, #156]	; (8000b3c <shellExec+0x1b8>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4933      	ldr	r1, [pc, #204]	; (8000b70 <shellExec+0x1ec>)
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fbbb 	bl	8000220 <strcmp>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d108      	bne.n	8000ac2 <shellExec+0x13e>
		HAL_UART_Transmit(&huart2, pinout, sizeof(pinout), HAL_MAX_DELAY);
 8000ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab4:	f44f 7281 	mov.w	r2, #258	; 0x102
 8000ab8:	492e      	ldr	r1, [pc, #184]	; (8000b74 <shellExec+0x1f0>)
 8000aba:	4828      	ldr	r0, [pc, #160]	; (8000b5c <shellExec+0x1d8>)
 8000abc:	f003 fba0 	bl	8004200 <HAL_UART_Transmit>
}
 8000ac0:	e03a      	b.n	8000b38 <shellExec+0x1b4>
	else if((strcmp(argv[0],"power")==0)&&(strcmp(argv[1],"on")==0))
 8000ac2:	4b1e      	ldr	r3, [pc, #120]	; (8000b3c <shellExec+0x1b8>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	492c      	ldr	r1, [pc, #176]	; (8000b78 <shellExec+0x1f4>)
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fba9 	bl	8000220 <strcmp>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d112      	bne.n	8000afa <shellExec+0x176>
 8000ad4:	4b19      	ldr	r3, [pc, #100]	; (8000b3c <shellExec+0x1b8>)
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	4928      	ldr	r1, [pc, #160]	; (8000b7c <shellExec+0x1f8>)
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff fba0 	bl	8000220 <strcmp>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d109      	bne.n	8000afa <shellExec+0x176>
		HAL_UART_Transmit(&huart2, powerOn, sizeof(powerOn), HAL_MAX_DELAY);
 8000ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aea:	221a      	movs	r2, #26
 8000aec:	4924      	ldr	r1, [pc, #144]	; (8000b80 <shellExec+0x1fc>)
 8000aee:	481b      	ldr	r0, [pc, #108]	; (8000b5c <shellExec+0x1d8>)
 8000af0:	f003 fb86 	bl	8004200 <HAL_UART_Transmit>
		motorPowerOn();
 8000af4:	f7ff fe7b 	bl	80007ee <motorPowerOn>
 8000af8:	e01e      	b.n	8000b38 <shellExec+0x1b4>
	else if((strcmp(argv[0],"power")==0)&&(strcmp(argv[1],"off")==0))
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <shellExec+0x1b8>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	491e      	ldr	r1, [pc, #120]	; (8000b78 <shellExec+0x1f4>)
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff fb8d 	bl	8000220 <strcmp>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d112      	bne.n	8000b32 <shellExec+0x1ae>
 8000b0c:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <shellExec+0x1b8>)
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	491c      	ldr	r1, [pc, #112]	; (8000b84 <shellExec+0x200>)
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fb84 	bl	8000220 <strcmp>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d109      	bne.n	8000b32 <shellExec+0x1ae>
		HAL_UART_Transmit(&huart2, powerOff, sizeof(powerOff), HAL_MAX_DELAY);
 8000b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b22:	221b      	movs	r2, #27
 8000b24:	4918      	ldr	r1, [pc, #96]	; (8000b88 <shellExec+0x204>)
 8000b26:	480d      	ldr	r0, [pc, #52]	; (8000b5c <shellExec+0x1d8>)
 8000b28:	f003 fb6a 	bl	8004200 <HAL_UART_Transmit>
		motorPowerOff();
 8000b2c:	f7ff fe68 	bl	8000800 <motorPowerOff>
 8000b30:	e002      	b.n	8000b38 <shellExec+0x1b4>
		shellCmdNotFound();
 8000b32:	f7ff fea3 	bl	800087c <shellCmdNotFound>
}
 8000b36:	e7ff      	b.n	8000b38 <shellExec+0x1b4>
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	200000d0 	.word	0x200000d0
 8000b40:	08007878 	.word	0x08007878
 8000b44:	0800787c 	.word	0x0800787c
 8000b48:	08007880 	.word	0x08007880
 8000b4c:	08007884 	.word	0x08007884
 8000b50:	08007888 	.word	0x08007888
 8000b54:	2000019c 	.word	0x2000019c
 8000b58:	200001dc 	.word	0x200001dc
 8000b5c:	200001e0 	.word	0x200001e0
 8000b60:	080078a4 	.word	0x080078a4
 8000b64:	08007b98 	.word	0x08007b98
 8000b68:	080078ac 	.word	0x080078ac
 8000b6c:	08007958 	.word	0x08007958
 8000b70:	080078b4 	.word	0x080078b4
 8000b74:	08007a5c 	.word	0x08007a5c
 8000b78:	080078bc 	.word	0x080078bc
 8000b7c:	080078c4 	.word	0x080078c4
 8000b80:	08007b60 	.word	0x08007b60
 8000b84:	080078c8 	.word	0x080078c8
 8000b88:	08007b7c 	.word	0x08007b7c

08000b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b92:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <HAL_MspInit+0x44>)
 8000b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b96:	4a0e      	ldr	r2, [pc, #56]	; (8000bd0 <HAL_MspInit+0x44>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <HAL_MspInit+0x44>)
 8000ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <HAL_MspInit+0x44>)
 8000bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bae:	4a08      	ldr	r2, [pc, #32]	; (8000bd0 <HAL_MspInit+0x44>)
 8000bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb4:	6593      	str	r3, [r2, #88]	; 0x58
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_MspInit+0x44>)
 8000bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000bc2:	f001 f80b 	bl	8001bdc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08c      	sub	sp, #48	; 0x30
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000be4:	2300      	movs	r3, #0
 8000be6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000bea:	4b2d      	ldr	r3, [pc, #180]	; (8000ca0 <HAL_InitTick+0xcc>)
 8000bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bee:	4a2c      	ldr	r2, [pc, #176]	; (8000ca0 <HAL_InitTick+0xcc>)
 8000bf0:	f043 0310 	orr.w	r3, r3, #16
 8000bf4:	6593      	str	r3, [r2, #88]	; 0x58
 8000bf6:	4b2a      	ldr	r3, [pc, #168]	; (8000ca0 <HAL_InitTick+0xcc>)
 8000bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bfa:	f003 0310 	and.w	r3, r3, #16
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c02:	f107 020c 	add.w	r2, r7, #12
 8000c06:	f107 0310 	add.w	r3, r7, #16
 8000c0a:	4611      	mov	r1, r2
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f001 fce3 	bl	80025d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c12:	f001 fcb5 	bl	8002580 <HAL_RCC_GetPCLK1Freq>
 8000c16:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c1a:	4a22      	ldr	r2, [pc, #136]	; (8000ca4 <HAL_InitTick+0xd0>)
 8000c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c20:	0c9b      	lsrs	r3, r3, #18
 8000c22:	3b01      	subs	r3, #1
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c26:	4b20      	ldr	r3, [pc, #128]	; (8000ca8 <HAL_InitTick+0xd4>)
 8000c28:	4a20      	ldr	r2, [pc, #128]	; (8000cac <HAL_InitTick+0xd8>)
 8000c2a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ca8 <HAL_InitTick+0xd4>)
 8000c2e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c32:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c34:	4a1c      	ldr	r2, [pc, #112]	; (8000ca8 <HAL_InitTick+0xd4>)
 8000c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c38:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ca8 <HAL_InitTick+0xd4>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c40:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <HAL_InitTick+0xd4>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000c46:	4818      	ldr	r0, [pc, #96]	; (8000ca8 <HAL_InitTick+0xd4>)
 8000c48:	f001 ff8c 	bl	8002b64 <HAL_TIM_Base_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000c52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d11b      	bne.n	8000c92 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c5a:	4813      	ldr	r0, [pc, #76]	; (8000ca8 <HAL_InitTick+0xd4>)
 8000c5c:	f001 ffda 	bl	8002c14 <HAL_TIM_Base_Start_IT>
 8000c60:	4603      	mov	r3, r0
 8000c62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000c66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d111      	bne.n	8000c92 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c6e:	2036      	movs	r0, #54	; 0x36
 8000c70:	f000 fc6a 	bl	8001548 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b0f      	cmp	r3, #15
 8000c78:	d808      	bhi.n	8000c8c <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	6879      	ldr	r1, [r7, #4]
 8000c7e:	2036      	movs	r0, #54	; 0x36
 8000c80:	f000 fc48 	bl	8001514 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c84:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <HAL_InitTick+0xdc>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6013      	str	r3, [r2, #0]
 8000c8a:	e002      	b.n	8000c92 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3730      	adds	r7, #48	; 0x30
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	431bde83 	.word	0x431bde83
 8000ca8:	200000f8 	.word	0x200000f8
 8000cac:	40001000 	.word	0x40001000
 8000cb0:	20000004 	.word	0x20000004

08000cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <NMI_Handler+0x4>

08000cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <HardFault_Handler+0x4>

08000cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <MemManage_Handler+0x4>

08000cc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <BusFault_Handler+0x4>

08000ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <UsageFault_Handler+0x4>

08000cd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
	...

08000d0c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d10:	4802      	ldr	r0, [pc, #8]	; (8000d1c <USART2_IRQHandler+0x10>)
 8000d12:	f003 fb61 	bl	80043d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	200001e0 	.word	0x200001e0

08000d20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8000d24:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d28:	f000 fe90 	bl	8001a4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d34:	4802      	ldr	r0, [pc, #8]	; (8000d40 <TIM6_DAC_IRQHandler+0x10>)
 8000d36:	f002 f846 	bl	8002dc6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200000f8 	.word	0x200000f8

08000d44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
	return 1;
 8000d48:	2301      	movs	r3, #1
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <_kill>:

int _kill(int pid, int sig)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d5e:	f005 fa79 	bl	8006254 <__errno>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2216      	movs	r2, #22
 8000d66:	601a      	str	r2, [r3, #0]
	return -1;
 8000d68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <_exit>:

void _exit (int status)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f7ff ffe7 	bl	8000d54 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d86:	e7fe      	b.n	8000d86 <_exit+0x12>

08000d88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	e00a      	b.n	8000db0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d9a:	f3af 8000 	nop.w
 8000d9e:	4601      	mov	r1, r0
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	1c5a      	adds	r2, r3, #1
 8000da4:	60ba      	str	r2, [r7, #8]
 8000da6:	b2ca      	uxtb	r2, r1
 8000da8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	3301      	adds	r3, #1
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	697a      	ldr	r2, [r7, #20]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	dbf0      	blt.n	8000d9a <_read+0x12>
	}

return len;
 8000db8:	687b      	ldr	r3, [r7, #4]
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3718      	adds	r7, #24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b086      	sub	sp, #24
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	60f8      	str	r0, [r7, #12]
 8000dca:	60b9      	str	r1, [r7, #8]
 8000dcc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
 8000dd2:	e009      	b.n	8000de8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	1c5a      	adds	r2, r3, #1
 8000dd8:	60ba      	str	r2, [r7, #8]
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	3301      	adds	r3, #1
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	697a      	ldr	r2, [r7, #20]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	dbf1      	blt.n	8000dd4 <_write+0x12>
	}
	return len;
 8000df0:	687b      	ldr	r3, [r7, #4]
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3718      	adds	r7, #24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <_close>:

int _close(int file)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	b083      	sub	sp, #12
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
	return -1;
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e12:	b480      	push	{r7}
 8000e14:	b083      	sub	sp, #12
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
 8000e1a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e22:	605a      	str	r2, [r3, #4]
	return 0;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <_isatty>:

int _isatty(int file)
{
 8000e32:	b480      	push	{r7}
 8000e34:	b083      	sub	sp, #12
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
	return 1;
 8000e3a:	2301      	movs	r3, #1
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
	return 0;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3714      	adds	r7, #20
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
	...

08000e64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e6c:	4a14      	ldr	r2, [pc, #80]	; (8000ec0 <_sbrk+0x5c>)
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <_sbrk+0x60>)
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e78:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <_sbrk+0x64>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d102      	bne.n	8000e86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e80:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <_sbrk+0x64>)
 8000e82:	4a12      	ldr	r2, [pc, #72]	; (8000ecc <_sbrk+0x68>)
 8000e84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <_sbrk+0x64>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d207      	bcs.n	8000ea4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e94:	f005 f9de 	bl	8006254 <__errno>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	220c      	movs	r2, #12
 8000e9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea2:	e009      	b.n	8000eb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ea4:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <_sbrk+0x64>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eaa:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <_sbrk+0x64>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	4a05      	ldr	r2, [pc, #20]	; (8000ec8 <_sbrk+0x64>)
 8000eb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3718      	adds	r7, #24
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20020000 	.word	0x20020000
 8000ec4:	00000400 	.word	0x00000400
 8000ec8:	20000144 	.word	0x20000144
 8000ecc:	20000288 	.word	0x20000288

08000ed0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <SystemInit+0x20>)
 8000ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <SystemInit+0x20>)
 8000edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b09c      	sub	sp, #112	; 0x70
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000efa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f14:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
 8000f24:	615a      	str	r2, [r3, #20]
 8000f26:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	2234      	movs	r2, #52	; 0x34
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f005 f9ba 	bl	80062a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f34:	4b4b      	ldr	r3, [pc, #300]	; (8001064 <MX_TIM1_Init+0x170>)
 8000f36:	4a4c      	ldr	r2, [pc, #304]	; (8001068 <MX_TIM1_Init+0x174>)
 8000f38:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f3a:	4b4a      	ldr	r3, [pc, #296]	; (8001064 <MX_TIM1_Init+0x170>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f40:	4b48      	ldr	r3, [pc, #288]	; (8001064 <MX_TIM1_Init+0x170>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f46:	4b47      	ldr	r3, [pc, #284]	; (8001064 <MX_TIM1_Init+0x170>)
 8000f48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f4c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f4e:	4b45      	ldr	r3, [pc, #276]	; (8001064 <MX_TIM1_Init+0x170>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f54:	4b43      	ldr	r3, [pc, #268]	; (8001064 <MX_TIM1_Init+0x170>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f5a:	4b42      	ldr	r3, [pc, #264]	; (8001064 <MX_TIM1_Init+0x170>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f60:	4840      	ldr	r0, [pc, #256]	; (8001064 <MX_TIM1_Init+0x170>)
 8000f62:	f001 fdff 	bl	8002b64 <HAL_TIM_Base_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000f6c:	f7ff fc3a 	bl	80007e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f74:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f76:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4839      	ldr	r0, [pc, #228]	; (8001064 <MX_TIM1_Init+0x170>)
 8000f7e:	f002 f9b5 	bl	80032ec <HAL_TIM_ConfigClockSource>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000f88:	f7ff fc2c 	bl	80007e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f8c:	4835      	ldr	r0, [pc, #212]	; (8001064 <MX_TIM1_Init+0x170>)
 8000f8e:	f001 feb9 	bl	8002d04 <HAL_TIM_PWM_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000f98:	f7ff fc24 	bl	80007e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fa8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fac:	4619      	mov	r1, r3
 8000fae:	482d      	ldr	r0, [pc, #180]	; (8001064 <MX_TIM1_Init+0x170>)
 8000fb0:	f002 ff48 	bl	8003e44 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000fba:	f7ff fc13 	bl	80007e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fbe:	2360      	movs	r3, #96	; 0x60
 8000fc0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fda:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fde:	2200      	movs	r2, #0
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4820      	ldr	r0, [pc, #128]	; (8001064 <MX_TIM1_Init+0x170>)
 8000fe4:	f002 f86e 	bl	80030c4 <HAL_TIM_PWM_ConfigChannel>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000fee:	f7ff fbf9 	bl	80007e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ff2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ff6:	2204      	movs	r2, #4
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	481a      	ldr	r0, [pc, #104]	; (8001064 <MX_TIM1_Init+0x170>)
 8000ffc:	f002 f862 	bl	80030c4 <HAL_TIM_PWM_ConfigChannel>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001006:	f7ff fbed 	bl	80007e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800100a:	2300      	movs	r3, #0
 800100c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800100e:	2300      	movs	r3, #0
 8001010:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800101e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001022:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001028:	2300      	movs	r3, #0
 800102a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800102c:	2300      	movs	r3, #0
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001030:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001034:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800103a:	2300      	movs	r3, #0
 800103c:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800103e:	2300      	movs	r3, #0
 8001040:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	4619      	mov	r1, r3
 8001046:	4807      	ldr	r0, [pc, #28]	; (8001064 <MX_TIM1_Init+0x170>)
 8001048:	f002 ff92 	bl	8003f70 <HAL_TIMEx_ConfigBreakDeadTime>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8001052:	f7ff fbc7 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001056:	4803      	ldr	r0, [pc, #12]	; (8001064 <MX_TIM1_Init+0x170>)
 8001058:	f000 f828 	bl	80010ac <HAL_TIM_MspPostInit>

}
 800105c:	bf00      	nop
 800105e:	3770      	adds	r7, #112	; 0x70
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000148 	.word	0x20000148
 8001068:	40012c00 	.word	0x40012c00

0800106c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <HAL_TIM_Base_MspInit+0x38>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d10b      	bne.n	8001096 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800107e:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <HAL_TIM_Base_MspInit+0x3c>)
 8001080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001082:	4a09      	ldr	r2, [pc, #36]	; (80010a8 <HAL_TIM_Base_MspInit+0x3c>)
 8001084:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001088:	6613      	str	r3, [r2, #96]	; 0x60
 800108a:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <HAL_TIM_Base_MspInit+0x3c>)
 800108c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800108e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001096:	bf00      	nop
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	40012c00 	.word	0x40012c00
 80010a8:	40021000 	.word	0x40021000

080010ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a12      	ldr	r2, [pc, #72]	; (8001114 <HAL_TIM_MspPostInit+0x68>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d11d      	bne.n	800110a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	4b12      	ldr	r3, [pc, #72]	; (8001118 <HAL_TIM_MspPostInit+0x6c>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d2:	4a11      	ldr	r2, [pc, #68]	; (8001118 <HAL_TIM_MspPostInit+0x6c>)
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010da:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <HAL_TIM_MspPostInit+0x6c>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	60bb      	str	r3, [r7, #8]
 80010e4:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 80010e6:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 80010ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80010f8:	2306      	movs	r3, #6
 80010fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fc:	f107 030c 	add.w	r3, r7, #12
 8001100:	4619      	mov	r1, r3
 8001102:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001106:	f000 faed 	bl	80016e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800110a:	bf00      	nop
 800110c:	3720      	adds	r7, #32
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40012c00 	.word	0x40012c00
 8001118:	40021000 	.word	0x40021000

0800111c <HAL_UART_RxCpltCallback>:

/**
  * @brief  Function called at each new character received
  * @retval None
  */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <HAL_UART_RxCpltCallback+0x20>)
 8001126:	2201      	movs	r2, #1
 8001128:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800112a:	2201      	movs	r2, #1
 800112c:	4904      	ldr	r1, [pc, #16]	; (8001140 <HAL_UART_RxCpltCallback+0x24>)
 800112e:	4805      	ldr	r0, [pc, #20]	; (8001144 <HAL_UART_RxCpltCallback+0x28>)
 8001130:	f003 f8fc 	bl	800432c <HAL_UART_Receive_IT>
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000194 	.word	0x20000194
 8001140:	20000198 	.word	0x20000198
 8001144:	200001e0 	.word	0x200001e0

08001148 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800114c:	4b22      	ldr	r3, [pc, #136]	; (80011d8 <MX_USART2_UART_Init+0x90>)
 800114e:	4a23      	ldr	r2, [pc, #140]	; (80011dc <MX_USART2_UART_Init+0x94>)
 8001150:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001152:	4b21      	ldr	r3, [pc, #132]	; (80011d8 <MX_USART2_UART_Init+0x90>)
 8001154:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001158:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800115a:	4b1f      	ldr	r3, [pc, #124]	; (80011d8 <MX_USART2_UART_Init+0x90>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001160:	4b1d      	ldr	r3, [pc, #116]	; (80011d8 <MX_USART2_UART_Init+0x90>)
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001166:	4b1c      	ldr	r3, [pc, #112]	; (80011d8 <MX_USART2_UART_Init+0x90>)
 8001168:	2200      	movs	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800116c:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <MX_USART2_UART_Init+0x90>)
 800116e:	220c      	movs	r2, #12
 8001170:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001172:	4b19      	ldr	r3, [pc, #100]	; (80011d8 <MX_USART2_UART_Init+0x90>)
 8001174:	2200      	movs	r2, #0
 8001176:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001178:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <MX_USART2_UART_Init+0x90>)
 800117a:	2200      	movs	r2, #0
 800117c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800117e:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <MX_USART2_UART_Init+0x90>)
 8001180:	2200      	movs	r2, #0
 8001182:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001184:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <MX_USART2_UART_Init+0x90>)
 8001186:	2200      	movs	r2, #0
 8001188:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800118a:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <MX_USART2_UART_Init+0x90>)
 800118c:	2200      	movs	r2, #0
 800118e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001190:	4811      	ldr	r0, [pc, #68]	; (80011d8 <MX_USART2_UART_Init+0x90>)
 8001192:	f002 ffe5 	bl	8004160 <HAL_UART_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800119c:	f7ff fb22 	bl	80007e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011a0:	2100      	movs	r1, #0
 80011a2:	480d      	ldr	r0, [pc, #52]	; (80011d8 <MX_USART2_UART_Init+0x90>)
 80011a4:	f004 ff87 	bl	80060b6 <HAL_UARTEx_SetTxFifoThreshold>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80011ae:	f7ff fb19 	bl	80007e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011b2:	2100      	movs	r1, #0
 80011b4:	4808      	ldr	r0, [pc, #32]	; (80011d8 <MX_USART2_UART_Init+0x90>)
 80011b6:	f004 ffbc 	bl	8006132 <HAL_UARTEx_SetRxFifoThreshold>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80011c0:	f7ff fb10 	bl	80007e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80011c4:	4804      	ldr	r0, [pc, #16]	; (80011d8 <MX_USART2_UART_Init+0x90>)
 80011c6:	f004 ff3d 	bl	8006044 <HAL_UARTEx_DisableFifoMode>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80011d0:	f7ff fb08 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	200001e0 	.word	0x200001e0
 80011dc:	40004400 	.word	0x40004400

080011e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b09e      	sub	sp, #120	; 0x78
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011f8:	f107 0310 	add.w	r3, r7, #16
 80011fc:	2254      	movs	r2, #84	; 0x54
 80011fe:	2100      	movs	r1, #0
 8001200:	4618      	mov	r0, r3
 8001202:	f005 f851 	bl	80062a8 <memset>
  if(uartHandle->Instance==USART2)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a23      	ldr	r2, [pc, #140]	; (8001298 <HAL_UART_MspInit+0xb8>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d13e      	bne.n	800128e <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001210:	2302      	movs	r3, #2
 8001212:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001214:	2300      	movs	r3, #0
 8001216:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001218:	f107 0310 	add.w	r3, r7, #16
 800121c:	4618      	mov	r0, r3
 800121e:	f001 fa53 	bl	80026c8 <HAL_RCCEx_PeriphCLKConfig>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001228:	f7ff fadc 	bl	80007e4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800122c:	4b1b      	ldr	r3, [pc, #108]	; (800129c <HAL_UART_MspInit+0xbc>)
 800122e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001230:	4a1a      	ldr	r2, [pc, #104]	; (800129c <HAL_UART_MspInit+0xbc>)
 8001232:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001236:	6593      	str	r3, [r2, #88]	; 0x58
 8001238:	4b18      	ldr	r3, [pc, #96]	; (800129c <HAL_UART_MspInit+0xbc>)
 800123a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001244:	4b15      	ldr	r3, [pc, #84]	; (800129c <HAL_UART_MspInit+0xbc>)
 8001246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001248:	4a14      	ldr	r2, [pc, #80]	; (800129c <HAL_UART_MspInit+0xbc>)
 800124a:	f043 0301 	orr.w	r3, r3, #1
 800124e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <HAL_UART_MspInit+0xbc>)
 8001252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800125c:	230c      	movs	r3, #12
 800125e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	2302      	movs	r3, #2
 8001262:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001268:	2300      	movs	r3, #0
 800126a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800126c:	2307      	movs	r3, #7
 800126e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001270:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001274:	4619      	mov	r1, r3
 8001276:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800127a:	f000 fa33 	bl	80016e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	2100      	movs	r1, #0
 8001282:	2026      	movs	r0, #38	; 0x26
 8001284:	f000 f946 	bl	8001514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001288:	2026      	movs	r0, #38	; 0x26
 800128a:	f000 f95d 	bl	8001548 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800128e:	bf00      	nop
 8001290:	3778      	adds	r7, #120	; 0x78
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40004400 	.word	0x40004400
 800129c:	40021000 	.word	0x40021000

080012a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012a0:	480d      	ldr	r0, [pc, #52]	; (80012d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012a2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012a4:	480d      	ldr	r0, [pc, #52]	; (80012dc <LoopForever+0x6>)
  ldr r1, =_edata
 80012a6:	490e      	ldr	r1, [pc, #56]	; (80012e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012a8:	4a0e      	ldr	r2, [pc, #56]	; (80012e4 <LoopForever+0xe>)
  movs r3, #0
 80012aa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80012ac:	e002      	b.n	80012b4 <LoopCopyDataInit>

080012ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012b2:	3304      	adds	r3, #4

080012b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b8:	d3f9      	bcc.n	80012ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ba:	4a0b      	ldr	r2, [pc, #44]	; (80012e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012bc:	4c0b      	ldr	r4, [pc, #44]	; (80012ec <LoopForever+0x16>)
  movs r3, #0
 80012be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c0:	e001      	b.n	80012c6 <LoopFillZerobss>

080012c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c4:	3204      	adds	r2, #4

080012c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c8:	d3fb      	bcc.n	80012c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012ca:	f7ff fe01 	bl	8000ed0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ce:	f004 ffc7 	bl	8006260 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012d2:	f7ff f9fd 	bl	80006d0 <main>

080012d6 <LoopForever>:

LoopForever:
    b LoopForever
 80012d6:	e7fe      	b.n	80012d6 <LoopForever>
  ldr   r0, =_estack
 80012d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012e0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80012e4:	08007e74 	.word	0x08007e74
  ldr r2, =_sbss
 80012e8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80012ec:	20000284 	.word	0x20000284

080012f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012f0:	e7fe      	b.n	80012f0 <ADC1_2_IRQHandler>

080012f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012f8:	2300      	movs	r3, #0
 80012fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012fc:	2003      	movs	r0, #3
 80012fe:	f000 f8fe 	bl	80014fe <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001302:	200f      	movs	r0, #15
 8001304:	f7ff fc66 	bl	8000bd4 <HAL_InitTick>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d002      	beq.n	8001314 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	71fb      	strb	r3, [r7, #7]
 8001312:	e001      	b.n	8001318 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001314:	f7ff fc3a 	bl	8000b8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001318:	79fb      	ldrb	r3, [r7, #7]

}
 800131a:	4618      	mov	r0, r3
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <HAL_IncTick+0x1c>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <HAL_IncTick+0x20>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4413      	add	r3, r2
 8001332:	4a03      	ldr	r2, [pc, #12]	; (8001340 <HAL_IncTick+0x1c>)
 8001334:	6013      	str	r3, [r2, #0]
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	20000270 	.word	0x20000270
 8001344:	20000008 	.word	0x20000008

08001348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return uwTick;
 800134c:	4b03      	ldr	r3, [pc, #12]	; (800135c <HAL_GetTick+0x14>)
 800134e:	681b      	ldr	r3, [r3, #0]
}
 8001350:	4618      	mov	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	20000270 	.word	0x20000270

08001360 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001368:	f7ff ffee 	bl	8001348 <HAL_GetTick>
 800136c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001378:	d004      	beq.n	8001384 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <HAL_Delay+0x40>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	4413      	add	r3, r2
 8001382:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001384:	bf00      	nop
 8001386:	f7ff ffdf 	bl	8001348 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	68fa      	ldr	r2, [r7, #12]
 8001392:	429a      	cmp	r2, r3
 8001394:	d8f7      	bhi.n	8001386 <HAL_Delay+0x26>
  {
  }
}
 8001396:	bf00      	nop
 8001398:	bf00      	nop
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000008 	.word	0x20000008

080013a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <__NVIC_SetPriorityGrouping+0x44>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ba:	68ba      	ldr	r2, [r7, #8]
 80013bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013c0:	4013      	ands	r3, r2
 80013c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013d6:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <__NVIC_SetPriorityGrouping+0x44>)
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	60d3      	str	r3, [r2, #12]
}
 80013dc:	bf00      	nop
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f0:	4b04      	ldr	r3, [pc, #16]	; (8001404 <__NVIC_GetPriorityGrouping+0x18>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	0a1b      	lsrs	r3, r3, #8
 80013f6:	f003 0307 	and.w	r3, r3, #7
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	2b00      	cmp	r3, #0
 8001418:	db0b      	blt.n	8001432 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	f003 021f 	and.w	r2, r3, #31
 8001420:	4907      	ldr	r1, [pc, #28]	; (8001440 <__NVIC_EnableIRQ+0x38>)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	095b      	lsrs	r3, r3, #5
 8001428:	2001      	movs	r0, #1
 800142a:	fa00 f202 	lsl.w	r2, r0, r2
 800142e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	e000e100 	.word	0xe000e100

08001444 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	6039      	str	r1, [r7, #0]
 800144e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001454:	2b00      	cmp	r3, #0
 8001456:	db0a      	blt.n	800146e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	b2da      	uxtb	r2, r3
 800145c:	490c      	ldr	r1, [pc, #48]	; (8001490 <__NVIC_SetPriority+0x4c>)
 800145e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001462:	0112      	lsls	r2, r2, #4
 8001464:	b2d2      	uxtb	r2, r2
 8001466:	440b      	add	r3, r1
 8001468:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800146c:	e00a      	b.n	8001484 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	b2da      	uxtb	r2, r3
 8001472:	4908      	ldr	r1, [pc, #32]	; (8001494 <__NVIC_SetPriority+0x50>)
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	f003 030f 	and.w	r3, r3, #15
 800147a:	3b04      	subs	r3, #4
 800147c:	0112      	lsls	r2, r2, #4
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	440b      	add	r3, r1
 8001482:	761a      	strb	r2, [r3, #24]
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	e000e100 	.word	0xe000e100
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001498:	b480      	push	{r7}
 800149a:	b089      	sub	sp, #36	; 0x24
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	f1c3 0307 	rsb	r3, r3, #7
 80014b2:	2b04      	cmp	r3, #4
 80014b4:	bf28      	it	cs
 80014b6:	2304      	movcs	r3, #4
 80014b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3304      	adds	r3, #4
 80014be:	2b06      	cmp	r3, #6
 80014c0:	d902      	bls.n	80014c8 <NVIC_EncodePriority+0x30>
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	3b03      	subs	r3, #3
 80014c6:	e000      	b.n	80014ca <NVIC_EncodePriority+0x32>
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014cc:	f04f 32ff 	mov.w	r2, #4294967295
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43da      	mvns	r2, r3
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	401a      	ands	r2, r3
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e0:	f04f 31ff 	mov.w	r1, #4294967295
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ea:	43d9      	mvns	r1, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f0:	4313      	orrs	r3, r2
         );
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3724      	adds	r7, #36	; 0x24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff ff4c 	bl	80013a4 <__NVIC_SetPriorityGrouping>
}
 800150c:	bf00      	nop
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
 8001520:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001522:	f7ff ff63 	bl	80013ec <__NVIC_GetPriorityGrouping>
 8001526:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	68b9      	ldr	r1, [r7, #8]
 800152c:	6978      	ldr	r0, [r7, #20]
 800152e:	f7ff ffb3 	bl	8001498 <NVIC_EncodePriority>
 8001532:	4602      	mov	r2, r0
 8001534:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001538:	4611      	mov	r1, r2
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff ff82 	bl	8001444 <__NVIC_SetPriority>
}
 8001540:	bf00      	nop
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff ff56 	bl	8001408 <__NVIC_EnableIRQ>
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800156c:	2300      	movs	r3, #0
 800156e:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d005      	beq.n	8001588 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2204      	movs	r2, #4
 8001580:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	73fb      	strb	r3, [r7, #15]
 8001586:	e037      	b.n	80015f8 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f022 020e 	bic.w	r2, r2, #14
 8001596:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015a6:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 0201 	bic.w	r2, r2, #1
 80015b6:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015bc:	f003 021f 	and.w	r2, r3, #31
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	2101      	movs	r1, #1
 80015c6:	fa01 f202 	lsl.w	r2, r1, r2
 80015ca:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80015d4:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d00c      	beq.n	80015f8 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015ec:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80015f6:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001608:	7bfb      	ldrb	r3, [r7, #15]
}
 800160a:	4618      	mov	r0, r3
 800160c:	3714      	adds	r7, #20
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b084      	sub	sp, #16
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800161e:	2300      	movs	r3, #0
 8001620:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d00d      	beq.n	800164a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2204      	movs	r2, #4
 8001632:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	73fb      	strb	r3, [r7, #15]
 8001648:	e047      	b.n	80016da <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 020e 	bic.w	r2, r2, #14
 8001658:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f022 0201 	bic.w	r2, r2, #1
 8001668:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001674:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001678:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167e:	f003 021f 	and.w	r2, r3, #31
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	2101      	movs	r1, #1
 8001688:	fa01 f202 	lsl.w	r2, r1, r2
 800168c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001696:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800169c:	2b00      	cmp	r3, #0
 800169e:	d00c      	beq.n	80016ba <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016ae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80016b8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2201      	movs	r2, #1
 80016be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	4798      	blx	r3
    }
  }
  return status;
 80016da:	7bfb      	ldrb	r3, [r7, #15]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b087      	sub	sp, #28
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016f2:	e15a      	b.n	80019aa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	2101      	movs	r1, #1
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001700:	4013      	ands	r3, r2
 8001702:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 814c 	beq.w	80019a4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 0303 	and.w	r3, r3, #3
 8001714:	2b01      	cmp	r3, #1
 8001716:	d005      	beq.n	8001724 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001720:	2b02      	cmp	r3, #2
 8001722:	d130      	bne.n	8001786 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	2203      	movs	r2, #3
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	43db      	mvns	r3, r3
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4013      	ands	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	68da      	ldr	r2, [r3, #12]
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4313      	orrs	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800175a:	2201      	movs	r2, #1
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43db      	mvns	r3, r3
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	4013      	ands	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	091b      	lsrs	r3, r3, #4
 8001770:	f003 0201 	and.w	r2, r3, #1
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	4313      	orrs	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f003 0303 	and.w	r3, r3, #3
 800178e:	2b03      	cmp	r3, #3
 8001790:	d017      	beq.n	80017c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	2203      	movs	r2, #3
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43db      	mvns	r3, r3
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	4013      	ands	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	689a      	ldr	r2, [r3, #8]
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d123      	bne.n	8001816 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	08da      	lsrs	r2, r3, #3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	3208      	adds	r2, #8
 80017d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	220f      	movs	r2, #15
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43db      	mvns	r3, r3
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	4013      	ands	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	691a      	ldr	r2, [r3, #16]
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	08da      	lsrs	r2, r3, #3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3208      	adds	r2, #8
 8001810:	6939      	ldr	r1, [r7, #16]
 8001812:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	2203      	movs	r2, #3
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43db      	mvns	r3, r3
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	4013      	ands	r3, r2
 800182c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f003 0203 	and.w	r2, r3, #3
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	4313      	orrs	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001852:	2b00      	cmp	r3, #0
 8001854:	f000 80a6 	beq.w	80019a4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001858:	4b5b      	ldr	r3, [pc, #364]	; (80019c8 <HAL_GPIO_Init+0x2e4>)
 800185a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800185c:	4a5a      	ldr	r2, [pc, #360]	; (80019c8 <HAL_GPIO_Init+0x2e4>)
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	6613      	str	r3, [r2, #96]	; 0x60
 8001864:	4b58      	ldr	r3, [pc, #352]	; (80019c8 <HAL_GPIO_Init+0x2e4>)
 8001866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	60bb      	str	r3, [r7, #8]
 800186e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001870:	4a56      	ldr	r2, [pc, #344]	; (80019cc <HAL_GPIO_Init+0x2e8>)
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	089b      	lsrs	r3, r3, #2
 8001876:	3302      	adds	r3, #2
 8001878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800187c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	f003 0303 	and.w	r3, r3, #3
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	220f      	movs	r2, #15
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4013      	ands	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800189a:	d01f      	beq.n	80018dc <HAL_GPIO_Init+0x1f8>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a4c      	ldr	r2, [pc, #304]	; (80019d0 <HAL_GPIO_Init+0x2ec>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d019      	beq.n	80018d8 <HAL_GPIO_Init+0x1f4>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a4b      	ldr	r2, [pc, #300]	; (80019d4 <HAL_GPIO_Init+0x2f0>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d013      	beq.n	80018d4 <HAL_GPIO_Init+0x1f0>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a4a      	ldr	r2, [pc, #296]	; (80019d8 <HAL_GPIO_Init+0x2f4>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d00d      	beq.n	80018d0 <HAL_GPIO_Init+0x1ec>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a49      	ldr	r2, [pc, #292]	; (80019dc <HAL_GPIO_Init+0x2f8>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d007      	beq.n	80018cc <HAL_GPIO_Init+0x1e8>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a48      	ldr	r2, [pc, #288]	; (80019e0 <HAL_GPIO_Init+0x2fc>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d101      	bne.n	80018c8 <HAL_GPIO_Init+0x1e4>
 80018c4:	2305      	movs	r3, #5
 80018c6:	e00a      	b.n	80018de <HAL_GPIO_Init+0x1fa>
 80018c8:	2306      	movs	r3, #6
 80018ca:	e008      	b.n	80018de <HAL_GPIO_Init+0x1fa>
 80018cc:	2304      	movs	r3, #4
 80018ce:	e006      	b.n	80018de <HAL_GPIO_Init+0x1fa>
 80018d0:	2303      	movs	r3, #3
 80018d2:	e004      	b.n	80018de <HAL_GPIO_Init+0x1fa>
 80018d4:	2302      	movs	r3, #2
 80018d6:	e002      	b.n	80018de <HAL_GPIO_Init+0x1fa>
 80018d8:	2301      	movs	r3, #1
 80018da:	e000      	b.n	80018de <HAL_GPIO_Init+0x1fa>
 80018dc:	2300      	movs	r3, #0
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	f002 0203 	and.w	r2, r2, #3
 80018e4:	0092      	lsls	r2, r2, #2
 80018e6:	4093      	lsls	r3, r2
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018ee:	4937      	ldr	r1, [pc, #220]	; (80019cc <HAL_GPIO_Init+0x2e8>)
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	089b      	lsrs	r3, r3, #2
 80018f4:	3302      	adds	r3, #2
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018fc:	4b39      	ldr	r3, [pc, #228]	; (80019e4 <HAL_GPIO_Init+0x300>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	43db      	mvns	r3, r3
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4013      	ands	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d003      	beq.n	8001920 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	4313      	orrs	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001920:	4a30      	ldr	r2, [pc, #192]	; (80019e4 <HAL_GPIO_Init+0x300>)
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001926:	4b2f      	ldr	r3, [pc, #188]	; (80019e4 <HAL_GPIO_Init+0x300>)
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	43db      	mvns	r3, r3
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	4013      	ands	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4313      	orrs	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800194a:	4a26      	ldr	r2, [pc, #152]	; (80019e4 <HAL_GPIO_Init+0x300>)
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001950:	4b24      	ldr	r3, [pc, #144]	; (80019e4 <HAL_GPIO_Init+0x300>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	43db      	mvns	r3, r3
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	4013      	ands	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	4313      	orrs	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001974:	4a1b      	ldr	r2, [pc, #108]	; (80019e4 <HAL_GPIO_Init+0x300>)
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800197a:	4b1a      	ldr	r3, [pc, #104]	; (80019e4 <HAL_GPIO_Init+0x300>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	43db      	mvns	r3, r3
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4013      	ands	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4313      	orrs	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800199e:	4a11      	ldr	r2, [pc, #68]	; (80019e4 <HAL_GPIO_Init+0x300>)
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	3301      	adds	r3, #1
 80019a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	fa22 f303 	lsr.w	r3, r2, r3
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f47f ae9d 	bne.w	80016f4 <HAL_GPIO_Init+0x10>
  }
}
 80019ba:	bf00      	nop
 80019bc:	bf00      	nop
 80019be:	371c      	adds	r7, #28
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40010000 	.word	0x40010000
 80019d0:	48000400 	.word	0x48000400
 80019d4:	48000800 	.word	0x48000800
 80019d8:	48000c00 	.word	0x48000c00
 80019dc:	48001000 	.word	0x48001000
 80019e0:	48001400 	.word	0x48001400
 80019e4:	40010400 	.word	0x40010400

080019e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	807b      	strh	r3, [r7, #2]
 80019f4:	4613      	mov	r3, r2
 80019f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019f8:	787b      	ldrb	r3, [r7, #1]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019fe:	887a      	ldrh	r2, [r7, #2]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a04:	e002      	b.n	8001a0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a06:	887a      	ldrh	r2, [r7, #2]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	460b      	mov	r3, r1
 8001a22:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	695b      	ldr	r3, [r3, #20]
 8001a28:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a2a:	887a      	ldrh	r2, [r7, #2]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	041a      	lsls	r2, r3, #16
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	43d9      	mvns	r1, r3
 8001a36:	887b      	ldrh	r3, [r7, #2]
 8001a38:	400b      	ands	r3, r1
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	619a      	str	r2, [r3, #24]
}
 8001a40:	bf00      	nop
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a56:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a58:	695a      	ldr	r2, [r3, #20]
 8001a5a:	88fb      	ldrh	r3, [r7, #6]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d006      	beq.n	8001a70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a62:	4a05      	ldr	r2, [pc, #20]	; (8001a78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a64:	88fb      	ldrh	r3, [r7, #6]
 8001a66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a68:	88fb      	ldrh	r3, [r7, #6]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f000 f806 	bl	8001a7c <HAL_GPIO_EXTI_Callback>
  }
}
 8001a70:	bf00      	nop
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40010400 	.word	0x40010400

08001a7c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
	...

08001a94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d141      	bne.n	8001b26 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001aa2:	4b4b      	ldr	r3, [pc, #300]	; (8001bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aae:	d131      	bne.n	8001b14 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ab0:	4b47      	ldr	r3, [pc, #284]	; (8001bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ab6:	4a46      	ldr	r2, [pc, #280]	; (8001bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001abc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ac0:	4b43      	ldr	r3, [pc, #268]	; (8001bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ac8:	4a41      	ldr	r2, [pc, #260]	; (8001bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ace:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ad0:	4b40      	ldr	r3, [pc, #256]	; (8001bd4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2232      	movs	r2, #50	; 0x32
 8001ad6:	fb02 f303 	mul.w	r3, r2, r3
 8001ada:	4a3f      	ldr	r2, [pc, #252]	; (8001bd8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001adc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae0:	0c9b      	lsrs	r3, r3, #18
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ae6:	e002      	b.n	8001aee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001aee:	4b38      	ldr	r3, [pc, #224]	; (8001bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001afa:	d102      	bne.n	8001b02 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1f2      	bne.n	8001ae8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b02:	4b33      	ldr	r3, [pc, #204]	; (8001bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b0e:	d158      	bne.n	8001bc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e057      	b.n	8001bc4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b14:	4b2e      	ldr	r3, [pc, #184]	; (8001bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b1a:	4a2d      	ldr	r2, [pc, #180]	; (8001bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b24:	e04d      	b.n	8001bc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b2c:	d141      	bne.n	8001bb2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b2e:	4b28      	ldr	r3, [pc, #160]	; (8001bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b3a:	d131      	bne.n	8001ba0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b3c:	4b24      	ldr	r3, [pc, #144]	; (8001bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b42:	4a23      	ldr	r2, [pc, #140]	; (8001bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b4c:	4b20      	ldr	r3, [pc, #128]	; (8001bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b54:	4a1e      	ldr	r2, [pc, #120]	; (8001bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b5a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b5c:	4b1d      	ldr	r3, [pc, #116]	; (8001bd4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2232      	movs	r2, #50	; 0x32
 8001b62:	fb02 f303 	mul.w	r3, r2, r3
 8001b66:	4a1c      	ldr	r2, [pc, #112]	; (8001bd8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b68:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6c:	0c9b      	lsrs	r3, r3, #18
 8001b6e:	3301      	adds	r3, #1
 8001b70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b72:	e002      	b.n	8001b7a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b7a:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b86:	d102      	bne.n	8001b8e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f2      	bne.n	8001b74 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b8e:	4b10      	ldr	r3, [pc, #64]	; (8001bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b9a:	d112      	bne.n	8001bc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e011      	b.n	8001bc4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ba6:	4a0a      	ldr	r2, [pc, #40]	; (8001bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001bb0:	e007      	b.n	8001bc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bb2:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bba:	4a05      	ldr	r2, [pc, #20]	; (8001bd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bbc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bc0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	40007000 	.word	0x40007000
 8001bd4:	20000000 	.word	0x20000000
 8001bd8:	431bde83 	.word	0x431bde83

08001bdc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001be0:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	4a04      	ldr	r2, [pc, #16]	; (8001bf8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001be6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bea:	6093      	str	r3, [r2, #8]
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	40007000 	.word	0x40007000

08001bfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b088      	sub	sp, #32
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e306      	b.n	800221c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d075      	beq.n	8001d06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c1a:	4b97      	ldr	r3, [pc, #604]	; (8001e78 <HAL_RCC_OscConfig+0x27c>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 030c 	and.w	r3, r3, #12
 8001c22:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c24:	4b94      	ldr	r3, [pc, #592]	; (8001e78 <HAL_RCC_OscConfig+0x27c>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	2b0c      	cmp	r3, #12
 8001c32:	d102      	bne.n	8001c3a <HAL_RCC_OscConfig+0x3e>
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	2b03      	cmp	r3, #3
 8001c38:	d002      	beq.n	8001c40 <HAL_RCC_OscConfig+0x44>
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	2b08      	cmp	r3, #8
 8001c3e:	d10b      	bne.n	8001c58 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c40:	4b8d      	ldr	r3, [pc, #564]	; (8001e78 <HAL_RCC_OscConfig+0x27c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d05b      	beq.n	8001d04 <HAL_RCC_OscConfig+0x108>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d157      	bne.n	8001d04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e2e1      	b.n	800221c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c60:	d106      	bne.n	8001c70 <HAL_RCC_OscConfig+0x74>
 8001c62:	4b85      	ldr	r3, [pc, #532]	; (8001e78 <HAL_RCC_OscConfig+0x27c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a84      	ldr	r2, [pc, #528]	; (8001e78 <HAL_RCC_OscConfig+0x27c>)
 8001c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	e01d      	b.n	8001cac <HAL_RCC_OscConfig+0xb0>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c78:	d10c      	bne.n	8001c94 <HAL_RCC_OscConfig+0x98>
 8001c7a:	4b7f      	ldr	r3, [pc, #508]	; (8001e78 <HAL_RCC_OscConfig+0x27c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a7e      	ldr	r2, [pc, #504]	; (8001e78 <HAL_RCC_OscConfig+0x27c>)
 8001c80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	4b7c      	ldr	r3, [pc, #496]	; (8001e78 <HAL_RCC_OscConfig+0x27c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a7b      	ldr	r2, [pc, #492]	; (8001e78 <HAL_RCC_OscConfig+0x27c>)
 8001c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	e00b      	b.n	8001cac <HAL_RCC_OscConfig+0xb0>
 8001c94:	4b78      	ldr	r3, [pc, #480]	; (8001e78 <HAL_RCC_OscConfig+0x27c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a77      	ldr	r2, [pc, #476]	; (8001e78 <HAL_RCC_OscConfig+0x27c>)
 8001c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c9e:	6013      	str	r3, [r2, #0]
 8001ca0:	4b75      	ldr	r3, [pc, #468]	; (8001e78 <HAL_RCC_OscConfig+0x27c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a74      	ldr	r2, [pc, #464]	; (8001e78 <HAL_RCC_OscConfig+0x27c>)
 8001ca6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001caa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d013      	beq.n	8001cdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb4:	f7ff fb48 	bl	8001348 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cbc:	f7ff fb44 	bl	8001348 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b64      	cmp	r3, #100	; 0x64
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e2a6      	b.n	800221c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cce:	4b6a      	ldr	r3, [pc, #424]	; (8001e78 <HAL_RCC_OscConfig+0x27c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d0f0      	beq.n	8001cbc <HAL_RCC_OscConfig+0xc0>
 8001cda:	e014      	b.n	8001d06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cdc:	f7ff fb34 	bl	8001348 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce4:	f7ff fb30 	bl	8001348 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b64      	cmp	r3, #100	; 0x64
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e292      	b.n	800221c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cf6:	4b60      	ldr	r3, [pc, #384]	; (8001e78 <HAL_RCC_OscConfig+0x27c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f0      	bne.n	8001ce4 <HAL_RCC_OscConfig+0xe8>
 8001d02:	e000      	b.n	8001d06 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d075      	beq.n	8001dfe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d12:	4b59      	ldr	r3, [pc, #356]	; (8001e78 <HAL_RCC_OscConfig+0x27c>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 030c 	and.w	r3, r3, #12
 8001d1a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d1c:	4b56      	ldr	r3, [pc, #344]	; (8001e78 <HAL_RCC_OscConfig+0x27c>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	2b0c      	cmp	r3, #12
 8001d2a:	d102      	bne.n	8001d32 <HAL_RCC_OscConfig+0x136>
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d002      	beq.n	8001d38 <HAL_RCC_OscConfig+0x13c>
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	2b04      	cmp	r3, #4
 8001d36:	d11f      	bne.n	8001d78 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d38:	4b4f      	ldr	r3, [pc, #316]	; (8001e78 <HAL_RCC_OscConfig+0x27c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d005      	beq.n	8001d50 <HAL_RCC_OscConfig+0x154>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d101      	bne.n	8001d50 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e265      	b.n	800221c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d50:	4b49      	ldr	r3, [pc, #292]	; (8001e78 <HAL_RCC_OscConfig+0x27c>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	061b      	lsls	r3, r3, #24
 8001d5e:	4946      	ldr	r1, [pc, #280]	; (8001e78 <HAL_RCC_OscConfig+0x27c>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d64:	4b45      	ldr	r3, [pc, #276]	; (8001e7c <HAL_RCC_OscConfig+0x280>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe ff33 	bl	8000bd4 <HAL_InitTick>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d043      	beq.n	8001dfc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e251      	b.n	800221c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d023      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d80:	4b3d      	ldr	r3, [pc, #244]	; (8001e78 <HAL_RCC_OscConfig+0x27c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a3c      	ldr	r2, [pc, #240]	; (8001e78 <HAL_RCC_OscConfig+0x27c>)
 8001d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8c:	f7ff fadc 	bl	8001348 <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d94:	f7ff fad8 	bl	8001348 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e23a      	b.n	800221c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001da6:	4b34      	ldr	r3, [pc, #208]	; (8001e78 <HAL_RCC_OscConfig+0x27c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d0f0      	beq.n	8001d94 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db2:	4b31      	ldr	r3, [pc, #196]	; (8001e78 <HAL_RCC_OscConfig+0x27c>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	061b      	lsls	r3, r3, #24
 8001dc0:	492d      	ldr	r1, [pc, #180]	; (8001e78 <HAL_RCC_OscConfig+0x27c>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	604b      	str	r3, [r1, #4]
 8001dc6:	e01a      	b.n	8001dfe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dc8:	4b2b      	ldr	r3, [pc, #172]	; (8001e78 <HAL_RCC_OscConfig+0x27c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a2a      	ldr	r2, [pc, #168]	; (8001e78 <HAL_RCC_OscConfig+0x27c>)
 8001dce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd4:	f7ff fab8 	bl	8001348 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ddc:	f7ff fab4 	bl	8001348 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e216      	b.n	800221c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dee:	4b22      	ldr	r3, [pc, #136]	; (8001e78 <HAL_RCC_OscConfig+0x27c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1f0      	bne.n	8001ddc <HAL_RCC_OscConfig+0x1e0>
 8001dfa:	e000      	b.n	8001dfe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dfc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0308 	and.w	r3, r3, #8
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d041      	beq.n	8001e8e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d01c      	beq.n	8001e4c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e12:	4b19      	ldr	r3, [pc, #100]	; (8001e78 <HAL_RCC_OscConfig+0x27c>)
 8001e14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e18:	4a17      	ldr	r2, [pc, #92]	; (8001e78 <HAL_RCC_OscConfig+0x27c>)
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e22:	f7ff fa91 	bl	8001348 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e2a:	f7ff fa8d 	bl	8001348 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e1ef      	b.n	800221c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e3c:	4b0e      	ldr	r3, [pc, #56]	; (8001e78 <HAL_RCC_OscConfig+0x27c>)
 8001e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0ef      	beq.n	8001e2a <HAL_RCC_OscConfig+0x22e>
 8001e4a:	e020      	b.n	8001e8e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e4c:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <HAL_RCC_OscConfig+0x27c>)
 8001e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e52:	4a09      	ldr	r2, [pc, #36]	; (8001e78 <HAL_RCC_OscConfig+0x27c>)
 8001e54:	f023 0301 	bic.w	r3, r3, #1
 8001e58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e5c:	f7ff fa74 	bl	8001348 <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e62:	e00d      	b.n	8001e80 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e64:	f7ff fa70 	bl	8001348 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d906      	bls.n	8001e80 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e1d2      	b.n	800221c <HAL_RCC_OscConfig+0x620>
 8001e76:	bf00      	nop
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e80:	4b8c      	ldr	r3, [pc, #560]	; (80020b4 <HAL_RCC_OscConfig+0x4b8>)
 8001e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1ea      	bne.n	8001e64 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0304 	and.w	r3, r3, #4
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 80a6 	beq.w	8001fe8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ea0:	4b84      	ldr	r3, [pc, #528]	; (80020b4 <HAL_RCC_OscConfig+0x4b8>)
 8001ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x2b4>
 8001eac:	2301      	movs	r3, #1
 8001eae:	e000      	b.n	8001eb2 <HAL_RCC_OscConfig+0x2b6>
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00d      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eb6:	4b7f      	ldr	r3, [pc, #508]	; (80020b4 <HAL_RCC_OscConfig+0x4b8>)
 8001eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eba:	4a7e      	ldr	r2, [pc, #504]	; (80020b4 <HAL_RCC_OscConfig+0x4b8>)
 8001ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ec2:	4b7c      	ldr	r3, [pc, #496]	; (80020b4 <HAL_RCC_OscConfig+0x4b8>)
 8001ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ed2:	4b79      	ldr	r3, [pc, #484]	; (80020b8 <HAL_RCC_OscConfig+0x4bc>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d118      	bne.n	8001f10 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ede:	4b76      	ldr	r3, [pc, #472]	; (80020b8 <HAL_RCC_OscConfig+0x4bc>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a75      	ldr	r2, [pc, #468]	; (80020b8 <HAL_RCC_OscConfig+0x4bc>)
 8001ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eea:	f7ff fa2d 	bl	8001348 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ef2:	f7ff fa29 	bl	8001348 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e18b      	b.n	800221c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f04:	4b6c      	ldr	r3, [pc, #432]	; (80020b8 <HAL_RCC_OscConfig+0x4bc>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0f0      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d108      	bne.n	8001f2a <HAL_RCC_OscConfig+0x32e>
 8001f18:	4b66      	ldr	r3, [pc, #408]	; (80020b4 <HAL_RCC_OscConfig+0x4b8>)
 8001f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f1e:	4a65      	ldr	r2, [pc, #404]	; (80020b4 <HAL_RCC_OscConfig+0x4b8>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f28:	e024      	b.n	8001f74 <HAL_RCC_OscConfig+0x378>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2b05      	cmp	r3, #5
 8001f30:	d110      	bne.n	8001f54 <HAL_RCC_OscConfig+0x358>
 8001f32:	4b60      	ldr	r3, [pc, #384]	; (80020b4 <HAL_RCC_OscConfig+0x4b8>)
 8001f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f38:	4a5e      	ldr	r2, [pc, #376]	; (80020b4 <HAL_RCC_OscConfig+0x4b8>)
 8001f3a:	f043 0304 	orr.w	r3, r3, #4
 8001f3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f42:	4b5c      	ldr	r3, [pc, #368]	; (80020b4 <HAL_RCC_OscConfig+0x4b8>)
 8001f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f48:	4a5a      	ldr	r2, [pc, #360]	; (80020b4 <HAL_RCC_OscConfig+0x4b8>)
 8001f4a:	f043 0301 	orr.w	r3, r3, #1
 8001f4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f52:	e00f      	b.n	8001f74 <HAL_RCC_OscConfig+0x378>
 8001f54:	4b57      	ldr	r3, [pc, #348]	; (80020b4 <HAL_RCC_OscConfig+0x4b8>)
 8001f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f5a:	4a56      	ldr	r2, [pc, #344]	; (80020b4 <HAL_RCC_OscConfig+0x4b8>)
 8001f5c:	f023 0301 	bic.w	r3, r3, #1
 8001f60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f64:	4b53      	ldr	r3, [pc, #332]	; (80020b4 <HAL_RCC_OscConfig+0x4b8>)
 8001f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6a:	4a52      	ldr	r2, [pc, #328]	; (80020b4 <HAL_RCC_OscConfig+0x4b8>)
 8001f6c:	f023 0304 	bic.w	r3, r3, #4
 8001f70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d016      	beq.n	8001faa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f7c:	f7ff f9e4 	bl	8001348 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f82:	e00a      	b.n	8001f9a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f84:	f7ff f9e0 	bl	8001348 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e140      	b.n	800221c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f9a:	4b46      	ldr	r3, [pc, #280]	; (80020b4 <HAL_RCC_OscConfig+0x4b8>)
 8001f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0ed      	beq.n	8001f84 <HAL_RCC_OscConfig+0x388>
 8001fa8:	e015      	b.n	8001fd6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001faa:	f7ff f9cd 	bl	8001348 <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fb0:	e00a      	b.n	8001fc8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb2:	f7ff f9c9 	bl	8001348 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e129      	b.n	800221c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fc8:	4b3a      	ldr	r3, [pc, #232]	; (80020b4 <HAL_RCC_OscConfig+0x4b8>)
 8001fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1ed      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001fd6:	7ffb      	ldrb	r3, [r7, #31]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d105      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fdc:	4b35      	ldr	r3, [pc, #212]	; (80020b4 <HAL_RCC_OscConfig+0x4b8>)
 8001fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe0:	4a34      	ldr	r2, [pc, #208]	; (80020b4 <HAL_RCC_OscConfig+0x4b8>)
 8001fe2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fe6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0320 	and.w	r3, r3, #32
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d03c      	beq.n	800206e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d01c      	beq.n	8002036 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ffc:	4b2d      	ldr	r3, [pc, #180]	; (80020b4 <HAL_RCC_OscConfig+0x4b8>)
 8001ffe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002002:	4a2c      	ldr	r2, [pc, #176]	; (80020b4 <HAL_RCC_OscConfig+0x4b8>)
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800200c:	f7ff f99c 	bl	8001348 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002014:	f7ff f998 	bl	8001348 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e0fa      	b.n	800221c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002026:	4b23      	ldr	r3, [pc, #140]	; (80020b4 <HAL_RCC_OscConfig+0x4b8>)
 8002028:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0ef      	beq.n	8002014 <HAL_RCC_OscConfig+0x418>
 8002034:	e01b      	b.n	800206e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002036:	4b1f      	ldr	r3, [pc, #124]	; (80020b4 <HAL_RCC_OscConfig+0x4b8>)
 8002038:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800203c:	4a1d      	ldr	r2, [pc, #116]	; (80020b4 <HAL_RCC_OscConfig+0x4b8>)
 800203e:	f023 0301 	bic.w	r3, r3, #1
 8002042:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002046:	f7ff f97f 	bl	8001348 <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800204e:	f7ff f97b 	bl	8001348 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e0dd      	b.n	800221c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002060:	4b14      	ldr	r3, [pc, #80]	; (80020b4 <HAL_RCC_OscConfig+0x4b8>)
 8002062:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1ef      	bne.n	800204e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	2b00      	cmp	r3, #0
 8002074:	f000 80d1 	beq.w	800221a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002078:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <HAL_RCC_OscConfig+0x4b8>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 030c 	and.w	r3, r3, #12
 8002080:	2b0c      	cmp	r3, #12
 8002082:	f000 808b 	beq.w	800219c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	2b02      	cmp	r3, #2
 800208c:	d15e      	bne.n	800214c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800208e:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <HAL_RCC_OscConfig+0x4b8>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a08      	ldr	r2, [pc, #32]	; (80020b4 <HAL_RCC_OscConfig+0x4b8>)
 8002094:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002098:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209a:	f7ff f955 	bl	8001348 <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020a0:	e00c      	b.n	80020bc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a2:	f7ff f951 	bl	8001348 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d905      	bls.n	80020bc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e0b3      	b.n	800221c <HAL_RCC_OscConfig+0x620>
 80020b4:	40021000 	.word	0x40021000
 80020b8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020bc:	4b59      	ldr	r3, [pc, #356]	; (8002224 <HAL_RCC_OscConfig+0x628>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1ec      	bne.n	80020a2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020c8:	4b56      	ldr	r3, [pc, #344]	; (8002224 <HAL_RCC_OscConfig+0x628>)
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	4b56      	ldr	r3, [pc, #344]	; (8002228 <HAL_RCC_OscConfig+0x62c>)
 80020ce:	4013      	ands	r3, r2
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6a11      	ldr	r1, [r2, #32]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020d8:	3a01      	subs	r2, #1
 80020da:	0112      	lsls	r2, r2, #4
 80020dc:	4311      	orrs	r1, r2
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80020e2:	0212      	lsls	r2, r2, #8
 80020e4:	4311      	orrs	r1, r2
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80020ea:	0852      	lsrs	r2, r2, #1
 80020ec:	3a01      	subs	r2, #1
 80020ee:	0552      	lsls	r2, r2, #21
 80020f0:	4311      	orrs	r1, r2
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80020f6:	0852      	lsrs	r2, r2, #1
 80020f8:	3a01      	subs	r2, #1
 80020fa:	0652      	lsls	r2, r2, #25
 80020fc:	4311      	orrs	r1, r2
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002102:	06d2      	lsls	r2, r2, #27
 8002104:	430a      	orrs	r2, r1
 8002106:	4947      	ldr	r1, [pc, #284]	; (8002224 <HAL_RCC_OscConfig+0x628>)
 8002108:	4313      	orrs	r3, r2
 800210a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800210c:	4b45      	ldr	r3, [pc, #276]	; (8002224 <HAL_RCC_OscConfig+0x628>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a44      	ldr	r2, [pc, #272]	; (8002224 <HAL_RCC_OscConfig+0x628>)
 8002112:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002116:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002118:	4b42      	ldr	r3, [pc, #264]	; (8002224 <HAL_RCC_OscConfig+0x628>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	4a41      	ldr	r2, [pc, #260]	; (8002224 <HAL_RCC_OscConfig+0x628>)
 800211e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002122:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002124:	f7ff f910 	bl	8001348 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800212c:	f7ff f90c 	bl	8001348 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e06e      	b.n	800221c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800213e:	4b39      	ldr	r3, [pc, #228]	; (8002224 <HAL_RCC_OscConfig+0x628>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d0f0      	beq.n	800212c <HAL_RCC_OscConfig+0x530>
 800214a:	e066      	b.n	800221a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214c:	4b35      	ldr	r3, [pc, #212]	; (8002224 <HAL_RCC_OscConfig+0x628>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a34      	ldr	r2, [pc, #208]	; (8002224 <HAL_RCC_OscConfig+0x628>)
 8002152:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002156:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002158:	4b32      	ldr	r3, [pc, #200]	; (8002224 <HAL_RCC_OscConfig+0x628>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	4a31      	ldr	r2, [pc, #196]	; (8002224 <HAL_RCC_OscConfig+0x628>)
 800215e:	f023 0303 	bic.w	r3, r3, #3
 8002162:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002164:	4b2f      	ldr	r3, [pc, #188]	; (8002224 <HAL_RCC_OscConfig+0x628>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	4a2e      	ldr	r2, [pc, #184]	; (8002224 <HAL_RCC_OscConfig+0x628>)
 800216a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800216e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002172:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002174:	f7ff f8e8 	bl	8001348 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800217c:	f7ff f8e4 	bl	8001348 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e046      	b.n	800221c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800218e:	4b25      	ldr	r3, [pc, #148]	; (8002224 <HAL_RCC_OscConfig+0x628>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f0      	bne.n	800217c <HAL_RCC_OscConfig+0x580>
 800219a:	e03e      	b.n	800221a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	69db      	ldr	r3, [r3, #28]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d101      	bne.n	80021a8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e039      	b.n	800221c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80021a8:	4b1e      	ldr	r3, [pc, #120]	; (8002224 <HAL_RCC_OscConfig+0x628>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	f003 0203 	and.w	r2, r3, #3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d12c      	bne.n	8002216 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c6:	3b01      	subs	r3, #1
 80021c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d123      	bne.n	8002216 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021da:	429a      	cmp	r2, r3
 80021dc:	d11b      	bne.n	8002216 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d113      	bne.n	8002216 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f8:	085b      	lsrs	r3, r3, #1
 80021fa:	3b01      	subs	r3, #1
 80021fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021fe:	429a      	cmp	r2, r3
 8002200:	d109      	bne.n	8002216 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800220c:	085b      	lsrs	r3, r3, #1
 800220e:	3b01      	subs	r3, #1
 8002210:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002212:	429a      	cmp	r2, r3
 8002214:	d001      	beq.n	800221a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e000      	b.n	800221c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3720      	adds	r7, #32
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40021000 	.word	0x40021000
 8002228:	019f800c 	.word	0x019f800c

0800222c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e11e      	b.n	8002482 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002244:	4b91      	ldr	r3, [pc, #580]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 030f 	and.w	r3, r3, #15
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	429a      	cmp	r2, r3
 8002250:	d910      	bls.n	8002274 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002252:	4b8e      	ldr	r3, [pc, #568]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f023 020f 	bic.w	r2, r3, #15
 800225a:	498c      	ldr	r1, [pc, #560]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	4313      	orrs	r3, r2
 8002260:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002262:	4b8a      	ldr	r3, [pc, #552]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	429a      	cmp	r2, r3
 800226e:	d001      	beq.n	8002274 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e106      	b.n	8002482 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	2b00      	cmp	r3, #0
 800227e:	d073      	beq.n	8002368 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b03      	cmp	r3, #3
 8002286:	d129      	bne.n	80022dc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002288:	4b81      	ldr	r3, [pc, #516]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e0f4      	b.n	8002482 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002298:	f000 f9d0 	bl	800263c <RCC_GetSysClockFreqFromPLLSource>
 800229c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	4a7c      	ldr	r2, [pc, #496]	; (8002494 <HAL_RCC_ClockConfig+0x268>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d93f      	bls.n	8002326 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80022a6:	4b7a      	ldr	r3, [pc, #488]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d009      	beq.n	80022c6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d033      	beq.n	8002326 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d12f      	bne.n	8002326 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80022c6:	4b72      	ldr	r3, [pc, #456]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022ce:	4a70      	ldr	r2, [pc, #448]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 80022d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022d4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80022d6:	2380      	movs	r3, #128	; 0x80
 80022d8:	617b      	str	r3, [r7, #20]
 80022da:	e024      	b.n	8002326 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d107      	bne.n	80022f4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022e4:	4b6a      	ldr	r3, [pc, #424]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d109      	bne.n	8002304 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e0c6      	b.n	8002482 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022f4:	4b66      	ldr	r3, [pc, #408]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d101      	bne.n	8002304 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e0be      	b.n	8002482 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002304:	f000 f8ce 	bl	80024a4 <HAL_RCC_GetSysClockFreq>
 8002308:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	4a61      	ldr	r2, [pc, #388]	; (8002494 <HAL_RCC_ClockConfig+0x268>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d909      	bls.n	8002326 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002312:	4b5f      	ldr	r3, [pc, #380]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800231a:	4a5d      	ldr	r2, [pc, #372]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 800231c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002320:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002322:	2380      	movs	r3, #128	; 0x80
 8002324:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002326:	4b5a      	ldr	r3, [pc, #360]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f023 0203 	bic.w	r2, r3, #3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	4957      	ldr	r1, [pc, #348]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 8002334:	4313      	orrs	r3, r2
 8002336:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002338:	f7ff f806 	bl	8001348 <HAL_GetTick>
 800233c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800233e:	e00a      	b.n	8002356 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002340:	f7ff f802 	bl	8001348 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	f241 3288 	movw	r2, #5000	; 0x1388
 800234e:	4293      	cmp	r3, r2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e095      	b.n	8002482 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002356:	4b4e      	ldr	r3, [pc, #312]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 020c 	and.w	r2, r3, #12
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	429a      	cmp	r2, r3
 8002366:	d1eb      	bne.n	8002340 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d023      	beq.n	80023bc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002380:	4b43      	ldr	r3, [pc, #268]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	4a42      	ldr	r2, [pc, #264]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 8002386:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800238a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0308 	and.w	r3, r3, #8
 8002394:	2b00      	cmp	r3, #0
 8002396:	d007      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002398:	4b3d      	ldr	r3, [pc, #244]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80023a0:	4a3b      	ldr	r2, [pc, #236]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 80023a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023a8:	4b39      	ldr	r3, [pc, #228]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	4936      	ldr	r1, [pc, #216]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	608b      	str	r3, [r1, #8]
 80023ba:	e008      	b.n	80023ce <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	2b80      	cmp	r3, #128	; 0x80
 80023c0:	d105      	bne.n	80023ce <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80023c2:	4b33      	ldr	r3, [pc, #204]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	4a32      	ldr	r2, [pc, #200]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 80023c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023cc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023ce:	4b2f      	ldr	r3, [pc, #188]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d21d      	bcs.n	8002418 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023dc:	4b2b      	ldr	r3, [pc, #172]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f023 020f 	bic.w	r2, r3, #15
 80023e4:	4929      	ldr	r1, [pc, #164]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023ec:	f7fe ffac 	bl	8001348 <HAL_GetTick>
 80023f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f2:	e00a      	b.n	800240a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f4:	f7fe ffa8 	bl	8001348 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002402:	4293      	cmp	r3, r2
 8002404:	d901      	bls.n	800240a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e03b      	b.n	8002482 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800240a:	4b20      	ldr	r3, [pc, #128]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	429a      	cmp	r2, r3
 8002416:	d1ed      	bne.n	80023f4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0304 	and.w	r3, r3, #4
 8002420:	2b00      	cmp	r3, #0
 8002422:	d008      	beq.n	8002436 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002424:	4b1a      	ldr	r3, [pc, #104]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	4917      	ldr	r1, [pc, #92]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 8002432:	4313      	orrs	r3, r2
 8002434:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	2b00      	cmp	r3, #0
 8002440:	d009      	beq.n	8002456 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002442:	4b13      	ldr	r3, [pc, #76]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	490f      	ldr	r1, [pc, #60]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 8002452:	4313      	orrs	r3, r2
 8002454:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002456:	f000 f825 	bl	80024a4 <HAL_RCC_GetSysClockFreq>
 800245a:	4602      	mov	r2, r0
 800245c:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	091b      	lsrs	r3, r3, #4
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	490c      	ldr	r1, [pc, #48]	; (8002498 <HAL_RCC_ClockConfig+0x26c>)
 8002468:	5ccb      	ldrb	r3, [r1, r3]
 800246a:	f003 031f 	and.w	r3, r3, #31
 800246e:	fa22 f303 	lsr.w	r3, r2, r3
 8002472:	4a0a      	ldr	r2, [pc, #40]	; (800249c <HAL_RCC_ClockConfig+0x270>)
 8002474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002476:	4b0a      	ldr	r3, [pc, #40]	; (80024a0 <HAL_RCC_ClockConfig+0x274>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f7fe fbaa 	bl	8000bd4 <HAL_InitTick>
 8002480:	4603      	mov	r3, r0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40022000 	.word	0x40022000
 8002490:	40021000 	.word	0x40021000
 8002494:	04c4b400 	.word	0x04c4b400
 8002498:	08007bdc 	.word	0x08007bdc
 800249c:	20000000 	.word	0x20000000
 80024a0:	20000004 	.word	0x20000004

080024a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b087      	sub	sp, #28
 80024a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80024aa:	4b2c      	ldr	r3, [pc, #176]	; (800255c <HAL_RCC_GetSysClockFreq+0xb8>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 030c 	and.w	r3, r3, #12
 80024b2:	2b04      	cmp	r3, #4
 80024b4:	d102      	bne.n	80024bc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024b6:	4b2a      	ldr	r3, [pc, #168]	; (8002560 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024b8:	613b      	str	r3, [r7, #16]
 80024ba:	e047      	b.n	800254c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80024bc:	4b27      	ldr	r3, [pc, #156]	; (800255c <HAL_RCC_GetSysClockFreq+0xb8>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 030c 	and.w	r3, r3, #12
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	d102      	bne.n	80024ce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024c8:	4b26      	ldr	r3, [pc, #152]	; (8002564 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024ca:	613b      	str	r3, [r7, #16]
 80024cc:	e03e      	b.n	800254c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80024ce:	4b23      	ldr	r3, [pc, #140]	; (800255c <HAL_RCC_GetSysClockFreq+0xb8>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 030c 	and.w	r3, r3, #12
 80024d6:	2b0c      	cmp	r3, #12
 80024d8:	d136      	bne.n	8002548 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024da:	4b20      	ldr	r3, [pc, #128]	; (800255c <HAL_RCC_GetSysClockFreq+0xb8>)
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024e4:	4b1d      	ldr	r3, [pc, #116]	; (800255c <HAL_RCC_GetSysClockFreq+0xb8>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	3301      	adds	r3, #1
 80024f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2b03      	cmp	r3, #3
 80024f6:	d10c      	bne.n	8002512 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024f8:	4a1a      	ldr	r2, [pc, #104]	; (8002564 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002500:	4a16      	ldr	r2, [pc, #88]	; (800255c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002502:	68d2      	ldr	r2, [r2, #12]
 8002504:	0a12      	lsrs	r2, r2, #8
 8002506:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800250a:	fb02 f303 	mul.w	r3, r2, r3
 800250e:	617b      	str	r3, [r7, #20]
      break;
 8002510:	e00c      	b.n	800252c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002512:	4a13      	ldr	r2, [pc, #76]	; (8002560 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	fbb2 f3f3 	udiv	r3, r2, r3
 800251a:	4a10      	ldr	r2, [pc, #64]	; (800255c <HAL_RCC_GetSysClockFreq+0xb8>)
 800251c:	68d2      	ldr	r2, [r2, #12]
 800251e:	0a12      	lsrs	r2, r2, #8
 8002520:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002524:	fb02 f303 	mul.w	r3, r2, r3
 8002528:	617b      	str	r3, [r7, #20]
      break;
 800252a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800252c:	4b0b      	ldr	r3, [pc, #44]	; (800255c <HAL_RCC_GetSysClockFreq+0xb8>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	0e5b      	lsrs	r3, r3, #25
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	3301      	adds	r3, #1
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	fbb2 f3f3 	udiv	r3, r2, r3
 8002544:	613b      	str	r3, [r7, #16]
 8002546:	e001      	b.n	800254c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002548:	2300      	movs	r3, #0
 800254a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800254c:	693b      	ldr	r3, [r7, #16]
}
 800254e:	4618      	mov	r0, r3
 8002550:	371c      	adds	r7, #28
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	40021000 	.word	0x40021000
 8002560:	00f42400 	.word	0x00f42400
 8002564:	016e3600 	.word	0x016e3600

08002568 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800256c:	4b03      	ldr	r3, [pc, #12]	; (800257c <HAL_RCC_GetHCLKFreq+0x14>)
 800256e:	681b      	ldr	r3, [r3, #0]
}
 8002570:	4618      	mov	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	20000000 	.word	0x20000000

08002580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002584:	f7ff fff0 	bl	8002568 <HAL_RCC_GetHCLKFreq>
 8002588:	4602      	mov	r2, r0
 800258a:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	0a1b      	lsrs	r3, r3, #8
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	4904      	ldr	r1, [pc, #16]	; (80025a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002596:	5ccb      	ldrb	r3, [r1, r3]
 8002598:	f003 031f 	and.w	r3, r3, #31
 800259c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40021000 	.word	0x40021000
 80025a8:	08007bec 	.word	0x08007bec

080025ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025b0:	f7ff ffda 	bl	8002568 <HAL_RCC_GetHCLKFreq>
 80025b4:	4602      	mov	r2, r0
 80025b6:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	0adb      	lsrs	r3, r3, #11
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	4904      	ldr	r1, [pc, #16]	; (80025d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025c2:	5ccb      	ldrb	r3, [r1, r3]
 80025c4:	f003 031f 	and.w	r3, r3, #31
 80025c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40021000 	.word	0x40021000
 80025d4:	08007bec 	.word	0x08007bec

080025d8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	220f      	movs	r2, #15
 80025e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80025e8:	4b12      	ldr	r3, [pc, #72]	; (8002634 <HAL_RCC_GetClockConfig+0x5c>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f003 0203 	and.w	r2, r3, #3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80025f4:	4b0f      	ldr	r3, [pc, #60]	; (8002634 <HAL_RCC_GetClockConfig+0x5c>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002600:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <HAL_RCC_GetClockConfig+0x5c>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800260c:	4b09      	ldr	r3, [pc, #36]	; (8002634 <HAL_RCC_GetClockConfig+0x5c>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	08db      	lsrs	r3, r3, #3
 8002612:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800261a:	4b07      	ldr	r3, [pc, #28]	; (8002638 <HAL_RCC_GetClockConfig+0x60>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 020f 	and.w	r2, r3, #15
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	601a      	str	r2, [r3, #0]
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	40021000 	.word	0x40021000
 8002638:	40022000 	.word	0x40022000

0800263c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800263c:	b480      	push	{r7}
 800263e:	b087      	sub	sp, #28
 8002640:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002642:	4b1e      	ldr	r3, [pc, #120]	; (80026bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800264c:	4b1b      	ldr	r3, [pc, #108]	; (80026bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	091b      	lsrs	r3, r3, #4
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	3301      	adds	r3, #1
 8002658:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	2b03      	cmp	r3, #3
 800265e:	d10c      	bne.n	800267a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002660:	4a17      	ldr	r2, [pc, #92]	; (80026c0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	fbb2 f3f3 	udiv	r3, r2, r3
 8002668:	4a14      	ldr	r2, [pc, #80]	; (80026bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800266a:	68d2      	ldr	r2, [r2, #12]
 800266c:	0a12      	lsrs	r2, r2, #8
 800266e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002672:	fb02 f303 	mul.w	r3, r2, r3
 8002676:	617b      	str	r3, [r7, #20]
    break;
 8002678:	e00c      	b.n	8002694 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800267a:	4a12      	ldr	r2, [pc, #72]	; (80026c4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002682:	4a0e      	ldr	r2, [pc, #56]	; (80026bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002684:	68d2      	ldr	r2, [r2, #12]
 8002686:	0a12      	lsrs	r2, r2, #8
 8002688:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800268c:	fb02 f303 	mul.w	r3, r2, r3
 8002690:	617b      	str	r3, [r7, #20]
    break;
 8002692:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002694:	4b09      	ldr	r3, [pc, #36]	; (80026bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	0e5b      	lsrs	r3, r3, #25
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	3301      	adds	r3, #1
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80026ae:	687b      	ldr	r3, [r7, #4]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	371c      	adds	r7, #28
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	40021000 	.word	0x40021000
 80026c0:	016e3600 	.word	0x016e3600
 80026c4:	00f42400 	.word	0x00f42400

080026c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026d0:	2300      	movs	r3, #0
 80026d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026d4:	2300      	movs	r3, #0
 80026d6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 8098 	beq.w	8002816 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026e6:	2300      	movs	r3, #0
 80026e8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ea:	4b43      	ldr	r3, [pc, #268]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10d      	bne.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f6:	4b40      	ldr	r3, [pc, #256]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fa:	4a3f      	ldr	r2, [pc, #252]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002700:	6593      	str	r3, [r2, #88]	; 0x58
 8002702:	4b3d      	ldr	r3, [pc, #244]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270a:	60bb      	str	r3, [r7, #8]
 800270c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800270e:	2301      	movs	r3, #1
 8002710:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002712:	4b3a      	ldr	r3, [pc, #232]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a39      	ldr	r2, [pc, #228]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800271c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800271e:	f7fe fe13 	bl	8001348 <HAL_GetTick>
 8002722:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002724:	e009      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002726:	f7fe fe0f 	bl	8001348 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d902      	bls.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	74fb      	strb	r3, [r7, #19]
        break;
 8002738:	e005      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800273a:	4b30      	ldr	r3, [pc, #192]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0ef      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002746:	7cfb      	ldrb	r3, [r7, #19]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d159      	bne.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800274c:	4b2a      	ldr	r3, [pc, #168]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800274e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002756:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d01e      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	429a      	cmp	r2, r3
 8002766:	d019      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002768:	4b23      	ldr	r3, [pc, #140]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800276a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002772:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002774:	4b20      	ldr	r3, [pc, #128]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800277a:	4a1f      	ldr	r2, [pc, #124]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800277c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002780:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002784:	4b1c      	ldr	r3, [pc, #112]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800278a:	4a1b      	ldr	r2, [pc, #108]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800278c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002790:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002794:	4a18      	ldr	r2, [pc, #96]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d016      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a6:	f7fe fdcf 	bl	8001348 <HAL_GetTick>
 80027aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ac:	e00b      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ae:	f7fe fdcb 	bl	8001348 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027bc:	4293      	cmp	r3, r2
 80027be:	d902      	bls.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	74fb      	strb	r3, [r7, #19]
            break;
 80027c4:	e006      	b.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027c6:	4b0c      	ldr	r3, [pc, #48]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0ec      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80027d4:	7cfb      	ldrb	r3, [r7, #19]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10b      	bne.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027da:	4b07      	ldr	r3, [pc, #28]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027e8:	4903      	ldr	r1, [pc, #12]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80027f0:	e008      	b.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027f2:	7cfb      	ldrb	r3, [r7, #19]
 80027f4:	74bb      	strb	r3, [r7, #18]
 80027f6:	e005      	b.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80027f8:	40021000 	.word	0x40021000
 80027fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002800:	7cfb      	ldrb	r3, [r7, #19]
 8002802:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002804:	7c7b      	ldrb	r3, [r7, #17]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d105      	bne.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800280a:	4ba7      	ldr	r3, [pc, #668]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800280c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280e:	4aa6      	ldr	r2, [pc, #664]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002810:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002814:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00a      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002822:	4ba1      	ldr	r3, [pc, #644]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002828:	f023 0203 	bic.w	r2, r3, #3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	499d      	ldr	r1, [pc, #628]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002832:	4313      	orrs	r3, r2
 8002834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00a      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002844:	4b98      	ldr	r3, [pc, #608]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284a:	f023 020c 	bic.w	r2, r3, #12
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	4995      	ldr	r1, [pc, #596]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002854:	4313      	orrs	r3, r2
 8002856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0304 	and.w	r3, r3, #4
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00a      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002866:	4b90      	ldr	r3, [pc, #576]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	498c      	ldr	r1, [pc, #560]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002876:	4313      	orrs	r3, r2
 8002878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0308 	and.w	r3, r3, #8
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00a      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002888:	4b87      	ldr	r3, [pc, #540]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800288a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	4984      	ldr	r1, [pc, #528]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002898:	4313      	orrs	r3, r2
 800289a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0310 	and.w	r3, r3, #16
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00a      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028aa:	4b7f      	ldr	r3, [pc, #508]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	497b      	ldr	r1, [pc, #492]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0320 	and.w	r3, r3, #32
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00a      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028cc:	4b76      	ldr	r3, [pc, #472]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	4973      	ldr	r1, [pc, #460]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00a      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028ee:	4b6e      	ldr	r3, [pc, #440]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	496a      	ldr	r1, [pc, #424]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00a      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002910:	4b65      	ldr	r3, [pc, #404]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002916:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	4962      	ldr	r1, [pc, #392]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002920:	4313      	orrs	r3, r2
 8002922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00a      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002932:	4b5d      	ldr	r3, [pc, #372]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002938:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	4959      	ldr	r1, [pc, #356]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002942:	4313      	orrs	r3, r2
 8002944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00a      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002954:	4b54      	ldr	r3, [pc, #336]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002956:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800295a:	f023 0203 	bic.w	r2, r3, #3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002962:	4951      	ldr	r1, [pc, #324]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002964:	4313      	orrs	r3, r2
 8002966:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00a      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002976:	4b4c      	ldr	r3, [pc, #304]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002984:	4948      	ldr	r1, [pc, #288]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002986:	4313      	orrs	r3, r2
 8002988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002994:	2b00      	cmp	r3, #0
 8002996:	d015      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002998:	4b43      	ldr	r3, [pc, #268]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800299a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	4940      	ldr	r1, [pc, #256]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029b6:	d105      	bne.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029b8:	4b3b      	ldr	r3, [pc, #236]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	4a3a      	ldr	r2, [pc, #232]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029c2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d015      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80029d0:	4b35      	ldr	r3, [pc, #212]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029de:	4932      	ldr	r1, [pc, #200]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029ee:	d105      	bne.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029f0:	4b2d      	ldr	r3, [pc, #180]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	4a2c      	ldr	r2, [pc, #176]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029fa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d015      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a08:	4b27      	ldr	r3, [pc, #156]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a16:	4924      	ldr	r1, [pc, #144]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a22:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a26:	d105      	bne.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a28:	4b1f      	ldr	r3, [pc, #124]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	4a1e      	ldr	r2, [pc, #120]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a32:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d015      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a40:	4b19      	ldr	r3, [pc, #100]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4e:	4916      	ldr	r1, [pc, #88]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a5e:	d105      	bne.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a60:	4b11      	ldr	r3, [pc, #68]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	4a10      	ldr	r2, [pc, #64]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a6a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d019      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a78:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	4908      	ldr	r1, [pc, #32]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a96:	d109      	bne.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a98:	4b03      	ldr	r3, [pc, #12]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	4a02      	ldr	r2, [pc, #8]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aa2:	60d3      	str	r3, [r2, #12]
 8002aa4:	e002      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002aa6:	bf00      	nop
 8002aa8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d015      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ab8:	4b29      	ldr	r3, [pc, #164]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002abe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac6:	4926      	ldr	r1, [pc, #152]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ad6:	d105      	bne.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002ad8:	4b21      	ldr	r3, [pc, #132]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	4a20      	ldr	r2, [pc, #128]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d015      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002af0:	4b1b      	ldr	r3, [pc, #108]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002afe:	4918      	ldr	r1, [pc, #96]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b0e:	d105      	bne.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b10:	4b13      	ldr	r3, [pc, #76]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	4a12      	ldr	r2, [pc, #72]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b1a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d015      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002b28:	4b0d      	ldr	r3, [pc, #52]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b36:	490a      	ldr	r1, [pc, #40]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b46:	d105      	bne.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b48:	4b05      	ldr	r3, [pc, #20]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	4a04      	ldr	r2, [pc, #16]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b52:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002b54:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3718      	adds	r7, #24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40021000 	.word	0x40021000

08002b64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e049      	b.n	8002c0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d106      	bne.n	8002b90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7fe fa6e 	bl	800106c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2202      	movs	r2, #2
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3304      	adds	r3, #4
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4610      	mov	r0, r2
 8002ba4:	f000 fce0 	bl	8003568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
	...

08002c14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d001      	beq.n	8002c2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e054      	b.n	8002cd6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2202      	movs	r2, #2
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68da      	ldr	r2, [r3, #12]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0201 	orr.w	r2, r2, #1
 8002c42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a26      	ldr	r2, [pc, #152]	; (8002ce4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d022      	beq.n	8002c94 <HAL_TIM_Base_Start_IT+0x80>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c56:	d01d      	beq.n	8002c94 <HAL_TIM_Base_Start_IT+0x80>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a22      	ldr	r2, [pc, #136]	; (8002ce8 <HAL_TIM_Base_Start_IT+0xd4>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d018      	beq.n	8002c94 <HAL_TIM_Base_Start_IT+0x80>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a21      	ldr	r2, [pc, #132]	; (8002cec <HAL_TIM_Base_Start_IT+0xd8>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d013      	beq.n	8002c94 <HAL_TIM_Base_Start_IT+0x80>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a1f      	ldr	r2, [pc, #124]	; (8002cf0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d00e      	beq.n	8002c94 <HAL_TIM_Base_Start_IT+0x80>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a1e      	ldr	r2, [pc, #120]	; (8002cf4 <HAL_TIM_Base_Start_IT+0xe0>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d009      	beq.n	8002c94 <HAL_TIM_Base_Start_IT+0x80>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a1c      	ldr	r2, [pc, #112]	; (8002cf8 <HAL_TIM_Base_Start_IT+0xe4>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d004      	beq.n	8002c94 <HAL_TIM_Base_Start_IT+0x80>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a1b      	ldr	r2, [pc, #108]	; (8002cfc <HAL_TIM_Base_Start_IT+0xe8>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d115      	bne.n	8002cc0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	4b19      	ldr	r3, [pc, #100]	; (8002d00 <HAL_TIM_Base_Start_IT+0xec>)
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2b06      	cmp	r3, #6
 8002ca4:	d015      	beq.n	8002cd2 <HAL_TIM_Base_Start_IT+0xbe>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cac:	d011      	beq.n	8002cd2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f042 0201 	orr.w	r2, r2, #1
 8002cbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cbe:	e008      	b.n	8002cd2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f042 0201 	orr.w	r2, r2, #1
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	e000      	b.n	8002cd4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cd2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	40012c00 	.word	0x40012c00
 8002ce8:	40000400 	.word	0x40000400
 8002cec:	40000800 	.word	0x40000800
 8002cf0:	40000c00 	.word	0x40000c00
 8002cf4:	40013400 	.word	0x40013400
 8002cf8:	40014000 	.word	0x40014000
 8002cfc:	40015000 	.word	0x40015000
 8002d00:	00010007 	.word	0x00010007

08002d04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e049      	b.n	8002daa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d106      	bne.n	8002d30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f841 	bl	8002db2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2202      	movs	r2, #2
 8002d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3304      	adds	r3, #4
 8002d40:	4619      	mov	r1, r3
 8002d42:	4610      	mov	r0, r2
 8002d44:	f000 fc10 	bl	8003568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b082      	sub	sp, #8
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d122      	bne.n	8002e22 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d11b      	bne.n	8002e22 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f06f 0202 	mvn.w	r2, #2
 8002df2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	f003 0303 	and.w	r3, r3, #3
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d003      	beq.n	8002e10 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 fb8f 	bl	800352c <HAL_TIM_IC_CaptureCallback>
 8002e0e:	e005      	b.n	8002e1c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 fb81 	bl	8003518 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 fb92 	bl	8003540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	2b04      	cmp	r3, #4
 8002e2e:	d122      	bne.n	8002e76 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	f003 0304 	and.w	r3, r3, #4
 8002e3a:	2b04      	cmp	r3, #4
 8002e3c:	d11b      	bne.n	8002e76 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f06f 0204 	mvn.w	r2, #4
 8002e46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d003      	beq.n	8002e64 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 fb65 	bl	800352c <HAL_TIM_IC_CaptureCallback>
 8002e62:	e005      	b.n	8002e70 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 fb57 	bl	8003518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 fb68 	bl	8003540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	f003 0308 	and.w	r3, r3, #8
 8002e80:	2b08      	cmp	r3, #8
 8002e82:	d122      	bne.n	8002eca <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	2b08      	cmp	r3, #8
 8002e90:	d11b      	bne.n	8002eca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f06f 0208 	mvn.w	r2, #8
 8002e9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2204      	movs	r2, #4
 8002ea0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	69db      	ldr	r3, [r3, #28]
 8002ea8:	f003 0303 	and.w	r3, r3, #3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d003      	beq.n	8002eb8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 fb3b 	bl	800352c <HAL_TIM_IC_CaptureCallback>
 8002eb6:	e005      	b.n	8002ec4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 fb2d 	bl	8003518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 fb3e 	bl	8003540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	f003 0310 	and.w	r3, r3, #16
 8002ed4:	2b10      	cmp	r3, #16
 8002ed6:	d122      	bne.n	8002f1e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	f003 0310 	and.w	r3, r3, #16
 8002ee2:	2b10      	cmp	r3, #16
 8002ee4:	d11b      	bne.n	8002f1e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f06f 0210 	mvn.w	r2, #16
 8002eee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2208      	movs	r2, #8
 8002ef4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	69db      	ldr	r3, [r3, #28]
 8002efc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 fb11 	bl	800352c <HAL_TIM_IC_CaptureCallback>
 8002f0a:	e005      	b.n	8002f18 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 fb03 	bl	8003518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 fb14 	bl	8003540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d10e      	bne.n	8002f4a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d107      	bne.n	8002f4a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f06f 0201 	mvn.w	r2, #1
 8002f42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f7fd fc3b 	bl	80007c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f54:	2b80      	cmp	r3, #128	; 0x80
 8002f56:	d10e      	bne.n	8002f76 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f62:	2b80      	cmp	r3, #128	; 0x80
 8002f64:	d107      	bne.n	8002f76 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f001 f8b9 	bl	80040e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f84:	d10e      	bne.n	8002fa4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f90:	2b80      	cmp	r3, #128	; 0x80
 8002f92:	d107      	bne.n	8002fa4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f001 f8ac 	bl	80040fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fae:	2b40      	cmp	r3, #64	; 0x40
 8002fb0:	d10e      	bne.n	8002fd0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fbc:	2b40      	cmp	r3, #64	; 0x40
 8002fbe:	d107      	bne.n	8002fd0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 fac2 	bl	8003554 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	f003 0320 	and.w	r3, r3, #32
 8002fda:	2b20      	cmp	r3, #32
 8002fdc:	d10e      	bne.n	8002ffc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f003 0320 	and.w	r3, r3, #32
 8002fe8:	2b20      	cmp	r3, #32
 8002fea:	d107      	bne.n	8002ffc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f06f 0220 	mvn.w	r2, #32
 8002ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f001 f86c 	bl	80040d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003006:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800300a:	d10f      	bne.n	800302c <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003016:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800301a:	d107      	bne.n	800302c <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f001 f872 	bl	8004110 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003036:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800303a:	d10f      	bne.n	800305c <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003046:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800304a:	d107      	bne.n	800305c <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f001 f864 	bl	8004124 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003066:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800306a:	d10f      	bne.n	800308c <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003076:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800307a:	d107      	bne.n	800308c <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8003084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f001 f856 	bl	8004138 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003096:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800309a:	d10f      	bne.n	80030bc <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030aa:	d107      	bne.n	80030bc <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80030b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f001 f848 	bl	800414c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030bc:	bf00      	nop
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d101      	bne.n	80030e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80030de:	2302      	movs	r3, #2
 80030e0:	e0ff      	b.n	80032e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b14      	cmp	r3, #20
 80030ee:	f200 80f0 	bhi.w	80032d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80030f2:	a201      	add	r2, pc, #4	; (adr r2, 80030f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80030f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f8:	0800314d 	.word	0x0800314d
 80030fc:	080032d3 	.word	0x080032d3
 8003100:	080032d3 	.word	0x080032d3
 8003104:	080032d3 	.word	0x080032d3
 8003108:	0800318d 	.word	0x0800318d
 800310c:	080032d3 	.word	0x080032d3
 8003110:	080032d3 	.word	0x080032d3
 8003114:	080032d3 	.word	0x080032d3
 8003118:	080031cf 	.word	0x080031cf
 800311c:	080032d3 	.word	0x080032d3
 8003120:	080032d3 	.word	0x080032d3
 8003124:	080032d3 	.word	0x080032d3
 8003128:	0800320f 	.word	0x0800320f
 800312c:	080032d3 	.word	0x080032d3
 8003130:	080032d3 	.word	0x080032d3
 8003134:	080032d3 	.word	0x080032d3
 8003138:	08003251 	.word	0x08003251
 800313c:	080032d3 	.word	0x080032d3
 8003140:	080032d3 	.word	0x080032d3
 8003144:	080032d3 	.word	0x080032d3
 8003148:	08003291 	.word	0x08003291
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68b9      	ldr	r1, [r7, #8]
 8003152:	4618      	mov	r0, r3
 8003154:	f000 fab0 	bl	80036b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	699a      	ldr	r2, [r3, #24]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0208 	orr.w	r2, r2, #8
 8003166:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	699a      	ldr	r2, [r3, #24]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f022 0204 	bic.w	r2, r2, #4
 8003176:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6999      	ldr	r1, [r3, #24]
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	691a      	ldr	r2, [r3, #16]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	619a      	str	r2, [r3, #24]
      break;
 800318a:	e0a5      	b.n	80032d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68b9      	ldr	r1, [r7, #8]
 8003192:	4618      	mov	r0, r3
 8003194:	f000 fb2a 	bl	80037ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	699a      	ldr	r2, [r3, #24]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	699a      	ldr	r2, [r3, #24]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6999      	ldr	r1, [r3, #24]
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	021a      	lsls	r2, r3, #8
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	619a      	str	r2, [r3, #24]
      break;
 80031cc:	e084      	b.n	80032d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68b9      	ldr	r1, [r7, #8]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f000 fb9d 	bl	8003914 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	69da      	ldr	r2, [r3, #28]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f042 0208 	orr.w	r2, r2, #8
 80031e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	69da      	ldr	r2, [r3, #28]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0204 	bic.w	r2, r2, #4
 80031f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	69d9      	ldr	r1, [r3, #28]
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	691a      	ldr	r2, [r3, #16]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	61da      	str	r2, [r3, #28]
      break;
 800320c:	e064      	b.n	80032d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68b9      	ldr	r1, [r7, #8]
 8003214:	4618      	mov	r0, r3
 8003216:	f000 fc0f 	bl	8003a38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	69da      	ldr	r2, [r3, #28]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003228:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	69da      	ldr	r2, [r3, #28]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003238:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	69d9      	ldr	r1, [r3, #28]
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	021a      	lsls	r2, r3, #8
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	61da      	str	r2, [r3, #28]
      break;
 800324e:	e043      	b.n	80032d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68b9      	ldr	r1, [r7, #8]
 8003256:	4618      	mov	r0, r3
 8003258:	f000 fc82 	bl	8003b60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 0208 	orr.w	r2, r2, #8
 800326a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 0204 	bic.w	r2, r2, #4
 800327a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	691a      	ldr	r2, [r3, #16]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800328e:	e023      	b.n	80032d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68b9      	ldr	r1, [r7, #8]
 8003296:	4618      	mov	r0, r3
 8003298:	f000 fccc 	bl	8003c34 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ba:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	021a      	lsls	r2, r3, #8
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80032d0:	e002      	b.n	80032d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	75fb      	strb	r3, [r7, #23]
      break;
 80032d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3718      	adds	r7, #24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop

080032ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032f6:	2300      	movs	r3, #0
 80032f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003300:	2b01      	cmp	r3, #1
 8003302:	d101      	bne.n	8003308 <HAL_TIM_ConfigClockSource+0x1c>
 8003304:	2302      	movs	r3, #2
 8003306:	e0f6      	b.n	80034f6 <HAL_TIM_ConfigClockSource+0x20a>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2202      	movs	r2, #2
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003326:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800332a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003332:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a6f      	ldr	r2, [pc, #444]	; (8003500 <HAL_TIM_ConfigClockSource+0x214>)
 8003342:	4293      	cmp	r3, r2
 8003344:	f000 80c1 	beq.w	80034ca <HAL_TIM_ConfigClockSource+0x1de>
 8003348:	4a6d      	ldr	r2, [pc, #436]	; (8003500 <HAL_TIM_ConfigClockSource+0x214>)
 800334a:	4293      	cmp	r3, r2
 800334c:	f200 80c6 	bhi.w	80034dc <HAL_TIM_ConfigClockSource+0x1f0>
 8003350:	4a6c      	ldr	r2, [pc, #432]	; (8003504 <HAL_TIM_ConfigClockSource+0x218>)
 8003352:	4293      	cmp	r3, r2
 8003354:	f000 80b9 	beq.w	80034ca <HAL_TIM_ConfigClockSource+0x1de>
 8003358:	4a6a      	ldr	r2, [pc, #424]	; (8003504 <HAL_TIM_ConfigClockSource+0x218>)
 800335a:	4293      	cmp	r3, r2
 800335c:	f200 80be 	bhi.w	80034dc <HAL_TIM_ConfigClockSource+0x1f0>
 8003360:	4a69      	ldr	r2, [pc, #420]	; (8003508 <HAL_TIM_ConfigClockSource+0x21c>)
 8003362:	4293      	cmp	r3, r2
 8003364:	f000 80b1 	beq.w	80034ca <HAL_TIM_ConfigClockSource+0x1de>
 8003368:	4a67      	ldr	r2, [pc, #412]	; (8003508 <HAL_TIM_ConfigClockSource+0x21c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	f200 80b6 	bhi.w	80034dc <HAL_TIM_ConfigClockSource+0x1f0>
 8003370:	4a66      	ldr	r2, [pc, #408]	; (800350c <HAL_TIM_ConfigClockSource+0x220>)
 8003372:	4293      	cmp	r3, r2
 8003374:	f000 80a9 	beq.w	80034ca <HAL_TIM_ConfigClockSource+0x1de>
 8003378:	4a64      	ldr	r2, [pc, #400]	; (800350c <HAL_TIM_ConfigClockSource+0x220>)
 800337a:	4293      	cmp	r3, r2
 800337c:	f200 80ae 	bhi.w	80034dc <HAL_TIM_ConfigClockSource+0x1f0>
 8003380:	4a63      	ldr	r2, [pc, #396]	; (8003510 <HAL_TIM_ConfigClockSource+0x224>)
 8003382:	4293      	cmp	r3, r2
 8003384:	f000 80a1 	beq.w	80034ca <HAL_TIM_ConfigClockSource+0x1de>
 8003388:	4a61      	ldr	r2, [pc, #388]	; (8003510 <HAL_TIM_ConfigClockSource+0x224>)
 800338a:	4293      	cmp	r3, r2
 800338c:	f200 80a6 	bhi.w	80034dc <HAL_TIM_ConfigClockSource+0x1f0>
 8003390:	4a60      	ldr	r2, [pc, #384]	; (8003514 <HAL_TIM_ConfigClockSource+0x228>)
 8003392:	4293      	cmp	r3, r2
 8003394:	f000 8099 	beq.w	80034ca <HAL_TIM_ConfigClockSource+0x1de>
 8003398:	4a5e      	ldr	r2, [pc, #376]	; (8003514 <HAL_TIM_ConfigClockSource+0x228>)
 800339a:	4293      	cmp	r3, r2
 800339c:	f200 809e 	bhi.w	80034dc <HAL_TIM_ConfigClockSource+0x1f0>
 80033a0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80033a4:	f000 8091 	beq.w	80034ca <HAL_TIM_ConfigClockSource+0x1de>
 80033a8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80033ac:	f200 8096 	bhi.w	80034dc <HAL_TIM_ConfigClockSource+0x1f0>
 80033b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033b4:	f000 8089 	beq.w	80034ca <HAL_TIM_ConfigClockSource+0x1de>
 80033b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033bc:	f200 808e 	bhi.w	80034dc <HAL_TIM_ConfigClockSource+0x1f0>
 80033c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033c4:	d03e      	beq.n	8003444 <HAL_TIM_ConfigClockSource+0x158>
 80033c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033ca:	f200 8087 	bhi.w	80034dc <HAL_TIM_ConfigClockSource+0x1f0>
 80033ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d2:	f000 8086 	beq.w	80034e2 <HAL_TIM_ConfigClockSource+0x1f6>
 80033d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033da:	d87f      	bhi.n	80034dc <HAL_TIM_ConfigClockSource+0x1f0>
 80033dc:	2b70      	cmp	r3, #112	; 0x70
 80033de:	d01a      	beq.n	8003416 <HAL_TIM_ConfigClockSource+0x12a>
 80033e0:	2b70      	cmp	r3, #112	; 0x70
 80033e2:	d87b      	bhi.n	80034dc <HAL_TIM_ConfigClockSource+0x1f0>
 80033e4:	2b60      	cmp	r3, #96	; 0x60
 80033e6:	d050      	beq.n	800348a <HAL_TIM_ConfigClockSource+0x19e>
 80033e8:	2b60      	cmp	r3, #96	; 0x60
 80033ea:	d877      	bhi.n	80034dc <HAL_TIM_ConfigClockSource+0x1f0>
 80033ec:	2b50      	cmp	r3, #80	; 0x50
 80033ee:	d03c      	beq.n	800346a <HAL_TIM_ConfigClockSource+0x17e>
 80033f0:	2b50      	cmp	r3, #80	; 0x50
 80033f2:	d873      	bhi.n	80034dc <HAL_TIM_ConfigClockSource+0x1f0>
 80033f4:	2b40      	cmp	r3, #64	; 0x40
 80033f6:	d058      	beq.n	80034aa <HAL_TIM_ConfigClockSource+0x1be>
 80033f8:	2b40      	cmp	r3, #64	; 0x40
 80033fa:	d86f      	bhi.n	80034dc <HAL_TIM_ConfigClockSource+0x1f0>
 80033fc:	2b30      	cmp	r3, #48	; 0x30
 80033fe:	d064      	beq.n	80034ca <HAL_TIM_ConfigClockSource+0x1de>
 8003400:	2b30      	cmp	r3, #48	; 0x30
 8003402:	d86b      	bhi.n	80034dc <HAL_TIM_ConfigClockSource+0x1f0>
 8003404:	2b20      	cmp	r3, #32
 8003406:	d060      	beq.n	80034ca <HAL_TIM_ConfigClockSource+0x1de>
 8003408:	2b20      	cmp	r3, #32
 800340a:	d867      	bhi.n	80034dc <HAL_TIM_ConfigClockSource+0x1f0>
 800340c:	2b00      	cmp	r3, #0
 800340e:	d05c      	beq.n	80034ca <HAL_TIM_ConfigClockSource+0x1de>
 8003410:	2b10      	cmp	r3, #16
 8003412:	d05a      	beq.n	80034ca <HAL_TIM_ConfigClockSource+0x1de>
 8003414:	e062      	b.n	80034dc <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6818      	ldr	r0, [r3, #0]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	6899      	ldr	r1, [r3, #8]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	f000 fced 	bl	8003e04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003438:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	609a      	str	r2, [r3, #8]
      break;
 8003442:	e04f      	b.n	80034e4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6818      	ldr	r0, [r3, #0]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	6899      	ldr	r1, [r3, #8]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f000 fcd6 	bl	8003e04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003466:	609a      	str	r2, [r3, #8]
      break;
 8003468:	e03c      	b.n	80034e4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6818      	ldr	r0, [r3, #0]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	6859      	ldr	r1, [r3, #4]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	461a      	mov	r2, r3
 8003478:	f000 fc48 	bl	8003d0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2150      	movs	r1, #80	; 0x50
 8003482:	4618      	mov	r0, r3
 8003484:	f000 fca1 	bl	8003dca <TIM_ITRx_SetConfig>
      break;
 8003488:	e02c      	b.n	80034e4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6818      	ldr	r0, [r3, #0]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	6859      	ldr	r1, [r3, #4]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	461a      	mov	r2, r3
 8003498:	f000 fc67 	bl	8003d6a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2160      	movs	r1, #96	; 0x60
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 fc91 	bl	8003dca <TIM_ITRx_SetConfig>
      break;
 80034a8:	e01c      	b.n	80034e4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6818      	ldr	r0, [r3, #0]
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	6859      	ldr	r1, [r3, #4]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	461a      	mov	r2, r3
 80034b8:	f000 fc28 	bl	8003d0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2140      	movs	r1, #64	; 0x40
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 fc81 	bl	8003dca <TIM_ITRx_SetConfig>
      break;
 80034c8:	e00c      	b.n	80034e4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4619      	mov	r1, r3
 80034d4:	4610      	mov	r0, r2
 80034d6:	f000 fc78 	bl	8003dca <TIM_ITRx_SetConfig>
      break;
 80034da:	e003      	b.n	80034e4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	73fb      	strb	r3, [r7, #15]
      break;
 80034e0:	e000      	b.n	80034e4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80034e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	00100070 	.word	0x00100070
 8003504:	00100060 	.word	0x00100060
 8003508:	00100050 	.word	0x00100050
 800350c:	00100040 	.word	0x00100040
 8003510:	00100030 	.word	0x00100030
 8003514:	00100020 	.word	0x00100020

08003518 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a46      	ldr	r2, [pc, #280]	; (8003694 <TIM_Base_SetConfig+0x12c>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d017      	beq.n	80035b0 <TIM_Base_SetConfig+0x48>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003586:	d013      	beq.n	80035b0 <TIM_Base_SetConfig+0x48>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a43      	ldr	r2, [pc, #268]	; (8003698 <TIM_Base_SetConfig+0x130>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d00f      	beq.n	80035b0 <TIM_Base_SetConfig+0x48>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a42      	ldr	r2, [pc, #264]	; (800369c <TIM_Base_SetConfig+0x134>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d00b      	beq.n	80035b0 <TIM_Base_SetConfig+0x48>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a41      	ldr	r2, [pc, #260]	; (80036a0 <TIM_Base_SetConfig+0x138>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d007      	beq.n	80035b0 <TIM_Base_SetConfig+0x48>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a40      	ldr	r2, [pc, #256]	; (80036a4 <TIM_Base_SetConfig+0x13c>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d003      	beq.n	80035b0 <TIM_Base_SetConfig+0x48>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a3f      	ldr	r2, [pc, #252]	; (80036a8 <TIM_Base_SetConfig+0x140>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d108      	bne.n	80035c2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	4313      	orrs	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a33      	ldr	r2, [pc, #204]	; (8003694 <TIM_Base_SetConfig+0x12c>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d023      	beq.n	8003612 <TIM_Base_SetConfig+0xaa>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d0:	d01f      	beq.n	8003612 <TIM_Base_SetConfig+0xaa>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a30      	ldr	r2, [pc, #192]	; (8003698 <TIM_Base_SetConfig+0x130>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d01b      	beq.n	8003612 <TIM_Base_SetConfig+0xaa>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a2f      	ldr	r2, [pc, #188]	; (800369c <TIM_Base_SetConfig+0x134>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d017      	beq.n	8003612 <TIM_Base_SetConfig+0xaa>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a2e      	ldr	r2, [pc, #184]	; (80036a0 <TIM_Base_SetConfig+0x138>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d013      	beq.n	8003612 <TIM_Base_SetConfig+0xaa>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a2d      	ldr	r2, [pc, #180]	; (80036a4 <TIM_Base_SetConfig+0x13c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d00f      	beq.n	8003612 <TIM_Base_SetConfig+0xaa>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a2d      	ldr	r2, [pc, #180]	; (80036ac <TIM_Base_SetConfig+0x144>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d00b      	beq.n	8003612 <TIM_Base_SetConfig+0xaa>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a2c      	ldr	r2, [pc, #176]	; (80036b0 <TIM_Base_SetConfig+0x148>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d007      	beq.n	8003612 <TIM_Base_SetConfig+0xaa>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a2b      	ldr	r2, [pc, #172]	; (80036b4 <TIM_Base_SetConfig+0x14c>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d003      	beq.n	8003612 <TIM_Base_SetConfig+0xaa>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a26      	ldr	r2, [pc, #152]	; (80036a8 <TIM_Base_SetConfig+0x140>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d108      	bne.n	8003624 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003618:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	4313      	orrs	r3, r2
 8003622:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	4313      	orrs	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a12      	ldr	r2, [pc, #72]	; (8003694 <TIM_Base_SetConfig+0x12c>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d013      	beq.n	8003678 <TIM_Base_SetConfig+0x110>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a14      	ldr	r2, [pc, #80]	; (80036a4 <TIM_Base_SetConfig+0x13c>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d00f      	beq.n	8003678 <TIM_Base_SetConfig+0x110>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a14      	ldr	r2, [pc, #80]	; (80036ac <TIM_Base_SetConfig+0x144>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d00b      	beq.n	8003678 <TIM_Base_SetConfig+0x110>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a13      	ldr	r2, [pc, #76]	; (80036b0 <TIM_Base_SetConfig+0x148>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d007      	beq.n	8003678 <TIM_Base_SetConfig+0x110>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a12      	ldr	r2, [pc, #72]	; (80036b4 <TIM_Base_SetConfig+0x14c>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d003      	beq.n	8003678 <TIM_Base_SetConfig+0x110>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a0d      	ldr	r2, [pc, #52]	; (80036a8 <TIM_Base_SetConfig+0x140>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d103      	bne.n	8003680 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	691a      	ldr	r2, [r3, #16]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	615a      	str	r2, [r3, #20]
}
 8003686:	bf00      	nop
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	40012c00 	.word	0x40012c00
 8003698:	40000400 	.word	0x40000400
 800369c:	40000800 	.word	0x40000800
 80036a0:	40000c00 	.word	0x40000c00
 80036a4:	40013400 	.word	0x40013400
 80036a8:	40015000 	.word	0x40015000
 80036ac:	40014000 	.word	0x40014000
 80036b0:	40014400 	.word	0x40014400
 80036b4:	40014800 	.word	0x40014800

080036b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b087      	sub	sp, #28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	f023 0201 	bic.w	r2, r3, #1
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f023 0303 	bic.w	r3, r3, #3
 80036f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f023 0302 	bic.w	r3, r3, #2
 8003704:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	4313      	orrs	r3, r2
 800370e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a30      	ldr	r2, [pc, #192]	; (80037d4 <TIM_OC1_SetConfig+0x11c>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d013      	beq.n	8003740 <TIM_OC1_SetConfig+0x88>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a2f      	ldr	r2, [pc, #188]	; (80037d8 <TIM_OC1_SetConfig+0x120>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d00f      	beq.n	8003740 <TIM_OC1_SetConfig+0x88>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a2e      	ldr	r2, [pc, #184]	; (80037dc <TIM_OC1_SetConfig+0x124>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d00b      	beq.n	8003740 <TIM_OC1_SetConfig+0x88>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a2d      	ldr	r2, [pc, #180]	; (80037e0 <TIM_OC1_SetConfig+0x128>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d007      	beq.n	8003740 <TIM_OC1_SetConfig+0x88>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a2c      	ldr	r2, [pc, #176]	; (80037e4 <TIM_OC1_SetConfig+0x12c>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d003      	beq.n	8003740 <TIM_OC1_SetConfig+0x88>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a2b      	ldr	r2, [pc, #172]	; (80037e8 <TIM_OC1_SetConfig+0x130>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d10c      	bne.n	800375a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	f023 0308 	bic.w	r3, r3, #8
 8003746:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	4313      	orrs	r3, r2
 8003750:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f023 0304 	bic.w	r3, r3, #4
 8003758:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a1d      	ldr	r2, [pc, #116]	; (80037d4 <TIM_OC1_SetConfig+0x11c>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d013      	beq.n	800378a <TIM_OC1_SetConfig+0xd2>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a1c      	ldr	r2, [pc, #112]	; (80037d8 <TIM_OC1_SetConfig+0x120>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d00f      	beq.n	800378a <TIM_OC1_SetConfig+0xd2>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a1b      	ldr	r2, [pc, #108]	; (80037dc <TIM_OC1_SetConfig+0x124>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d00b      	beq.n	800378a <TIM_OC1_SetConfig+0xd2>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a1a      	ldr	r2, [pc, #104]	; (80037e0 <TIM_OC1_SetConfig+0x128>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d007      	beq.n	800378a <TIM_OC1_SetConfig+0xd2>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a19      	ldr	r2, [pc, #100]	; (80037e4 <TIM_OC1_SetConfig+0x12c>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d003      	beq.n	800378a <TIM_OC1_SetConfig+0xd2>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a18      	ldr	r2, [pc, #96]	; (80037e8 <TIM_OC1_SetConfig+0x130>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d111      	bne.n	80037ae <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003790:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003798:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685a      	ldr	r2, [r3, #4]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	621a      	str	r2, [r3, #32]
}
 80037c8:	bf00      	nop
 80037ca:	371c      	adds	r7, #28
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	40012c00 	.word	0x40012c00
 80037d8:	40013400 	.word	0x40013400
 80037dc:	40014000 	.word	0x40014000
 80037e0:	40014400 	.word	0x40014400
 80037e4:	40014800 	.word	0x40014800
 80037e8:	40015000 	.word	0x40015000

080037ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b087      	sub	sp, #28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	f023 0210 	bic.w	r2, r3, #16
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800381a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800381e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003826:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	021b      	lsls	r3, r3, #8
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	4313      	orrs	r3, r2
 8003832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	f023 0320 	bic.w	r3, r3, #32
 800383a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	4313      	orrs	r3, r2
 8003846:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a2c      	ldr	r2, [pc, #176]	; (80038fc <TIM_OC2_SetConfig+0x110>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d007      	beq.n	8003860 <TIM_OC2_SetConfig+0x74>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a2b      	ldr	r2, [pc, #172]	; (8003900 <TIM_OC2_SetConfig+0x114>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d003      	beq.n	8003860 <TIM_OC2_SetConfig+0x74>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a2a      	ldr	r2, [pc, #168]	; (8003904 <TIM_OC2_SetConfig+0x118>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d10d      	bne.n	800387c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003866:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	011b      	lsls	r3, r3, #4
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	4313      	orrs	r3, r2
 8003872:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800387a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a1f      	ldr	r2, [pc, #124]	; (80038fc <TIM_OC2_SetConfig+0x110>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d013      	beq.n	80038ac <TIM_OC2_SetConfig+0xc0>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a1e      	ldr	r2, [pc, #120]	; (8003900 <TIM_OC2_SetConfig+0x114>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d00f      	beq.n	80038ac <TIM_OC2_SetConfig+0xc0>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a1e      	ldr	r2, [pc, #120]	; (8003908 <TIM_OC2_SetConfig+0x11c>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d00b      	beq.n	80038ac <TIM_OC2_SetConfig+0xc0>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a1d      	ldr	r2, [pc, #116]	; (800390c <TIM_OC2_SetConfig+0x120>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d007      	beq.n	80038ac <TIM_OC2_SetConfig+0xc0>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a1c      	ldr	r2, [pc, #112]	; (8003910 <TIM_OC2_SetConfig+0x124>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d003      	beq.n	80038ac <TIM_OC2_SetConfig+0xc0>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a17      	ldr	r2, [pc, #92]	; (8003904 <TIM_OC2_SetConfig+0x118>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d113      	bne.n	80038d4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	621a      	str	r2, [r3, #32]
}
 80038ee:	bf00      	nop
 80038f0:	371c      	adds	r7, #28
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	40012c00 	.word	0x40012c00
 8003900:	40013400 	.word	0x40013400
 8003904:	40015000 	.word	0x40015000
 8003908:	40014000 	.word	0x40014000
 800390c:	40014400 	.word	0x40014400
 8003910:	40014800 	.word	0x40014800

08003914 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003914:	b480      	push	{r7}
 8003916:	b087      	sub	sp, #28
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f023 0303 	bic.w	r3, r3, #3
 800394e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	4313      	orrs	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003960:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	021b      	lsls	r3, r3, #8
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	4313      	orrs	r3, r2
 800396c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a2b      	ldr	r2, [pc, #172]	; (8003a20 <TIM_OC3_SetConfig+0x10c>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d007      	beq.n	8003986 <TIM_OC3_SetConfig+0x72>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a2a      	ldr	r2, [pc, #168]	; (8003a24 <TIM_OC3_SetConfig+0x110>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d003      	beq.n	8003986 <TIM_OC3_SetConfig+0x72>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a29      	ldr	r2, [pc, #164]	; (8003a28 <TIM_OC3_SetConfig+0x114>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d10d      	bne.n	80039a2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800398c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	021b      	lsls	r3, r3, #8
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	4313      	orrs	r3, r2
 8003998:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a1e      	ldr	r2, [pc, #120]	; (8003a20 <TIM_OC3_SetConfig+0x10c>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d013      	beq.n	80039d2 <TIM_OC3_SetConfig+0xbe>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a1d      	ldr	r2, [pc, #116]	; (8003a24 <TIM_OC3_SetConfig+0x110>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d00f      	beq.n	80039d2 <TIM_OC3_SetConfig+0xbe>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a1d      	ldr	r2, [pc, #116]	; (8003a2c <TIM_OC3_SetConfig+0x118>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d00b      	beq.n	80039d2 <TIM_OC3_SetConfig+0xbe>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a1c      	ldr	r2, [pc, #112]	; (8003a30 <TIM_OC3_SetConfig+0x11c>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d007      	beq.n	80039d2 <TIM_OC3_SetConfig+0xbe>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a1b      	ldr	r2, [pc, #108]	; (8003a34 <TIM_OC3_SetConfig+0x120>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d003      	beq.n	80039d2 <TIM_OC3_SetConfig+0xbe>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a16      	ldr	r2, [pc, #88]	; (8003a28 <TIM_OC3_SetConfig+0x114>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d113      	bne.n	80039fa <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	011b      	lsls	r3, r3, #4
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	011b      	lsls	r3, r3, #4
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685a      	ldr	r2, [r3, #4]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	621a      	str	r2, [r3, #32]
}
 8003a14:	bf00      	nop
 8003a16:	371c      	adds	r7, #28
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	40012c00 	.word	0x40012c00
 8003a24:	40013400 	.word	0x40013400
 8003a28:	40015000 	.word	0x40015000
 8003a2c:	40014000 	.word	0x40014000
 8003a30:	40014400 	.word	0x40014400
 8003a34:	40014800 	.word	0x40014800

08003a38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	021b      	lsls	r3, r3, #8
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	031b      	lsls	r3, r3, #12
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a2c      	ldr	r2, [pc, #176]	; (8003b48 <TIM_OC4_SetConfig+0x110>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d007      	beq.n	8003aac <TIM_OC4_SetConfig+0x74>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a2b      	ldr	r2, [pc, #172]	; (8003b4c <TIM_OC4_SetConfig+0x114>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d003      	beq.n	8003aac <TIM_OC4_SetConfig+0x74>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a2a      	ldr	r2, [pc, #168]	; (8003b50 <TIM_OC4_SetConfig+0x118>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d10d      	bne.n	8003ac8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ab2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	031b      	lsls	r3, r3, #12
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ac6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a1f      	ldr	r2, [pc, #124]	; (8003b48 <TIM_OC4_SetConfig+0x110>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d013      	beq.n	8003af8 <TIM_OC4_SetConfig+0xc0>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a1e      	ldr	r2, [pc, #120]	; (8003b4c <TIM_OC4_SetConfig+0x114>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d00f      	beq.n	8003af8 <TIM_OC4_SetConfig+0xc0>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a1e      	ldr	r2, [pc, #120]	; (8003b54 <TIM_OC4_SetConfig+0x11c>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d00b      	beq.n	8003af8 <TIM_OC4_SetConfig+0xc0>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a1d      	ldr	r2, [pc, #116]	; (8003b58 <TIM_OC4_SetConfig+0x120>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d007      	beq.n	8003af8 <TIM_OC4_SetConfig+0xc0>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a1c      	ldr	r2, [pc, #112]	; (8003b5c <TIM_OC4_SetConfig+0x124>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d003      	beq.n	8003af8 <TIM_OC4_SetConfig+0xc0>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a17      	ldr	r2, [pc, #92]	; (8003b50 <TIM_OC4_SetConfig+0x118>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d113      	bne.n	8003b20 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003afe:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003b06:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	019b      	lsls	r3, r3, #6
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	019b      	lsls	r3, r3, #6
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	621a      	str	r2, [r3, #32]
}
 8003b3a:	bf00      	nop
 8003b3c:	371c      	adds	r7, #28
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	40012c00 	.word	0x40012c00
 8003b4c:	40013400 	.word	0x40013400
 8003b50:	40015000 	.word	0x40015000
 8003b54:	40014000 	.word	0x40014000
 8003b58:	40014400 	.word	0x40014400
 8003b5c:	40014800 	.word	0x40014800

08003b60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b087      	sub	sp, #28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003ba4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	041b      	lsls	r3, r3, #16
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a19      	ldr	r2, [pc, #100]	; (8003c1c <TIM_OC5_SetConfig+0xbc>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d013      	beq.n	8003be2 <TIM_OC5_SetConfig+0x82>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a18      	ldr	r2, [pc, #96]	; (8003c20 <TIM_OC5_SetConfig+0xc0>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d00f      	beq.n	8003be2 <TIM_OC5_SetConfig+0x82>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a17      	ldr	r2, [pc, #92]	; (8003c24 <TIM_OC5_SetConfig+0xc4>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d00b      	beq.n	8003be2 <TIM_OC5_SetConfig+0x82>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a16      	ldr	r2, [pc, #88]	; (8003c28 <TIM_OC5_SetConfig+0xc8>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d007      	beq.n	8003be2 <TIM_OC5_SetConfig+0x82>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a15      	ldr	r2, [pc, #84]	; (8003c2c <TIM_OC5_SetConfig+0xcc>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d003      	beq.n	8003be2 <TIM_OC5_SetConfig+0x82>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a14      	ldr	r2, [pc, #80]	; (8003c30 <TIM_OC5_SetConfig+0xd0>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d109      	bne.n	8003bf6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003be8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	021b      	lsls	r3, r3, #8
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	621a      	str	r2, [r3, #32]
}
 8003c10:	bf00      	nop
 8003c12:	371c      	adds	r7, #28
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	40012c00 	.word	0x40012c00
 8003c20:	40013400 	.word	0x40013400
 8003c24:	40014000 	.word	0x40014000
 8003c28:	40014400 	.word	0x40014400
 8003c2c:	40014800 	.word	0x40014800
 8003c30:	40015000 	.word	0x40015000

08003c34 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	021b      	lsls	r3, r3, #8
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	051b      	lsls	r3, r3, #20
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a1a      	ldr	r2, [pc, #104]	; (8003cf4 <TIM_OC6_SetConfig+0xc0>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d013      	beq.n	8003cb8 <TIM_OC6_SetConfig+0x84>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a19      	ldr	r2, [pc, #100]	; (8003cf8 <TIM_OC6_SetConfig+0xc4>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d00f      	beq.n	8003cb8 <TIM_OC6_SetConfig+0x84>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a18      	ldr	r2, [pc, #96]	; (8003cfc <TIM_OC6_SetConfig+0xc8>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d00b      	beq.n	8003cb8 <TIM_OC6_SetConfig+0x84>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a17      	ldr	r2, [pc, #92]	; (8003d00 <TIM_OC6_SetConfig+0xcc>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d007      	beq.n	8003cb8 <TIM_OC6_SetConfig+0x84>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a16      	ldr	r2, [pc, #88]	; (8003d04 <TIM_OC6_SetConfig+0xd0>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d003      	beq.n	8003cb8 <TIM_OC6_SetConfig+0x84>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a15      	ldr	r2, [pc, #84]	; (8003d08 <TIM_OC6_SetConfig+0xd4>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d109      	bne.n	8003ccc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cbe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	029b      	lsls	r3, r3, #10
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685a      	ldr	r2, [r3, #4]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	621a      	str	r2, [r3, #32]
}
 8003ce6:	bf00      	nop
 8003ce8:	371c      	adds	r7, #28
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	40012c00 	.word	0x40012c00
 8003cf8:	40013400 	.word	0x40013400
 8003cfc:	40014000 	.word	0x40014000
 8003d00:	40014400 	.word	0x40014400
 8003d04:	40014800 	.word	0x40014800
 8003d08:	40015000 	.word	0x40015000

08003d0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b087      	sub	sp, #28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	f023 0201 	bic.w	r2, r3, #1
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	011b      	lsls	r3, r3, #4
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f023 030a 	bic.w	r3, r3, #10
 8003d48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	621a      	str	r2, [r3, #32]
}
 8003d5e:	bf00      	nop
 8003d60:	371c      	adds	r7, #28
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b087      	sub	sp, #28
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	60f8      	str	r0, [r7, #12]
 8003d72:	60b9      	str	r1, [r7, #8]
 8003d74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	f023 0210 	bic.w	r2, r3, #16
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	031b      	lsls	r3, r3, #12
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003da6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	011b      	lsls	r3, r3, #4
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	621a      	str	r2, [r3, #32]
}
 8003dbe:	bf00      	nop
 8003dc0:	371c      	adds	r7, #28
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b085      	sub	sp, #20
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
 8003dd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f043 0307 	orr.w	r3, r3, #7
 8003df0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	609a      	str	r2, [r3, #8]
}
 8003df8:	bf00      	nop
 8003dfa:	3714      	adds	r7, #20
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
 8003e10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	021a      	lsls	r2, r3, #8
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	431a      	orrs	r2, r3
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	609a      	str	r2, [r3, #8]
}
 8003e38:	bf00      	nop
 8003e3a:	371c      	adds	r7, #28
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d101      	bne.n	8003e5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	e074      	b.n	8003f46 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2202      	movs	r2, #2
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a34      	ldr	r2, [pc, #208]	; (8003f54 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d009      	beq.n	8003e9a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a33      	ldr	r2, [pc, #204]	; (8003f58 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d004      	beq.n	8003e9a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a31      	ldr	r2, [pc, #196]	; (8003f5c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d108      	bne.n	8003eac <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003ea0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a21      	ldr	r2, [pc, #132]	; (8003f54 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d022      	beq.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003edc:	d01d      	beq.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a1f      	ldr	r2, [pc, #124]	; (8003f60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d018      	beq.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a1d      	ldr	r2, [pc, #116]	; (8003f64 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d013      	beq.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a1c      	ldr	r2, [pc, #112]	; (8003f68 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d00e      	beq.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a15      	ldr	r2, [pc, #84]	; (8003f58 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d009      	beq.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a18      	ldr	r2, [pc, #96]	; (8003f6c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d004      	beq.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a11      	ldr	r2, [pc, #68]	; (8003f5c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d10c      	bne.n	8003f34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	40012c00 	.word	0x40012c00
 8003f58:	40013400 	.word	0x40013400
 8003f5c:	40015000 	.word	0x40015000
 8003f60:	40000400 	.word	0x40000400
 8003f64:	40000800 	.word	0x40000800
 8003f68:	40000c00 	.word	0x40000c00
 8003f6c:	40014000 	.word	0x40014000

08003f70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d101      	bne.n	8003f8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003f88:	2302      	movs	r3, #2
 8003f8a:	e096      	b.n	80040ba <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	041b      	lsls	r3, r3, #16
 8004002:	4313      	orrs	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a2f      	ldr	r2, [pc, #188]	; (80040c8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d009      	beq.n	8004024 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a2d      	ldr	r2, [pc, #180]	; (80040cc <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d004      	beq.n	8004024 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a2c      	ldr	r2, [pc, #176]	; (80040d0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d106      	bne.n	8004032 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	4313      	orrs	r3, r2
 8004030:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a24      	ldr	r2, [pc, #144]	; (80040c8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d009      	beq.n	8004050 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a22      	ldr	r2, [pc, #136]	; (80040cc <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d004      	beq.n	8004050 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a21      	ldr	r2, [pc, #132]	; (80040d0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d12b      	bne.n	80040a8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405a:	051b      	lsls	r3, r3, #20
 800405c:	4313      	orrs	r3, r2
 800405e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	4313      	orrs	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	4313      	orrs	r3, r2
 800407a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a11      	ldr	r2, [pc, #68]	; (80040c8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d009      	beq.n	800409a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a10      	ldr	r2, [pc, #64]	; (80040cc <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d004      	beq.n	800409a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a0e      	ldr	r2, [pc, #56]	; (80040d0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d106      	bne.n	80040a8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a4:	4313      	orrs	r3, r2
 80040a6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	40012c00 	.word	0x40012c00
 80040cc:	40013400 	.word	0x40013400
 80040d0:	40015000 	.word	0x40015000

080040d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e042      	b.n	80041f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004178:	2b00      	cmp	r3, #0
 800417a:	d106      	bne.n	800418a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f7fd f82b 	bl	80011e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2224      	movs	r2, #36	; 0x24
 800418e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 0201 	bic.w	r2, r2, #1
 80041a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 fc50 	bl	8004a48 <UART_SetConfig>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d101      	bne.n	80041b2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e022      	b.n	80041f8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d002      	beq.n	80041c0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 ff40 	bl	8005040 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689a      	ldr	r2, [r3, #8]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f042 0201 	orr.w	r2, r2, #1
 80041ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 ffc7 	bl	8005184 <UART_CheckIdleState>
 80041f6:	4603      	mov	r3, r0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3708      	adds	r7, #8
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b08a      	sub	sp, #40	; 0x28
 8004204:	af02      	add	r7, sp, #8
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	603b      	str	r3, [r7, #0]
 800420c:	4613      	mov	r3, r2
 800420e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004216:	2b20      	cmp	r3, #32
 8004218:	f040 8083 	bne.w	8004322 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d002      	beq.n	8004228 <HAL_UART_Transmit+0x28>
 8004222:	88fb      	ldrh	r3, [r7, #6]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d101      	bne.n	800422c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e07b      	b.n	8004324 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004232:	2b01      	cmp	r3, #1
 8004234:	d101      	bne.n	800423a <HAL_UART_Transmit+0x3a>
 8004236:	2302      	movs	r3, #2
 8004238:	e074      	b.n	8004324 <HAL_UART_Transmit+0x124>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2221      	movs	r2, #33	; 0x21
 800424e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004252:	f7fd f879 	bl	8001348 <HAL_GetTick>
 8004256:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	88fa      	ldrh	r2, [r7, #6]
 800425c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	88fa      	ldrh	r2, [r7, #6]
 8004264:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004270:	d108      	bne.n	8004284 <HAL_UART_Transmit+0x84>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d104      	bne.n	8004284 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800427a:	2300      	movs	r3, #0
 800427c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	61bb      	str	r3, [r7, #24]
 8004282:	e003      	b.n	800428c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004288:	2300      	movs	r3, #0
 800428a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004294:	e02c      	b.n	80042f0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	2200      	movs	r2, #0
 800429e:	2180      	movs	r1, #128	; 0x80
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f000 ffba 	bl	800521a <UART_WaitOnFlagUntilTimeout>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e039      	b.n	8004324 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10b      	bne.n	80042ce <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	881b      	ldrh	r3, [r3, #0]
 80042ba:	461a      	mov	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	3302      	adds	r3, #2
 80042ca:	61bb      	str	r3, [r7, #24]
 80042cc:	e007      	b.n	80042de <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	781a      	ldrb	r2, [r3, #0]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	3301      	adds	r3, #1
 80042dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1cc      	bne.n	8004296 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	2200      	movs	r2, #0
 8004304:	2140      	movs	r1, #64	; 0x40
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f000 ff87 	bl	800521a <UART_WaitOnFlagUntilTimeout>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e006      	b.n	8004324 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2220      	movs	r2, #32
 800431a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	e000      	b.n	8004324 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004322:	2302      	movs	r3, #2
  }
}
 8004324:	4618      	mov	r0, r3
 8004326:	3720      	adds	r7, #32
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b08a      	sub	sp, #40	; 0x28
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	4613      	mov	r3, r2
 8004338:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004340:	2b20      	cmp	r3, #32
 8004342:	d142      	bne.n	80043ca <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d002      	beq.n	8004350 <HAL_UART_Receive_IT+0x24>
 800434a:	88fb      	ldrh	r3, [r7, #6]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e03b      	b.n	80043cc <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800435a:	2b01      	cmp	r3, #1
 800435c:	d101      	bne.n	8004362 <HAL_UART_Receive_IT+0x36>
 800435e:	2302      	movs	r3, #2
 8004360:	e034      	b.n	80043cc <HAL_UART_Receive_IT+0xa0>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a17      	ldr	r2, [pc, #92]	; (80043d4 <HAL_UART_Receive_IT+0xa8>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d01f      	beq.n	80043ba <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d018      	beq.n	80043ba <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	e853 3f00 	ldrex	r3, [r3]
 8004394:	613b      	str	r3, [r7, #16]
   return(result);
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800439c:	627b      	str	r3, [r7, #36]	; 0x24
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	461a      	mov	r2, r3
 80043a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a6:	623b      	str	r3, [r7, #32]
 80043a8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043aa:	69f9      	ldr	r1, [r7, #28]
 80043ac:	6a3a      	ldr	r2, [r7, #32]
 80043ae:	e841 2300 	strex	r3, r2, [r1]
 80043b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1e6      	bne.n	8004388 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80043ba:	88fb      	ldrh	r3, [r7, #6]
 80043bc:	461a      	mov	r2, r3
 80043be:	68b9      	ldr	r1, [r7, #8]
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 fff3 	bl	80053ac <UART_Start_Receive_IT>
 80043c6:	4603      	mov	r3, r0
 80043c8:	e000      	b.n	80043cc <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80043ca:	2302      	movs	r3, #2
  }
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3728      	adds	r7, #40	; 0x28
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	40008000 	.word	0x40008000

080043d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b0ba      	sub	sp, #232	; 0xe8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80043fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004402:	f640 030f 	movw	r3, #2063	; 0x80f
 8004406:	4013      	ands	r3, r2
 8004408:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800440c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004410:	2b00      	cmp	r3, #0
 8004412:	d11b      	bne.n	800444c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004418:	f003 0320 	and.w	r3, r3, #32
 800441c:	2b00      	cmp	r3, #0
 800441e:	d015      	beq.n	800444c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004424:	f003 0320 	and.w	r3, r3, #32
 8004428:	2b00      	cmp	r3, #0
 800442a:	d105      	bne.n	8004438 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800442c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d009      	beq.n	800444c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443c:	2b00      	cmp	r3, #0
 800443e:	f000 82d6 	beq.w	80049ee <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	4798      	blx	r3
      }
      return;
 800444a:	e2d0      	b.n	80049ee <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800444c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 811f 	beq.w	8004694 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004456:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800445a:	4b8b      	ldr	r3, [pc, #556]	; (8004688 <HAL_UART_IRQHandler+0x2b0>)
 800445c:	4013      	ands	r3, r2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d106      	bne.n	8004470 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004462:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004466:	4b89      	ldr	r3, [pc, #548]	; (800468c <HAL_UART_IRQHandler+0x2b4>)
 8004468:	4013      	ands	r3, r2
 800446a:	2b00      	cmp	r3, #0
 800446c:	f000 8112 	beq.w	8004694 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	2b00      	cmp	r3, #0
 800447a:	d011      	beq.n	80044a0 <HAL_UART_IRQHandler+0xc8>
 800447c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00b      	beq.n	80044a0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2201      	movs	r2, #1
 800448e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004496:	f043 0201 	orr.w	r2, r3, #1
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d011      	beq.n	80044d0 <HAL_UART_IRQHandler+0xf8>
 80044ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00b      	beq.n	80044d0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2202      	movs	r2, #2
 80044be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044c6:	f043 0204 	orr.w	r2, r3, #4
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044d4:	f003 0304 	and.w	r3, r3, #4
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d011      	beq.n	8004500 <HAL_UART_IRQHandler+0x128>
 80044dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00b      	beq.n	8004500 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2204      	movs	r2, #4
 80044ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044f6:	f043 0202 	orr.w	r2, r3, #2
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004504:	f003 0308 	and.w	r3, r3, #8
 8004508:	2b00      	cmp	r3, #0
 800450a:	d017      	beq.n	800453c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800450c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004510:	f003 0320 	and.w	r3, r3, #32
 8004514:	2b00      	cmp	r3, #0
 8004516:	d105      	bne.n	8004524 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004518:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800451c:	4b5a      	ldr	r3, [pc, #360]	; (8004688 <HAL_UART_IRQHandler+0x2b0>)
 800451e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00b      	beq.n	800453c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2208      	movs	r2, #8
 800452a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004532:	f043 0208 	orr.w	r2, r3, #8
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800453c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004540:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004544:	2b00      	cmp	r3, #0
 8004546:	d012      	beq.n	800456e <HAL_UART_IRQHandler+0x196>
 8004548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800454c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00c      	beq.n	800456e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800455c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004564:	f043 0220 	orr.w	r2, r3, #32
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004574:	2b00      	cmp	r3, #0
 8004576:	f000 823c 	beq.w	80049f2 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800457a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800457e:	f003 0320 	and.w	r3, r3, #32
 8004582:	2b00      	cmp	r3, #0
 8004584:	d013      	beq.n	80045ae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004586:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800458a:	f003 0320 	and.w	r3, r3, #32
 800458e:	2b00      	cmp	r3, #0
 8004590:	d105      	bne.n	800459e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004592:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d007      	beq.n	80045ae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c2:	2b40      	cmp	r3, #64	; 0x40
 80045c4:	d005      	beq.n	80045d2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80045c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d04f      	beq.n	8004672 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f001 f814 	bl	8005600 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e2:	2b40      	cmp	r3, #64	; 0x40
 80045e4:	d141      	bne.n	800466a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	3308      	adds	r3, #8
 80045ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045f4:	e853 3f00 	ldrex	r3, [r3]
 80045f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80045fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004600:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004604:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	3308      	adds	r3, #8
 800460e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004612:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004616:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800461e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004622:	e841 2300 	strex	r3, r2, [r1]
 8004626:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800462a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1d9      	bne.n	80045e6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004636:	2b00      	cmp	r3, #0
 8004638:	d013      	beq.n	8004662 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800463e:	4a14      	ldr	r2, [pc, #80]	; (8004690 <HAL_UART_IRQHandler+0x2b8>)
 8004640:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004646:	4618      	mov	r0, r3
 8004648:	f7fc ffe5 	bl	8001616 <HAL_DMA_Abort_IT>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d017      	beq.n	8004682 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800465c:	4610      	mov	r0, r2
 800465e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004660:	e00f      	b.n	8004682 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f9da 	bl	8004a1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004668:	e00b      	b.n	8004682 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f9d6 	bl	8004a1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004670:	e007      	b.n	8004682 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f9d2 	bl	8004a1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004680:	e1b7      	b.n	80049f2 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004682:	bf00      	nop
    return;
 8004684:	e1b5      	b.n	80049f2 <HAL_UART_IRQHandler+0x61a>
 8004686:	bf00      	nop
 8004688:	10000001 	.word	0x10000001
 800468c:	04000120 	.word	0x04000120
 8004690:	080056cd 	.word	0x080056cd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004698:	2b01      	cmp	r3, #1
 800469a:	f040 814a 	bne.w	8004932 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800469e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046a2:	f003 0310 	and.w	r3, r3, #16
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f000 8143 	beq.w	8004932 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80046ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046b0:	f003 0310 	and.w	r3, r3, #16
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f000 813c 	beq.w	8004932 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2210      	movs	r2, #16
 80046c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046cc:	2b40      	cmp	r3, #64	; 0x40
 80046ce:	f040 80b5 	bne.w	800483c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80046de:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 8187 	beq.w	80049f6 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80046ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80046f2:	429a      	cmp	r2, r3
 80046f4:	f080 817f 	bcs.w	80049f6 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80046fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0320 	and.w	r3, r3, #32
 800470e:	2b00      	cmp	r3, #0
 8004710:	f040 8086 	bne.w	8004820 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004720:	e853 3f00 	ldrex	r3, [r3]
 8004724:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004728:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800472c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004730:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	461a      	mov	r2, r3
 800473a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800473e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004742:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004746:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800474a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800474e:	e841 2300 	strex	r3, r2, [r1]
 8004752:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004756:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1da      	bne.n	8004714 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	3308      	adds	r3, #8
 8004764:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004766:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004768:	e853 3f00 	ldrex	r3, [r3]
 800476c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800476e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004770:	f023 0301 	bic.w	r3, r3, #1
 8004774:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	3308      	adds	r3, #8
 800477e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004782:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004786:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004788:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800478a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800478e:	e841 2300 	strex	r3, r2, [r1]
 8004792:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004794:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1e1      	bne.n	800475e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	3308      	adds	r3, #8
 80047a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047a4:	e853 3f00 	ldrex	r3, [r3]
 80047a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80047aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	3308      	adds	r3, #8
 80047ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80047be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80047c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80047c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80047c6:	e841 2300 	strex	r3, r2, [r1]
 80047ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80047cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1e3      	bne.n	800479a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2220      	movs	r2, #32
 80047d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047e8:	e853 3f00 	ldrex	r3, [r3]
 80047ec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80047ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047f0:	f023 0310 	bic.w	r3, r3, #16
 80047f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	461a      	mov	r2, r3
 80047fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004802:	65bb      	str	r3, [r7, #88]	; 0x58
 8004804:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004806:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004808:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800480a:	e841 2300 	strex	r3, r2, [r1]
 800480e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1e4      	bne.n	80047e0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800481a:	4618      	mov	r0, r3
 800481c:	f7fc fea2 	bl	8001564 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800482c:	b29b      	uxth	r3, r3
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	b29b      	uxth	r3, r3
 8004832:	4619      	mov	r1, r3
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 f8fb 	bl	8004a30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800483a:	e0dc      	b.n	80049f6 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004848:	b29b      	uxth	r3, r3
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004856:	b29b      	uxth	r3, r3
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 80ce 	beq.w	80049fa <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800485e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004862:	2b00      	cmp	r3, #0
 8004864:	f000 80c9 	beq.w	80049fa <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004870:	e853 3f00 	ldrex	r3, [r3]
 8004874:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004878:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800487c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	461a      	mov	r2, r3
 8004886:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800488a:	647b      	str	r3, [r7, #68]	; 0x44
 800488c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004890:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004892:	e841 2300 	strex	r3, r2, [r1]
 8004896:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1e4      	bne.n	8004868 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	3308      	adds	r3, #8
 80048a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a8:	e853 3f00 	ldrex	r3, [r3]
 80048ac:	623b      	str	r3, [r7, #32]
   return(result);
 80048ae:	6a3b      	ldr	r3, [r7, #32]
 80048b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048b4:	f023 0301 	bic.w	r3, r3, #1
 80048b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	3308      	adds	r3, #8
 80048c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80048c6:	633a      	str	r2, [r7, #48]	; 0x30
 80048c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048ce:	e841 2300 	strex	r3, r2, [r1]
 80048d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1e1      	bne.n	800489e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2220      	movs	r2, #32
 80048de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	e853 3f00 	ldrex	r3, [r3]
 80048fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f023 0310 	bic.w	r3, r3, #16
 8004902:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	461a      	mov	r2, r3
 800490c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004910:	61fb      	str	r3, [r7, #28]
 8004912:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004914:	69b9      	ldr	r1, [r7, #24]
 8004916:	69fa      	ldr	r2, [r7, #28]
 8004918:	e841 2300 	strex	r3, r2, [r1]
 800491c:	617b      	str	r3, [r7, #20]
   return(result);
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1e4      	bne.n	80048ee <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004924:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004928:	4619      	mov	r1, r3
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f880 	bl	8004a30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004930:	e063      	b.n	80049fa <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004936:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00e      	beq.n	800495c <HAL_UART_IRQHandler+0x584>
 800493e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d008      	beq.n	800495c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004952:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f001 fb57 	bl	8006008 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800495a:	e051      	b.n	8004a00 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800495c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004964:	2b00      	cmp	r3, #0
 8004966:	d014      	beq.n	8004992 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800496c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004970:	2b00      	cmp	r3, #0
 8004972:	d105      	bne.n	8004980 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004974:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004978:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d008      	beq.n	8004992 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004984:	2b00      	cmp	r3, #0
 8004986:	d03a      	beq.n	80049fe <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	4798      	blx	r3
    }
    return;
 8004990:	e035      	b.n	80049fe <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499a:	2b00      	cmp	r3, #0
 800499c:	d009      	beq.n	80049b2 <HAL_UART_IRQHandler+0x5da>
 800499e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 fea4 	bl	80056f8 <UART_EndTransmit_IT>
    return;
 80049b0:	e026      	b.n	8004a00 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80049b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d009      	beq.n	80049d2 <HAL_UART_IRQHandler+0x5fa>
 80049be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f001 fb30 	bl	8006030 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80049d0:	e016      	b.n	8004a00 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80049d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d010      	beq.n	8004a00 <HAL_UART_IRQHandler+0x628>
 80049de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	da0c      	bge.n	8004a00 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f001 fb18 	bl	800601c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80049ec:	e008      	b.n	8004a00 <HAL_UART_IRQHandler+0x628>
      return;
 80049ee:	bf00      	nop
 80049f0:	e006      	b.n	8004a00 <HAL_UART_IRQHandler+0x628>
    return;
 80049f2:	bf00      	nop
 80049f4:	e004      	b.n	8004a00 <HAL_UART_IRQHandler+0x628>
      return;
 80049f6:	bf00      	nop
 80049f8:	e002      	b.n	8004a00 <HAL_UART_IRQHandler+0x628>
      return;
 80049fa:	bf00      	nop
 80049fc:	e000      	b.n	8004a00 <HAL_UART_IRQHandler+0x628>
    return;
 80049fe:	bf00      	nop
  }
}
 8004a00:	37e8      	adds	r7, #232	; 0xe8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop

08004a08 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	460b      	mov	r3, r1
 8004a3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a4c:	b08c      	sub	sp, #48	; 0x30
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a52:	2300      	movs	r3, #0
 8004a54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	689a      	ldr	r2, [r3, #8]
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	431a      	orrs	r2, r3
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	431a      	orrs	r2, r3
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	69db      	ldr	r3, [r3, #28]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	4baa      	ldr	r3, [pc, #680]	; (8004d20 <UART_SetConfig+0x2d8>)
 8004a78:	4013      	ands	r3, r2
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	6812      	ldr	r2, [r2, #0]
 8004a7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a80:	430b      	orrs	r3, r1
 8004a82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	68da      	ldr	r2, [r3, #12]
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a9f      	ldr	r2, [pc, #636]	; (8004d24 <UART_SetConfig+0x2dc>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d004      	beq.n	8004ab4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	6a1b      	ldr	r3, [r3, #32]
 8004aae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004abe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	6812      	ldr	r2, [r2, #0]
 8004ac6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ac8:	430b      	orrs	r3, r1
 8004aca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad2:	f023 010f 	bic.w	r1, r3, #15
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a90      	ldr	r2, [pc, #576]	; (8004d28 <UART_SetConfig+0x2e0>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d125      	bne.n	8004b38 <UART_SetConfig+0xf0>
 8004aec:	4b8f      	ldr	r3, [pc, #572]	; (8004d2c <UART_SetConfig+0x2e4>)
 8004aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af2:	f003 0303 	and.w	r3, r3, #3
 8004af6:	2b03      	cmp	r3, #3
 8004af8:	d81a      	bhi.n	8004b30 <UART_SetConfig+0xe8>
 8004afa:	a201      	add	r2, pc, #4	; (adr r2, 8004b00 <UART_SetConfig+0xb8>)
 8004afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b00:	08004b11 	.word	0x08004b11
 8004b04:	08004b21 	.word	0x08004b21
 8004b08:	08004b19 	.word	0x08004b19
 8004b0c:	08004b29 	.word	0x08004b29
 8004b10:	2301      	movs	r3, #1
 8004b12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b16:	e116      	b.n	8004d46 <UART_SetConfig+0x2fe>
 8004b18:	2302      	movs	r3, #2
 8004b1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b1e:	e112      	b.n	8004d46 <UART_SetConfig+0x2fe>
 8004b20:	2304      	movs	r3, #4
 8004b22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b26:	e10e      	b.n	8004d46 <UART_SetConfig+0x2fe>
 8004b28:	2308      	movs	r3, #8
 8004b2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b2e:	e10a      	b.n	8004d46 <UART_SetConfig+0x2fe>
 8004b30:	2310      	movs	r3, #16
 8004b32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b36:	e106      	b.n	8004d46 <UART_SetConfig+0x2fe>
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a7c      	ldr	r2, [pc, #496]	; (8004d30 <UART_SetConfig+0x2e8>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d138      	bne.n	8004bb4 <UART_SetConfig+0x16c>
 8004b42:	4b7a      	ldr	r3, [pc, #488]	; (8004d2c <UART_SetConfig+0x2e4>)
 8004b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b48:	f003 030c 	and.w	r3, r3, #12
 8004b4c:	2b0c      	cmp	r3, #12
 8004b4e:	d82d      	bhi.n	8004bac <UART_SetConfig+0x164>
 8004b50:	a201      	add	r2, pc, #4	; (adr r2, 8004b58 <UART_SetConfig+0x110>)
 8004b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b56:	bf00      	nop
 8004b58:	08004b8d 	.word	0x08004b8d
 8004b5c:	08004bad 	.word	0x08004bad
 8004b60:	08004bad 	.word	0x08004bad
 8004b64:	08004bad 	.word	0x08004bad
 8004b68:	08004b9d 	.word	0x08004b9d
 8004b6c:	08004bad 	.word	0x08004bad
 8004b70:	08004bad 	.word	0x08004bad
 8004b74:	08004bad 	.word	0x08004bad
 8004b78:	08004b95 	.word	0x08004b95
 8004b7c:	08004bad 	.word	0x08004bad
 8004b80:	08004bad 	.word	0x08004bad
 8004b84:	08004bad 	.word	0x08004bad
 8004b88:	08004ba5 	.word	0x08004ba5
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b92:	e0d8      	b.n	8004d46 <UART_SetConfig+0x2fe>
 8004b94:	2302      	movs	r3, #2
 8004b96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b9a:	e0d4      	b.n	8004d46 <UART_SetConfig+0x2fe>
 8004b9c:	2304      	movs	r3, #4
 8004b9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ba2:	e0d0      	b.n	8004d46 <UART_SetConfig+0x2fe>
 8004ba4:	2308      	movs	r3, #8
 8004ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004baa:	e0cc      	b.n	8004d46 <UART_SetConfig+0x2fe>
 8004bac:	2310      	movs	r3, #16
 8004bae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bb2:	e0c8      	b.n	8004d46 <UART_SetConfig+0x2fe>
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a5e      	ldr	r2, [pc, #376]	; (8004d34 <UART_SetConfig+0x2ec>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d125      	bne.n	8004c0a <UART_SetConfig+0x1c2>
 8004bbe:	4b5b      	ldr	r3, [pc, #364]	; (8004d2c <UART_SetConfig+0x2e4>)
 8004bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004bc8:	2b30      	cmp	r3, #48	; 0x30
 8004bca:	d016      	beq.n	8004bfa <UART_SetConfig+0x1b2>
 8004bcc:	2b30      	cmp	r3, #48	; 0x30
 8004bce:	d818      	bhi.n	8004c02 <UART_SetConfig+0x1ba>
 8004bd0:	2b20      	cmp	r3, #32
 8004bd2:	d00a      	beq.n	8004bea <UART_SetConfig+0x1a2>
 8004bd4:	2b20      	cmp	r3, #32
 8004bd6:	d814      	bhi.n	8004c02 <UART_SetConfig+0x1ba>
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d002      	beq.n	8004be2 <UART_SetConfig+0x19a>
 8004bdc:	2b10      	cmp	r3, #16
 8004bde:	d008      	beq.n	8004bf2 <UART_SetConfig+0x1aa>
 8004be0:	e00f      	b.n	8004c02 <UART_SetConfig+0x1ba>
 8004be2:	2300      	movs	r3, #0
 8004be4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004be8:	e0ad      	b.n	8004d46 <UART_SetConfig+0x2fe>
 8004bea:	2302      	movs	r3, #2
 8004bec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bf0:	e0a9      	b.n	8004d46 <UART_SetConfig+0x2fe>
 8004bf2:	2304      	movs	r3, #4
 8004bf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bf8:	e0a5      	b.n	8004d46 <UART_SetConfig+0x2fe>
 8004bfa:	2308      	movs	r3, #8
 8004bfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c00:	e0a1      	b.n	8004d46 <UART_SetConfig+0x2fe>
 8004c02:	2310      	movs	r3, #16
 8004c04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c08:	e09d      	b.n	8004d46 <UART_SetConfig+0x2fe>
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a4a      	ldr	r2, [pc, #296]	; (8004d38 <UART_SetConfig+0x2f0>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d125      	bne.n	8004c60 <UART_SetConfig+0x218>
 8004c14:	4b45      	ldr	r3, [pc, #276]	; (8004d2c <UART_SetConfig+0x2e4>)
 8004c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c1e:	2bc0      	cmp	r3, #192	; 0xc0
 8004c20:	d016      	beq.n	8004c50 <UART_SetConfig+0x208>
 8004c22:	2bc0      	cmp	r3, #192	; 0xc0
 8004c24:	d818      	bhi.n	8004c58 <UART_SetConfig+0x210>
 8004c26:	2b80      	cmp	r3, #128	; 0x80
 8004c28:	d00a      	beq.n	8004c40 <UART_SetConfig+0x1f8>
 8004c2a:	2b80      	cmp	r3, #128	; 0x80
 8004c2c:	d814      	bhi.n	8004c58 <UART_SetConfig+0x210>
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d002      	beq.n	8004c38 <UART_SetConfig+0x1f0>
 8004c32:	2b40      	cmp	r3, #64	; 0x40
 8004c34:	d008      	beq.n	8004c48 <UART_SetConfig+0x200>
 8004c36:	e00f      	b.n	8004c58 <UART_SetConfig+0x210>
 8004c38:	2300      	movs	r3, #0
 8004c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c3e:	e082      	b.n	8004d46 <UART_SetConfig+0x2fe>
 8004c40:	2302      	movs	r3, #2
 8004c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c46:	e07e      	b.n	8004d46 <UART_SetConfig+0x2fe>
 8004c48:	2304      	movs	r3, #4
 8004c4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c4e:	e07a      	b.n	8004d46 <UART_SetConfig+0x2fe>
 8004c50:	2308      	movs	r3, #8
 8004c52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c56:	e076      	b.n	8004d46 <UART_SetConfig+0x2fe>
 8004c58:	2310      	movs	r3, #16
 8004c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c5e:	e072      	b.n	8004d46 <UART_SetConfig+0x2fe>
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a35      	ldr	r2, [pc, #212]	; (8004d3c <UART_SetConfig+0x2f4>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d12a      	bne.n	8004cc0 <UART_SetConfig+0x278>
 8004c6a:	4b30      	ldr	r3, [pc, #192]	; (8004d2c <UART_SetConfig+0x2e4>)
 8004c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c78:	d01a      	beq.n	8004cb0 <UART_SetConfig+0x268>
 8004c7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c7e:	d81b      	bhi.n	8004cb8 <UART_SetConfig+0x270>
 8004c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c84:	d00c      	beq.n	8004ca0 <UART_SetConfig+0x258>
 8004c86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c8a:	d815      	bhi.n	8004cb8 <UART_SetConfig+0x270>
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d003      	beq.n	8004c98 <UART_SetConfig+0x250>
 8004c90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c94:	d008      	beq.n	8004ca8 <UART_SetConfig+0x260>
 8004c96:	e00f      	b.n	8004cb8 <UART_SetConfig+0x270>
 8004c98:	2300      	movs	r3, #0
 8004c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c9e:	e052      	b.n	8004d46 <UART_SetConfig+0x2fe>
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ca6:	e04e      	b.n	8004d46 <UART_SetConfig+0x2fe>
 8004ca8:	2304      	movs	r3, #4
 8004caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cae:	e04a      	b.n	8004d46 <UART_SetConfig+0x2fe>
 8004cb0:	2308      	movs	r3, #8
 8004cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cb6:	e046      	b.n	8004d46 <UART_SetConfig+0x2fe>
 8004cb8:	2310      	movs	r3, #16
 8004cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cbe:	e042      	b.n	8004d46 <UART_SetConfig+0x2fe>
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a17      	ldr	r2, [pc, #92]	; (8004d24 <UART_SetConfig+0x2dc>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d13a      	bne.n	8004d40 <UART_SetConfig+0x2f8>
 8004cca:	4b18      	ldr	r3, [pc, #96]	; (8004d2c <UART_SetConfig+0x2e4>)
 8004ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004cd4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cd8:	d01a      	beq.n	8004d10 <UART_SetConfig+0x2c8>
 8004cda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cde:	d81b      	bhi.n	8004d18 <UART_SetConfig+0x2d0>
 8004ce0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ce4:	d00c      	beq.n	8004d00 <UART_SetConfig+0x2b8>
 8004ce6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cea:	d815      	bhi.n	8004d18 <UART_SetConfig+0x2d0>
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <UART_SetConfig+0x2b0>
 8004cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cf4:	d008      	beq.n	8004d08 <UART_SetConfig+0x2c0>
 8004cf6:	e00f      	b.n	8004d18 <UART_SetConfig+0x2d0>
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cfe:	e022      	b.n	8004d46 <UART_SetConfig+0x2fe>
 8004d00:	2302      	movs	r3, #2
 8004d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d06:	e01e      	b.n	8004d46 <UART_SetConfig+0x2fe>
 8004d08:	2304      	movs	r3, #4
 8004d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d0e:	e01a      	b.n	8004d46 <UART_SetConfig+0x2fe>
 8004d10:	2308      	movs	r3, #8
 8004d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d16:	e016      	b.n	8004d46 <UART_SetConfig+0x2fe>
 8004d18:	2310      	movs	r3, #16
 8004d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d1e:	e012      	b.n	8004d46 <UART_SetConfig+0x2fe>
 8004d20:	cfff69f3 	.word	0xcfff69f3
 8004d24:	40008000 	.word	0x40008000
 8004d28:	40013800 	.word	0x40013800
 8004d2c:	40021000 	.word	0x40021000
 8004d30:	40004400 	.word	0x40004400
 8004d34:	40004800 	.word	0x40004800
 8004d38:	40004c00 	.word	0x40004c00
 8004d3c:	40005000 	.word	0x40005000
 8004d40:	2310      	movs	r3, #16
 8004d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4aae      	ldr	r2, [pc, #696]	; (8005004 <UART_SetConfig+0x5bc>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	f040 8097 	bne.w	8004e80 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d56:	2b08      	cmp	r3, #8
 8004d58:	d823      	bhi.n	8004da2 <UART_SetConfig+0x35a>
 8004d5a:	a201      	add	r2, pc, #4	; (adr r2, 8004d60 <UART_SetConfig+0x318>)
 8004d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d60:	08004d85 	.word	0x08004d85
 8004d64:	08004da3 	.word	0x08004da3
 8004d68:	08004d8d 	.word	0x08004d8d
 8004d6c:	08004da3 	.word	0x08004da3
 8004d70:	08004d93 	.word	0x08004d93
 8004d74:	08004da3 	.word	0x08004da3
 8004d78:	08004da3 	.word	0x08004da3
 8004d7c:	08004da3 	.word	0x08004da3
 8004d80:	08004d9b 	.word	0x08004d9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d84:	f7fd fbfc 	bl	8002580 <HAL_RCC_GetPCLK1Freq>
 8004d88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d8a:	e010      	b.n	8004dae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d8c:	4b9e      	ldr	r3, [pc, #632]	; (8005008 <UART_SetConfig+0x5c0>)
 8004d8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d90:	e00d      	b.n	8004dae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d92:	f7fd fb87 	bl	80024a4 <HAL_RCC_GetSysClockFreq>
 8004d96:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d98:	e009      	b.n	8004dae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004da0:	e005      	b.n	8004dae <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004da2:	2300      	movs	r3, #0
 8004da4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004dac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f000 8130 	beq.w	8005016 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	4a94      	ldr	r2, [pc, #592]	; (800500c <UART_SetConfig+0x5c4>)
 8004dbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004dc8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	685a      	ldr	r2, [r3, #4]
 8004dce:	4613      	mov	r3, r2
 8004dd0:	005b      	lsls	r3, r3, #1
 8004dd2:	4413      	add	r3, r2
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d305      	bcc.n	8004de6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d903      	bls.n	8004dee <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004dec:	e113      	b.n	8005016 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df0:	2200      	movs	r2, #0
 8004df2:	60bb      	str	r3, [r7, #8]
 8004df4:	60fa      	str	r2, [r7, #12]
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfa:	4a84      	ldr	r2, [pc, #528]	; (800500c <UART_SetConfig+0x5c4>)
 8004dfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	2200      	movs	r2, #0
 8004e04:	603b      	str	r3, [r7, #0]
 8004e06:	607a      	str	r2, [r7, #4]
 8004e08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e10:	f7fb fa66 	bl	80002e0 <__aeabi_uldivmod>
 8004e14:	4602      	mov	r2, r0
 8004e16:	460b      	mov	r3, r1
 8004e18:	4610      	mov	r0, r2
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	f04f 0200 	mov.w	r2, #0
 8004e20:	f04f 0300 	mov.w	r3, #0
 8004e24:	020b      	lsls	r3, r1, #8
 8004e26:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004e2a:	0202      	lsls	r2, r0, #8
 8004e2c:	6979      	ldr	r1, [r7, #20]
 8004e2e:	6849      	ldr	r1, [r1, #4]
 8004e30:	0849      	lsrs	r1, r1, #1
 8004e32:	2000      	movs	r0, #0
 8004e34:	460c      	mov	r4, r1
 8004e36:	4605      	mov	r5, r0
 8004e38:	eb12 0804 	adds.w	r8, r2, r4
 8004e3c:	eb43 0905 	adc.w	r9, r3, r5
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	469a      	mov	sl, r3
 8004e48:	4693      	mov	fp, r2
 8004e4a:	4652      	mov	r2, sl
 8004e4c:	465b      	mov	r3, fp
 8004e4e:	4640      	mov	r0, r8
 8004e50:	4649      	mov	r1, r9
 8004e52:	f7fb fa45 	bl	80002e0 <__aeabi_uldivmod>
 8004e56:	4602      	mov	r2, r0
 8004e58:	460b      	mov	r3, r1
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e5e:	6a3b      	ldr	r3, [r7, #32]
 8004e60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e64:	d308      	bcc.n	8004e78 <UART_SetConfig+0x430>
 8004e66:	6a3b      	ldr	r3, [r7, #32]
 8004e68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e6c:	d204      	bcs.n	8004e78 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	6a3a      	ldr	r2, [r7, #32]
 8004e74:	60da      	str	r2, [r3, #12]
 8004e76:	e0ce      	b.n	8005016 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004e7e:	e0ca      	b.n	8005016 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	69db      	ldr	r3, [r3, #28]
 8004e84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e88:	d166      	bne.n	8004f58 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004e8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e8e:	2b08      	cmp	r3, #8
 8004e90:	d827      	bhi.n	8004ee2 <UART_SetConfig+0x49a>
 8004e92:	a201      	add	r2, pc, #4	; (adr r2, 8004e98 <UART_SetConfig+0x450>)
 8004e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e98:	08004ebd 	.word	0x08004ebd
 8004e9c:	08004ec5 	.word	0x08004ec5
 8004ea0:	08004ecd 	.word	0x08004ecd
 8004ea4:	08004ee3 	.word	0x08004ee3
 8004ea8:	08004ed3 	.word	0x08004ed3
 8004eac:	08004ee3 	.word	0x08004ee3
 8004eb0:	08004ee3 	.word	0x08004ee3
 8004eb4:	08004ee3 	.word	0x08004ee3
 8004eb8:	08004edb 	.word	0x08004edb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ebc:	f7fd fb60 	bl	8002580 <HAL_RCC_GetPCLK1Freq>
 8004ec0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ec2:	e014      	b.n	8004eee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ec4:	f7fd fb72 	bl	80025ac <HAL_RCC_GetPCLK2Freq>
 8004ec8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004eca:	e010      	b.n	8004eee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ecc:	4b4e      	ldr	r3, [pc, #312]	; (8005008 <UART_SetConfig+0x5c0>)
 8004ece:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ed0:	e00d      	b.n	8004eee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ed2:	f7fd fae7 	bl	80024a4 <HAL_RCC_GetSysClockFreq>
 8004ed6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ed8:	e009      	b.n	8004eee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ede:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ee0:	e005      	b.n	8004eee <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004eec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f000 8090 	beq.w	8005016 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efa:	4a44      	ldr	r2, [pc, #272]	; (800500c <UART_SetConfig+0x5c4>)
 8004efc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f00:	461a      	mov	r2, r3
 8004f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f04:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f08:	005a      	lsls	r2, r3, #1
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	085b      	lsrs	r3, r3, #1
 8004f10:	441a      	add	r2, r3
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f1a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f1c:	6a3b      	ldr	r3, [r7, #32]
 8004f1e:	2b0f      	cmp	r3, #15
 8004f20:	d916      	bls.n	8004f50 <UART_SetConfig+0x508>
 8004f22:	6a3b      	ldr	r3, [r7, #32]
 8004f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f28:	d212      	bcs.n	8004f50 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f2a:	6a3b      	ldr	r3, [r7, #32]
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	f023 030f 	bic.w	r3, r3, #15
 8004f32:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f34:	6a3b      	ldr	r3, [r7, #32]
 8004f36:	085b      	lsrs	r3, r3, #1
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	f003 0307 	and.w	r3, r3, #7
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	8bfb      	ldrh	r3, [r7, #30]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	8bfa      	ldrh	r2, [r7, #30]
 8004f4c:	60da      	str	r2, [r3, #12]
 8004f4e:	e062      	b.n	8005016 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004f56:	e05e      	b.n	8005016 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f58:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004f5c:	2b08      	cmp	r3, #8
 8004f5e:	d828      	bhi.n	8004fb2 <UART_SetConfig+0x56a>
 8004f60:	a201      	add	r2, pc, #4	; (adr r2, 8004f68 <UART_SetConfig+0x520>)
 8004f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f66:	bf00      	nop
 8004f68:	08004f8d 	.word	0x08004f8d
 8004f6c:	08004f95 	.word	0x08004f95
 8004f70:	08004f9d 	.word	0x08004f9d
 8004f74:	08004fb3 	.word	0x08004fb3
 8004f78:	08004fa3 	.word	0x08004fa3
 8004f7c:	08004fb3 	.word	0x08004fb3
 8004f80:	08004fb3 	.word	0x08004fb3
 8004f84:	08004fb3 	.word	0x08004fb3
 8004f88:	08004fab 	.word	0x08004fab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f8c:	f7fd faf8 	bl	8002580 <HAL_RCC_GetPCLK1Freq>
 8004f90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f92:	e014      	b.n	8004fbe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f94:	f7fd fb0a 	bl	80025ac <HAL_RCC_GetPCLK2Freq>
 8004f98:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f9a:	e010      	b.n	8004fbe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f9c:	4b1a      	ldr	r3, [pc, #104]	; (8005008 <UART_SetConfig+0x5c0>)
 8004f9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004fa0:	e00d      	b.n	8004fbe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fa2:	f7fd fa7f 	bl	80024a4 <HAL_RCC_GetSysClockFreq>
 8004fa6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004fa8:	e009      	b.n	8004fbe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004faa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004fb0:	e005      	b.n	8004fbe <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004fbc:	bf00      	nop
    }

    if (pclk != 0U)
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d028      	beq.n	8005016 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc8:	4a10      	ldr	r2, [pc, #64]	; (800500c <UART_SetConfig+0x5c4>)
 8004fca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd2:	fbb3 f2f2 	udiv	r2, r3, r2
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	085b      	lsrs	r3, r3, #1
 8004fdc:	441a      	add	r2, r3
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fe8:	6a3b      	ldr	r3, [r7, #32]
 8004fea:	2b0f      	cmp	r3, #15
 8004fec:	d910      	bls.n	8005010 <UART_SetConfig+0x5c8>
 8004fee:	6a3b      	ldr	r3, [r7, #32]
 8004ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ff4:	d20c      	bcs.n	8005010 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ff6:	6a3b      	ldr	r3, [r7, #32]
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	60da      	str	r2, [r3, #12]
 8005000:	e009      	b.n	8005016 <UART_SetConfig+0x5ce>
 8005002:	bf00      	nop
 8005004:	40008000 	.word	0x40008000
 8005008:	00f42400 	.word	0x00f42400
 800500c:	08007bf4 	.word	0x08007bf4
      }
      else
      {
        ret = HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	2201      	movs	r2, #1
 800501a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	2201      	movs	r2, #1
 8005022:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	2200      	movs	r2, #0
 800502a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	2200      	movs	r2, #0
 8005030:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005032:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005036:	4618      	mov	r0, r3
 8005038:	3730      	adds	r7, #48	; 0x30
 800503a:	46bd      	mov	sp, r7
 800503c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005040 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504c:	f003 0301 	and.w	r3, r3, #1
 8005050:	2b00      	cmp	r3, #0
 8005052:	d00a      	beq.n	800506a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	430a      	orrs	r2, r1
 8005068:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00a      	beq.n	800508c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	430a      	orrs	r2, r1
 800508a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005090:	f003 0304 	and.w	r3, r3, #4
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00a      	beq.n	80050ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b2:	f003 0308 	and.w	r3, r3, #8
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00a      	beq.n	80050d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	430a      	orrs	r2, r1
 80050ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d4:	f003 0310 	and.w	r3, r3, #16
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00a      	beq.n	80050f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f6:	f003 0320 	and.w	r3, r3, #32
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00a      	beq.n	8005114 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	430a      	orrs	r2, r1
 8005112:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800511c:	2b00      	cmp	r3, #0
 800511e:	d01a      	beq.n	8005156 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800513a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800513e:	d10a      	bne.n	8005156 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	430a      	orrs	r2, r1
 8005154:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00a      	beq.n	8005178 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	430a      	orrs	r2, r1
 8005176:	605a      	str	r2, [r3, #4]
  }
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af02      	add	r7, sp, #8
 800518a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005194:	f7fc f8d8 	bl	8001348 <HAL_GetTick>
 8005198:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0308 	and.w	r3, r3, #8
 80051a4:	2b08      	cmp	r3, #8
 80051a6:	d10e      	bne.n	80051c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051ac:	9300      	str	r3, [sp, #0]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 f82f 	bl	800521a <UART_WaitOnFlagUntilTimeout>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d001      	beq.n	80051c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e025      	b.n	8005212 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0304 	and.w	r3, r3, #4
 80051d0:	2b04      	cmp	r3, #4
 80051d2:	d10e      	bne.n	80051f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051d8:	9300      	str	r3, [sp, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f819 	bl	800521a <UART_WaitOnFlagUntilTimeout>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d001      	beq.n	80051f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e00f      	b.n	8005212 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2220      	movs	r2, #32
 80051f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2220      	movs	r2, #32
 80051fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b09c      	sub	sp, #112	; 0x70
 800521e:	af00      	add	r7, sp, #0
 8005220:	60f8      	str	r0, [r7, #12]
 8005222:	60b9      	str	r1, [r7, #8]
 8005224:	603b      	str	r3, [r7, #0]
 8005226:	4613      	mov	r3, r2
 8005228:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800522a:	e0a9      	b.n	8005380 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800522c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800522e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005232:	f000 80a5 	beq.w	8005380 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005236:	f7fc f887 	bl	8001348 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005242:	429a      	cmp	r2, r3
 8005244:	d302      	bcc.n	800524c <UART_WaitOnFlagUntilTimeout+0x32>
 8005246:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005248:	2b00      	cmp	r3, #0
 800524a:	d140      	bne.n	80052ce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005254:	e853 3f00 	ldrex	r3, [r3]
 8005258:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800525a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800525c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005260:	667b      	str	r3, [r7, #100]	; 0x64
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	461a      	mov	r2, r3
 8005268:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800526a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800526c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005270:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005272:	e841 2300 	strex	r3, r2, [r1]
 8005276:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005278:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1e6      	bne.n	800524c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	3308      	adds	r3, #8
 8005284:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005288:	e853 3f00 	ldrex	r3, [r3]
 800528c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800528e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005290:	f023 0301 	bic.w	r3, r3, #1
 8005294:	663b      	str	r3, [r7, #96]	; 0x60
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	3308      	adds	r3, #8
 800529c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800529e:	64ba      	str	r2, [r7, #72]	; 0x48
 80052a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052a6:	e841 2300 	strex	r3, r2, [r1]
 80052aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80052ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1e5      	bne.n	800527e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2220      	movs	r2, #32
 80052b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2220      	movs	r2, #32
 80052be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e069      	b.n	80053a2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0304 	and.w	r3, r3, #4
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d051      	beq.n	8005380 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052ea:	d149      	bne.n	8005380 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052f4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fe:	e853 3f00 	ldrex	r3, [r3]
 8005302:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005306:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800530a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	461a      	mov	r2, r3
 8005312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005314:	637b      	str	r3, [r7, #52]	; 0x34
 8005316:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005318:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800531a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800531c:	e841 2300 	strex	r3, r2, [r1]
 8005320:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1e6      	bne.n	80052f6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	3308      	adds	r3, #8
 800532e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	e853 3f00 	ldrex	r3, [r3]
 8005336:	613b      	str	r3, [r7, #16]
   return(result);
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	f023 0301 	bic.w	r3, r3, #1
 800533e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	3308      	adds	r3, #8
 8005346:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005348:	623a      	str	r2, [r7, #32]
 800534a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534c:	69f9      	ldr	r1, [r7, #28]
 800534e:	6a3a      	ldr	r2, [r7, #32]
 8005350:	e841 2300 	strex	r3, r2, [r1]
 8005354:	61bb      	str	r3, [r7, #24]
   return(result);
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1e5      	bne.n	8005328 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2220      	movs	r2, #32
 8005360:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2220      	movs	r2, #32
 8005368:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2220      	movs	r2, #32
 8005370:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e010      	b.n	80053a2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	69da      	ldr	r2, [r3, #28]
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	4013      	ands	r3, r2
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	429a      	cmp	r2, r3
 800538e:	bf0c      	ite	eq
 8005390:	2301      	moveq	r3, #1
 8005392:	2300      	movne	r3, #0
 8005394:	b2db      	uxtb	r3, r3
 8005396:	461a      	mov	r2, r3
 8005398:	79fb      	ldrb	r3, [r7, #7]
 800539a:	429a      	cmp	r2, r3
 800539c:	f43f af46 	beq.w	800522c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3770      	adds	r7, #112	; 0x70
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
	...

080053ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b0a3      	sub	sp, #140	; 0x8c
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	4613      	mov	r3, r2
 80053b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	88fa      	ldrh	r2, [r7, #6]
 80053c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	88fa      	ldrh	r2, [r7, #6]
 80053cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053de:	d10e      	bne.n	80053fe <UART_Start_Receive_IT+0x52>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d105      	bne.n	80053f4 <UART_Start_Receive_IT+0x48>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f240 12ff 	movw	r2, #511	; 0x1ff
 80053ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80053f2:	e02d      	b.n	8005450 <UART_Start_Receive_IT+0xa4>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	22ff      	movs	r2, #255	; 0xff
 80053f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80053fc:	e028      	b.n	8005450 <UART_Start_Receive_IT+0xa4>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10d      	bne.n	8005422 <UART_Start_Receive_IT+0x76>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d104      	bne.n	8005418 <UART_Start_Receive_IT+0x6c>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	22ff      	movs	r2, #255	; 0xff
 8005412:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005416:	e01b      	b.n	8005450 <UART_Start_Receive_IT+0xa4>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	227f      	movs	r2, #127	; 0x7f
 800541c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005420:	e016      	b.n	8005450 <UART_Start_Receive_IT+0xa4>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800542a:	d10d      	bne.n	8005448 <UART_Start_Receive_IT+0x9c>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d104      	bne.n	800543e <UART_Start_Receive_IT+0x92>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	227f      	movs	r2, #127	; 0x7f
 8005438:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800543c:	e008      	b.n	8005450 <UART_Start_Receive_IT+0xa4>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	223f      	movs	r2, #63	; 0x3f
 8005442:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005446:	e003      	b.n	8005450 <UART_Start_Receive_IT+0xa4>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2200      	movs	r2, #0
 8005454:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2222      	movs	r2, #34	; 0x22
 800545c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	3308      	adds	r3, #8
 8005466:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005468:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800546a:	e853 3f00 	ldrex	r3, [r3]
 800546e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005470:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005472:	f043 0301 	orr.w	r3, r3, #1
 8005476:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	3308      	adds	r3, #8
 8005480:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005484:	673a      	str	r2, [r7, #112]	; 0x70
 8005486:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005488:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800548a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800548c:	e841 2300 	strex	r3, r2, [r1]
 8005490:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8005492:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1e3      	bne.n	8005460 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800549c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054a0:	d153      	bne.n	800554a <UART_Start_Receive_IT+0x19e>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80054a8:	88fa      	ldrh	r2, [r7, #6]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d34d      	bcc.n	800554a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054b6:	d107      	bne.n	80054c8 <UART_Start_Receive_IT+0x11c>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d103      	bne.n	80054c8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4a4b      	ldr	r2, [pc, #300]	; (80055f0 <UART_Start_Receive_IT+0x244>)
 80054c4:	671a      	str	r2, [r3, #112]	; 0x70
 80054c6:	e002      	b.n	80054ce <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	4a4a      	ldr	r2, [pc, #296]	; (80055f4 <UART_Start_Receive_IT+0x248>)
 80054cc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d01a      	beq.n	8005514 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054e6:	e853 3f00 	ldrex	r3, [r3]
 80054ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80054ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	461a      	mov	r2, r3
 80054fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005500:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005502:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005504:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005506:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005508:	e841 2300 	strex	r3, r2, [r1]
 800550c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800550e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1e4      	bne.n	80054de <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	3308      	adds	r3, #8
 800551a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800551e:	e853 3f00 	ldrex	r3, [r3]
 8005522:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800552a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	3308      	adds	r3, #8
 8005532:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005534:	64ba      	str	r2, [r7, #72]	; 0x48
 8005536:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005538:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800553a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800553c:	e841 2300 	strex	r3, r2, [r1]
 8005540:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005542:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1e5      	bne.n	8005514 <UART_Start_Receive_IT+0x168>
 8005548:	e04a      	b.n	80055e0 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005552:	d107      	bne.n	8005564 <UART_Start_Receive_IT+0x1b8>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d103      	bne.n	8005564 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	4a26      	ldr	r2, [pc, #152]	; (80055f8 <UART_Start_Receive_IT+0x24c>)
 8005560:	671a      	str	r2, [r3, #112]	; 0x70
 8005562:	e002      	b.n	800556a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	4a25      	ldr	r2, [pc, #148]	; (80055fc <UART_Start_Receive_IT+0x250>)
 8005568:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d019      	beq.n	80055ae <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005582:	e853 3f00 	ldrex	r3, [r3]
 8005586:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800558e:	677b      	str	r3, [r7, #116]	; 0x74
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	461a      	mov	r2, r3
 8005596:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005598:	637b      	str	r3, [r7, #52]	; 0x34
 800559a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800559e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055a0:	e841 2300 	strex	r3, r2, [r1]
 80055a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80055a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1e6      	bne.n	800557a <UART_Start_Receive_IT+0x1ce>
 80055ac:	e018      	b.n	80055e0 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	e853 3f00 	ldrex	r3, [r3]
 80055ba:	613b      	str	r3, [r7, #16]
   return(result);
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	f043 0320 	orr.w	r3, r3, #32
 80055c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	461a      	mov	r2, r3
 80055ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055cc:	623b      	str	r3, [r7, #32]
 80055ce:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d0:	69f9      	ldr	r1, [r7, #28]
 80055d2:	6a3a      	ldr	r2, [r7, #32]
 80055d4:	e841 2300 	strex	r3, r2, [r1]
 80055d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1e6      	bne.n	80055ae <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	378c      	adds	r7, #140	; 0x8c
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	08005d09 	.word	0x08005d09
 80055f4:	08005a11 	.word	0x08005a11
 80055f8:	080058af 	.word	0x080058af
 80055fc:	0800574f 	.word	0x0800574f

08005600 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005600:	b480      	push	{r7}
 8005602:	b095      	sub	sp, #84	; 0x54
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005610:	e853 3f00 	ldrex	r3, [r3]
 8005614:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005618:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800561c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	461a      	mov	r2, r3
 8005624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005626:	643b      	str	r3, [r7, #64]	; 0x40
 8005628:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800562c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800562e:	e841 2300 	strex	r3, r2, [r1]
 8005632:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1e6      	bne.n	8005608 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	3308      	adds	r3, #8
 8005640:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005642:	6a3b      	ldr	r3, [r7, #32]
 8005644:	e853 3f00 	ldrex	r3, [r3]
 8005648:	61fb      	str	r3, [r7, #28]
   return(result);
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005650:	f023 0301 	bic.w	r3, r3, #1
 8005654:	64bb      	str	r3, [r7, #72]	; 0x48
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	3308      	adds	r3, #8
 800565c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800565e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005660:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005662:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005664:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005666:	e841 2300 	strex	r3, r2, [r1]
 800566a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1e3      	bne.n	800563a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005676:	2b01      	cmp	r3, #1
 8005678:	d118      	bne.n	80056ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	e853 3f00 	ldrex	r3, [r3]
 8005686:	60bb      	str	r3, [r7, #8]
   return(result);
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	f023 0310 	bic.w	r3, r3, #16
 800568e:	647b      	str	r3, [r7, #68]	; 0x44
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	461a      	mov	r2, r3
 8005696:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005698:	61bb      	str	r3, [r7, #24]
 800569a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569c:	6979      	ldr	r1, [r7, #20]
 800569e:	69ba      	ldr	r2, [r7, #24]
 80056a0:	e841 2300 	strex	r3, r2, [r1]
 80056a4:	613b      	str	r3, [r7, #16]
   return(result);
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1e6      	bne.n	800567a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2220      	movs	r2, #32
 80056b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	671a      	str	r2, [r3, #112]	; 0x70
}
 80056c0:	bf00      	nop
 80056c2:	3754      	adds	r7, #84	; 0x54
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	f7ff f996 	bl	8004a1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056f0:	bf00      	nop
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b088      	sub	sp, #32
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	e853 3f00 	ldrex	r3, [r3]
 800570c:	60bb      	str	r3, [r7, #8]
   return(result);
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005714:	61fb      	str	r3, [r7, #28]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	461a      	mov	r2, r3
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	61bb      	str	r3, [r7, #24]
 8005720:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005722:	6979      	ldr	r1, [r7, #20]
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	e841 2300 	strex	r3, r2, [r1]
 800572a:	613b      	str	r3, [r7, #16]
   return(result);
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1e6      	bne.n	8005700 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2220      	movs	r2, #32
 8005736:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f7ff f961 	bl	8004a08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005746:	bf00      	nop
 8005748:	3720      	adds	r7, #32
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b096      	sub	sp, #88	; 0x58
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800575c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005766:	2b22      	cmp	r3, #34	; 0x22
 8005768:	f040 8095 	bne.w	8005896 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005772:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005776:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800577a:	b2d9      	uxtb	r1, r3
 800577c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005780:	b2da      	uxtb	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005786:	400a      	ands	r2, r1
 8005788:	b2d2      	uxtb	r2, r2
 800578a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005790:	1c5a      	adds	r2, r3, #1
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800579c:	b29b      	uxth	r3, r3
 800579e:	3b01      	subs	r3, #1
 80057a0:	b29a      	uxth	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d178      	bne.n	80058a6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057bc:	e853 3f00 	ldrex	r3, [r3]
 80057c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057c8:	653b      	str	r3, [r7, #80]	; 0x50
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	461a      	mov	r2, r3
 80057d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057d2:	647b      	str	r3, [r7, #68]	; 0x44
 80057d4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057da:	e841 2300 	strex	r3, r2, [r1]
 80057de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1e6      	bne.n	80057b4 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	3308      	adds	r3, #8
 80057ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f0:	e853 3f00 	ldrex	r3, [r3]
 80057f4:	623b      	str	r3, [r7, #32]
   return(result);
 80057f6:	6a3b      	ldr	r3, [r7, #32]
 80057f8:	f023 0301 	bic.w	r3, r3, #1
 80057fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	3308      	adds	r3, #8
 8005804:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005806:	633a      	str	r2, [r7, #48]	; 0x30
 8005808:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800580c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800580e:	e841 2300 	strex	r3, r2, [r1]
 8005812:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1e5      	bne.n	80057e6 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2220      	movs	r2, #32
 800581e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800582c:	2b01      	cmp	r3, #1
 800582e:	d12e      	bne.n	800588e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	e853 3f00 	ldrex	r3, [r3]
 8005842:	60fb      	str	r3, [r7, #12]
   return(result);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f023 0310 	bic.w	r3, r3, #16
 800584a:	64bb      	str	r3, [r7, #72]	; 0x48
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	461a      	mov	r2, r3
 8005852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005854:	61fb      	str	r3, [r7, #28]
 8005856:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005858:	69b9      	ldr	r1, [r7, #24]
 800585a:	69fa      	ldr	r2, [r7, #28]
 800585c:	e841 2300 	strex	r3, r2, [r1]
 8005860:	617b      	str	r3, [r7, #20]
   return(result);
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1e6      	bne.n	8005836 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	69db      	ldr	r3, [r3, #28]
 800586e:	f003 0310 	and.w	r3, r3, #16
 8005872:	2b10      	cmp	r3, #16
 8005874:	d103      	bne.n	800587e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2210      	movs	r2, #16
 800587c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005884:	4619      	mov	r1, r3
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f7ff f8d2 	bl	8004a30 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800588c:	e00b      	b.n	80058a6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f7fb fc44 	bl	800111c <HAL_UART_RxCpltCallback>
}
 8005894:	e007      	b.n	80058a6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	699a      	ldr	r2, [r3, #24]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f042 0208 	orr.w	r2, r2, #8
 80058a4:	619a      	str	r2, [r3, #24]
}
 80058a6:	bf00      	nop
 80058a8:	3758      	adds	r7, #88	; 0x58
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b096      	sub	sp, #88	; 0x58
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80058bc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c6:	2b22      	cmp	r3, #34	; 0x22
 80058c8:	f040 8095 	bne.w	80059f6 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058da:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80058dc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80058e0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80058e4:	4013      	ands	r3, r2
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058ea:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058f0:	1c9a      	adds	r2, r3, #2
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	3b01      	subs	r3, #1
 8005900:	b29a      	uxth	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800590e:	b29b      	uxth	r3, r3
 8005910:	2b00      	cmp	r3, #0
 8005912:	d178      	bne.n	8005a06 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800591c:	e853 3f00 	ldrex	r3, [r3]
 8005920:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005924:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005928:	64fb      	str	r3, [r7, #76]	; 0x4c
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	461a      	mov	r2, r3
 8005930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005932:	643b      	str	r3, [r7, #64]	; 0x40
 8005934:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005936:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005938:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800593a:	e841 2300 	strex	r3, r2, [r1]
 800593e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1e6      	bne.n	8005914 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	3308      	adds	r3, #8
 800594c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	e853 3f00 	ldrex	r3, [r3]
 8005954:	61fb      	str	r3, [r7, #28]
   return(result);
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	f023 0301 	bic.w	r3, r3, #1
 800595c:	64bb      	str	r3, [r7, #72]	; 0x48
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	3308      	adds	r3, #8
 8005964:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005966:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005968:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800596c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800596e:	e841 2300 	strex	r3, r2, [r1]
 8005972:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1e5      	bne.n	8005946 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2220      	movs	r2, #32
 800597e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800598c:	2b01      	cmp	r3, #1
 800598e:	d12e      	bne.n	80059ee <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	e853 3f00 	ldrex	r3, [r3]
 80059a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	f023 0310 	bic.w	r3, r3, #16
 80059aa:	647b      	str	r3, [r7, #68]	; 0x44
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	461a      	mov	r2, r3
 80059b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059b4:	61bb      	str	r3, [r7, #24]
 80059b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b8:	6979      	ldr	r1, [r7, #20]
 80059ba:	69ba      	ldr	r2, [r7, #24]
 80059bc:	e841 2300 	strex	r3, r2, [r1]
 80059c0:	613b      	str	r3, [r7, #16]
   return(result);
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1e6      	bne.n	8005996 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	f003 0310 	and.w	r3, r3, #16
 80059d2:	2b10      	cmp	r3, #16
 80059d4:	d103      	bne.n	80059de <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2210      	movs	r2, #16
 80059dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80059e4:	4619      	mov	r1, r3
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f7ff f822 	bl	8004a30 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80059ec:	e00b      	b.n	8005a06 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f7fb fb94 	bl	800111c <HAL_UART_RxCpltCallback>
}
 80059f4:	e007      	b.n	8005a06 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	699a      	ldr	r2, [r3, #24]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f042 0208 	orr.w	r2, r2, #8
 8005a04:	619a      	str	r2, [r3, #24]
}
 8005a06:	bf00      	nop
 8005a08:	3758      	adds	r7, #88	; 0x58
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
	...

08005a10 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b0a6      	sub	sp, #152	; 0x98
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005a1e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	69db      	ldr	r3, [r3, #28]
 8005a28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a46:	2b22      	cmp	r3, #34	; 0x22
 8005a48:	f040 814f 	bne.w	8005cea <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005a52:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005a56:	e0f6      	b.n	8005c46 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005a62:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005a66:	b2d9      	uxtb	r1, r3
 8005a68:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8005a6c:	b2da      	uxtb	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a72:	400a      	ands	r2, r1
 8005a74:	b2d2      	uxtb	r2, r2
 8005a76:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a7c:	1c5a      	adds	r2, r3, #1
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	69db      	ldr	r3, [r3, #28]
 8005a9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005a9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005aa2:	f003 0307 	and.w	r3, r3, #7
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d053      	beq.n	8005b52 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005aaa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d011      	beq.n	8005ada <UART_RxISR_8BIT_FIFOEN+0xca>
 8005ab6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00b      	beq.n	8005ada <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ad0:	f043 0201 	orr.w	r2, r3, #1
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ada:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005ade:	f003 0302 	and.w	r3, r3, #2
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d011      	beq.n	8005b0a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005ae6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005aea:	f003 0301 	and.w	r3, r3, #1
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00b      	beq.n	8005b0a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2202      	movs	r2, #2
 8005af8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b00:	f043 0204 	orr.w	r2, r3, #4
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005b0e:	f003 0304 	and.w	r3, r3, #4
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d011      	beq.n	8005b3a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005b16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00b      	beq.n	8005b3a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2204      	movs	r2, #4
 8005b28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b30:	f043 0202 	orr.w	r2, r3, #2
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d006      	beq.n	8005b52 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f7fe ff69 	bl	8004a1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d173      	bne.n	8005c46 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b66:	e853 3f00 	ldrex	r3, [r3]
 8005b6a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8005b6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005b80:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b82:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b84:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005b86:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005b88:	e841 2300 	strex	r3, r2, [r1]
 8005b8c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005b8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1e4      	bne.n	8005b5e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	3308      	adds	r3, #8
 8005b9a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b9e:	e853 3f00 	ldrex	r3, [r3]
 8005ba2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ba6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005baa:	f023 0301 	bic.w	r3, r3, #1
 8005bae:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	3308      	adds	r3, #8
 8005bb6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005bb8:	657a      	str	r2, [r7, #84]	; 0x54
 8005bba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005bbe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005bc0:	e841 2300 	strex	r3, r2, [r1]
 8005bc4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1e3      	bne.n	8005b94 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2220      	movs	r2, #32
 8005bd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d12e      	bne.n	8005c40 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bf0:	e853 3f00 	ldrex	r3, [r3]
 8005bf4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf8:	f023 0310 	bic.w	r3, r3, #16
 8005bfc:	67bb      	str	r3, [r7, #120]	; 0x78
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	461a      	mov	r2, r3
 8005c04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c06:	643b      	str	r3, [r7, #64]	; 0x40
 8005c08:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c0e:	e841 2300 	strex	r3, r2, [r1]
 8005c12:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1e6      	bne.n	8005be8 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	69db      	ldr	r3, [r3, #28]
 8005c20:	f003 0310 	and.w	r3, r3, #16
 8005c24:	2b10      	cmp	r3, #16
 8005c26:	d103      	bne.n	8005c30 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2210      	movs	r2, #16
 8005c2e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005c36:	4619      	mov	r1, r3
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f7fe fef9 	bl	8004a30 <HAL_UARTEx_RxEventCallback>
 8005c3e:	e002      	b.n	8005c46 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f7fb fa6b 	bl	800111c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005c46:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d006      	beq.n	8005c5c <UART_RxISR_8BIT_FIFOEN+0x24c>
 8005c4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005c52:	f003 0320 	and.w	r3, r3, #32
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	f47f aefe 	bne.w	8005a58 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c62:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005c66:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d045      	beq.n	8005cfa <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005c74:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d23e      	bcs.n	8005cfa <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	3308      	adds	r3, #8
 8005c82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c84:	6a3b      	ldr	r3, [r7, #32]
 8005c86:	e853 3f00 	ldrex	r3, [r3]
 8005c8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c92:	673b      	str	r3, [r7, #112]	; 0x70
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	3308      	adds	r3, #8
 8005c9a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005c9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ca2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ca4:	e841 2300 	strex	r3, r2, [r1]
 8005ca8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1e5      	bne.n	8005c7c <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a14      	ldr	r2, [pc, #80]	; (8005d04 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8005cb4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	e853 3f00 	ldrex	r3, [r3]
 8005cc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	f043 0320 	orr.w	r3, r3, #32
 8005cca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cd4:	61bb      	str	r3, [r7, #24]
 8005cd6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd8:	6979      	ldr	r1, [r7, #20]
 8005cda:	69ba      	ldr	r2, [r7, #24]
 8005cdc:	e841 2300 	strex	r3, r2, [r1]
 8005ce0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1e6      	bne.n	8005cb6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ce8:	e007      	b.n	8005cfa <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	699a      	ldr	r2, [r3, #24]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f042 0208 	orr.w	r2, r2, #8
 8005cf8:	619a      	str	r2, [r3, #24]
}
 8005cfa:	bf00      	nop
 8005cfc:	3798      	adds	r7, #152	; 0x98
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	0800574f 	.word	0x0800574f

08005d08 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b0a8      	sub	sp, #160	; 0xa0
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005d16:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	69db      	ldr	r3, [r3, #28]
 8005d20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d3e:	2b22      	cmp	r3, #34	; 0x22
 8005d40:	f040 8153 	bne.w	8005fea <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005d4a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005d4e:	e0fa      	b.n	8005f46 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d56:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8005d62:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8005d66:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d72:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d78:	1c9a      	adds	r2, r3, #2
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	3b01      	subs	r3, #1
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	69db      	ldr	r3, [r3, #28]
 8005d96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005d9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d9e:	f003 0307 	and.w	r3, r3, #7
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d053      	beq.n	8005e4e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005da6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d011      	beq.n	8005dd6 <UART_RxISR_16BIT_FIFOEN+0xce>
 8005db2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00b      	beq.n	8005dd6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dcc:	f043 0201 	orr.w	r2, r3, #1
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005dd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005dda:	f003 0302 	and.w	r3, r3, #2
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d011      	beq.n	8005e06 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005de2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00b      	beq.n	8005e06 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2202      	movs	r2, #2
 8005df4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dfc:	f043 0204 	orr.w	r2, r3, #4
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e0a:	f003 0304 	and.w	r3, r3, #4
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d011      	beq.n	8005e36 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005e12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e16:	f003 0301 	and.w	r3, r3, #1
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00b      	beq.n	8005e36 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2204      	movs	r2, #4
 8005e24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e2c:	f043 0202 	orr.w	r2, r3, #2
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d006      	beq.n	8005e4e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f7fe fdeb 	bl	8004a1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d175      	bne.n	8005f46 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e62:	e853 3f00 	ldrex	r3, [r3]
 8005e66:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	461a      	mov	r2, r3
 8005e78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e7e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e80:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e82:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005e84:	e841 2300 	strex	r3, r2, [r1]
 8005e88:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005e8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d1e4      	bne.n	8005e5a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	3308      	adds	r3, #8
 8005e96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e9a:	e853 3f00 	ldrex	r3, [r3]
 8005e9e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ea2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ea6:	f023 0301 	bic.w	r3, r3, #1
 8005eaa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	3308      	adds	r3, #8
 8005eb4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005eb8:	65ba      	str	r2, [r7, #88]	; 0x58
 8005eba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ebc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ebe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ec0:	e841 2300 	strex	r3, r2, [r1]
 8005ec4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1e1      	bne.n	8005e90 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2220      	movs	r2, #32
 8005ed0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d12e      	bne.n	8005f40 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef0:	e853 3f00 	ldrex	r3, [r3]
 8005ef4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ef8:	f023 0310 	bic.w	r3, r3, #16
 8005efc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	461a      	mov	r2, r3
 8005f04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f06:	647b      	str	r3, [r7, #68]	; 0x44
 8005f08:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f0e:	e841 2300 	strex	r3, r2, [r1]
 8005f12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1e6      	bne.n	8005ee8 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	69db      	ldr	r3, [r3, #28]
 8005f20:	f003 0310 	and.w	r3, r3, #16
 8005f24:	2b10      	cmp	r3, #16
 8005f26:	d103      	bne.n	8005f30 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2210      	movs	r2, #16
 8005f2e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005f36:	4619      	mov	r1, r3
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f7fe fd79 	bl	8004a30 <HAL_UARTEx_RxEventCallback>
 8005f3e:	e002      	b.n	8005f46 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f7fb f8eb 	bl	800111c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005f46:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d006      	beq.n	8005f5c <UART_RxISR_16BIT_FIFOEN+0x254>
 8005f4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f52:	f003 0320 	and.w	r3, r3, #32
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	f47f aefa 	bne.w	8005d50 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f62:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005f66:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d045      	beq.n	8005ffa <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005f74:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d23e      	bcs.n	8005ffa <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	3308      	adds	r3, #8
 8005f82:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f86:	e853 3f00 	ldrex	r3, [r3]
 8005f8a:	623b      	str	r3, [r7, #32]
   return(result);
 8005f8c:	6a3b      	ldr	r3, [r7, #32]
 8005f8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f92:	677b      	str	r3, [r7, #116]	; 0x74
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	3308      	adds	r3, #8
 8005f9a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005f9c:	633a      	str	r2, [r7, #48]	; 0x30
 8005f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fa4:	e841 2300 	strex	r3, r2, [r1]
 8005fa8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d1e5      	bne.n	8005f7c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a14      	ldr	r2, [pc, #80]	; (8006004 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8005fb4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	e853 3f00 	ldrex	r3, [r3]
 8005fc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f043 0320 	orr.w	r3, r3, #32
 8005fca:	673b      	str	r3, [r7, #112]	; 0x70
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fd4:	61fb      	str	r3, [r7, #28]
 8005fd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd8:	69b9      	ldr	r1, [r7, #24]
 8005fda:	69fa      	ldr	r2, [r7, #28]
 8005fdc:	e841 2300 	strex	r3, r2, [r1]
 8005fe0:	617b      	str	r3, [r7, #20]
   return(result);
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1e6      	bne.n	8005fb6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005fe8:	e007      	b.n	8005ffa <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	699a      	ldr	r2, [r3, #24]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f042 0208 	orr.w	r2, r2, #8
 8005ff8:	619a      	str	r2, [r3, #24]
}
 8005ffa:	bf00      	nop
 8005ffc:	37a0      	adds	r7, #160	; 0xa0
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	080058af 	.word	0x080058af

08006008 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006038:	bf00      	nop
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006052:	2b01      	cmp	r3, #1
 8006054:	d101      	bne.n	800605a <HAL_UARTEx_DisableFifoMode+0x16>
 8006056:	2302      	movs	r3, #2
 8006058:	e027      	b.n	80060aa <HAL_UARTEx_DisableFifoMode+0x66>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2224      	movs	r2, #36	; 0x24
 8006066:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f022 0201 	bic.w	r2, r2, #1
 8006080:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006088:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2220      	movs	r2, #32
 800609c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3714      	adds	r7, #20
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr

080060b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b084      	sub	sp, #16
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
 80060be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d101      	bne.n	80060ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80060ca:	2302      	movs	r3, #2
 80060cc:	e02d      	b.n	800612a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2224      	movs	r2, #36	; 0x24
 80060da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f022 0201 	bic.w	r2, r2, #1
 80060f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	683a      	ldr	r2, [r7, #0]
 8006106:	430a      	orrs	r2, r1
 8006108:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f850 	bl	80061b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2220      	movs	r2, #32
 800611c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b084      	sub	sp, #16
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
 800613a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006142:	2b01      	cmp	r3, #1
 8006144:	d101      	bne.n	800614a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006146:	2302      	movs	r3, #2
 8006148:	e02d      	b.n	80061a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2224      	movs	r2, #36	; 0x24
 8006156:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f022 0201 	bic.w	r2, r2, #1
 8006170:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	683a      	ldr	r2, [r7, #0]
 8006182:	430a      	orrs	r2, r1
 8006184:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 f812 	bl	80061b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2220      	movs	r2, #32
 8006198:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
	...

080061b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d108      	bne.n	80061d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80061d0:	e031      	b.n	8006236 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80061d2:	2308      	movs	r3, #8
 80061d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80061d6:	2308      	movs	r3, #8
 80061d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	0e5b      	lsrs	r3, r3, #25
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	f003 0307 	and.w	r3, r3, #7
 80061e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	0f5b      	lsrs	r3, r3, #29
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	f003 0307 	and.w	r3, r3, #7
 80061f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061fa:	7bbb      	ldrb	r3, [r7, #14]
 80061fc:	7b3a      	ldrb	r2, [r7, #12]
 80061fe:	4911      	ldr	r1, [pc, #68]	; (8006244 <UARTEx_SetNbDataToProcess+0x94>)
 8006200:	5c8a      	ldrb	r2, [r1, r2]
 8006202:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006206:	7b3a      	ldrb	r2, [r7, #12]
 8006208:	490f      	ldr	r1, [pc, #60]	; (8006248 <UARTEx_SetNbDataToProcess+0x98>)
 800620a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800620c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006210:	b29a      	uxth	r2, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006218:	7bfb      	ldrb	r3, [r7, #15]
 800621a:	7b7a      	ldrb	r2, [r7, #13]
 800621c:	4909      	ldr	r1, [pc, #36]	; (8006244 <UARTEx_SetNbDataToProcess+0x94>)
 800621e:	5c8a      	ldrb	r2, [r1, r2]
 8006220:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006224:	7b7a      	ldrb	r2, [r7, #13]
 8006226:	4908      	ldr	r1, [pc, #32]	; (8006248 <UARTEx_SetNbDataToProcess+0x98>)
 8006228:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800622a:	fb93 f3f2 	sdiv	r3, r3, r2
 800622e:	b29a      	uxth	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006236:	bf00      	nop
 8006238:	3714      	adds	r7, #20
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	08007c0c 	.word	0x08007c0c
 8006248:	08007c14 	.word	0x08007c14

0800624c <atoi>:
 800624c:	220a      	movs	r2, #10
 800624e:	2100      	movs	r1, #0
 8006250:	f000 b944 	b.w	80064dc <strtol>

08006254 <__errno>:
 8006254:	4b01      	ldr	r3, [pc, #4]	; (800625c <__errno+0x8>)
 8006256:	6818      	ldr	r0, [r3, #0]
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	2000000c 	.word	0x2000000c

08006260 <__libc_init_array>:
 8006260:	b570      	push	{r4, r5, r6, lr}
 8006262:	4d0d      	ldr	r5, [pc, #52]	; (8006298 <__libc_init_array+0x38>)
 8006264:	4c0d      	ldr	r4, [pc, #52]	; (800629c <__libc_init_array+0x3c>)
 8006266:	1b64      	subs	r4, r4, r5
 8006268:	10a4      	asrs	r4, r4, #2
 800626a:	2600      	movs	r6, #0
 800626c:	42a6      	cmp	r6, r4
 800626e:	d109      	bne.n	8006284 <__libc_init_array+0x24>
 8006270:	4d0b      	ldr	r5, [pc, #44]	; (80062a0 <__libc_init_array+0x40>)
 8006272:	4c0c      	ldr	r4, [pc, #48]	; (80062a4 <__libc_init_array+0x44>)
 8006274:	f001 faf2 	bl	800785c <_init>
 8006278:	1b64      	subs	r4, r4, r5
 800627a:	10a4      	asrs	r4, r4, #2
 800627c:	2600      	movs	r6, #0
 800627e:	42a6      	cmp	r6, r4
 8006280:	d105      	bne.n	800628e <__libc_init_array+0x2e>
 8006282:	bd70      	pop	{r4, r5, r6, pc}
 8006284:	f855 3b04 	ldr.w	r3, [r5], #4
 8006288:	4798      	blx	r3
 800628a:	3601      	adds	r6, #1
 800628c:	e7ee      	b.n	800626c <__libc_init_array+0xc>
 800628e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006292:	4798      	blx	r3
 8006294:	3601      	adds	r6, #1
 8006296:	e7f2      	b.n	800627e <__libc_init_array+0x1e>
 8006298:	08007e6c 	.word	0x08007e6c
 800629c:	08007e6c 	.word	0x08007e6c
 80062a0:	08007e6c 	.word	0x08007e6c
 80062a4:	08007e70 	.word	0x08007e70

080062a8 <memset>:
 80062a8:	4402      	add	r2, r0
 80062aa:	4603      	mov	r3, r0
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d100      	bne.n	80062b2 <memset+0xa>
 80062b0:	4770      	bx	lr
 80062b2:	f803 1b01 	strb.w	r1, [r3], #1
 80062b6:	e7f9      	b.n	80062ac <memset+0x4>

080062b8 <sniprintf>:
 80062b8:	b40c      	push	{r2, r3}
 80062ba:	b530      	push	{r4, r5, lr}
 80062bc:	4b17      	ldr	r3, [pc, #92]	; (800631c <sniprintf+0x64>)
 80062be:	1e0c      	subs	r4, r1, #0
 80062c0:	681d      	ldr	r5, [r3, #0]
 80062c2:	b09d      	sub	sp, #116	; 0x74
 80062c4:	da08      	bge.n	80062d8 <sniprintf+0x20>
 80062c6:	238b      	movs	r3, #139	; 0x8b
 80062c8:	602b      	str	r3, [r5, #0]
 80062ca:	f04f 30ff 	mov.w	r0, #4294967295
 80062ce:	b01d      	add	sp, #116	; 0x74
 80062d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062d4:	b002      	add	sp, #8
 80062d6:	4770      	bx	lr
 80062d8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80062dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80062e0:	bf14      	ite	ne
 80062e2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80062e6:	4623      	moveq	r3, r4
 80062e8:	9304      	str	r3, [sp, #16]
 80062ea:	9307      	str	r3, [sp, #28]
 80062ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80062f0:	9002      	str	r0, [sp, #8]
 80062f2:	9006      	str	r0, [sp, #24]
 80062f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80062f8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80062fa:	ab21      	add	r3, sp, #132	; 0x84
 80062fc:	a902      	add	r1, sp, #8
 80062fe:	4628      	mov	r0, r5
 8006300:	9301      	str	r3, [sp, #4]
 8006302:	f000 fa69 	bl	80067d8 <_svfiprintf_r>
 8006306:	1c43      	adds	r3, r0, #1
 8006308:	bfbc      	itt	lt
 800630a:	238b      	movlt	r3, #139	; 0x8b
 800630c:	602b      	strlt	r3, [r5, #0]
 800630e:	2c00      	cmp	r4, #0
 8006310:	d0dd      	beq.n	80062ce <sniprintf+0x16>
 8006312:	9b02      	ldr	r3, [sp, #8]
 8006314:	2200      	movs	r2, #0
 8006316:	701a      	strb	r2, [r3, #0]
 8006318:	e7d9      	b.n	80062ce <sniprintf+0x16>
 800631a:	bf00      	nop
 800631c:	2000000c 	.word	0x2000000c

08006320 <strtok>:
 8006320:	4b16      	ldr	r3, [pc, #88]	; (800637c <strtok+0x5c>)
 8006322:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006324:	681e      	ldr	r6, [r3, #0]
 8006326:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8006328:	4605      	mov	r5, r0
 800632a:	b9fc      	cbnz	r4, 800636c <strtok+0x4c>
 800632c:	2050      	movs	r0, #80	; 0x50
 800632e:	9101      	str	r1, [sp, #4]
 8006330:	f000 f90e 	bl	8006550 <malloc>
 8006334:	9901      	ldr	r1, [sp, #4]
 8006336:	65b0      	str	r0, [r6, #88]	; 0x58
 8006338:	4602      	mov	r2, r0
 800633a:	b920      	cbnz	r0, 8006346 <strtok+0x26>
 800633c:	4b10      	ldr	r3, [pc, #64]	; (8006380 <strtok+0x60>)
 800633e:	4811      	ldr	r0, [pc, #68]	; (8006384 <strtok+0x64>)
 8006340:	2157      	movs	r1, #87	; 0x57
 8006342:	f000 f8d5 	bl	80064f0 <__assert_func>
 8006346:	e9c0 4400 	strd	r4, r4, [r0]
 800634a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800634e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006352:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006356:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800635a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800635e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006362:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006366:	6184      	str	r4, [r0, #24]
 8006368:	7704      	strb	r4, [r0, #28]
 800636a:	6244      	str	r4, [r0, #36]	; 0x24
 800636c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800636e:	2301      	movs	r3, #1
 8006370:	4628      	mov	r0, r5
 8006372:	b002      	add	sp, #8
 8006374:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006378:	f000 b806 	b.w	8006388 <__strtok_r>
 800637c:	2000000c 	.word	0x2000000c
 8006380:	08007c20 	.word	0x08007c20
 8006384:	08007c37 	.word	0x08007c37

08006388 <__strtok_r>:
 8006388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800638a:	b908      	cbnz	r0, 8006390 <__strtok_r+0x8>
 800638c:	6810      	ldr	r0, [r2, #0]
 800638e:	b188      	cbz	r0, 80063b4 <__strtok_r+0x2c>
 8006390:	4604      	mov	r4, r0
 8006392:	4620      	mov	r0, r4
 8006394:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006398:	460f      	mov	r7, r1
 800639a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800639e:	b91e      	cbnz	r6, 80063a8 <__strtok_r+0x20>
 80063a0:	b965      	cbnz	r5, 80063bc <__strtok_r+0x34>
 80063a2:	6015      	str	r5, [r2, #0]
 80063a4:	4628      	mov	r0, r5
 80063a6:	e005      	b.n	80063b4 <__strtok_r+0x2c>
 80063a8:	42b5      	cmp	r5, r6
 80063aa:	d1f6      	bne.n	800639a <__strtok_r+0x12>
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1f0      	bne.n	8006392 <__strtok_r+0xa>
 80063b0:	6014      	str	r4, [r2, #0]
 80063b2:	7003      	strb	r3, [r0, #0]
 80063b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063b6:	461c      	mov	r4, r3
 80063b8:	e00c      	b.n	80063d4 <__strtok_r+0x4c>
 80063ba:	b915      	cbnz	r5, 80063c2 <__strtok_r+0x3a>
 80063bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80063c0:	460e      	mov	r6, r1
 80063c2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80063c6:	42ab      	cmp	r3, r5
 80063c8:	d1f7      	bne.n	80063ba <__strtok_r+0x32>
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d0f3      	beq.n	80063b6 <__strtok_r+0x2e>
 80063ce:	2300      	movs	r3, #0
 80063d0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80063d4:	6014      	str	r4, [r2, #0]
 80063d6:	e7ed      	b.n	80063b4 <__strtok_r+0x2c>

080063d8 <_strtol_l.constprop.0>:
 80063d8:	2b01      	cmp	r3, #1
 80063da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063de:	d001      	beq.n	80063e4 <_strtol_l.constprop.0+0xc>
 80063e0:	2b24      	cmp	r3, #36	; 0x24
 80063e2:	d906      	bls.n	80063f2 <_strtol_l.constprop.0+0x1a>
 80063e4:	f7ff ff36 	bl	8006254 <__errno>
 80063e8:	2316      	movs	r3, #22
 80063ea:	6003      	str	r3, [r0, #0]
 80063ec:	2000      	movs	r0, #0
 80063ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063f2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80064d8 <_strtol_l.constprop.0+0x100>
 80063f6:	460d      	mov	r5, r1
 80063f8:	462e      	mov	r6, r5
 80063fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80063fe:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006402:	f017 0708 	ands.w	r7, r7, #8
 8006406:	d1f7      	bne.n	80063f8 <_strtol_l.constprop.0+0x20>
 8006408:	2c2d      	cmp	r4, #45	; 0x2d
 800640a:	d132      	bne.n	8006472 <_strtol_l.constprop.0+0x9a>
 800640c:	782c      	ldrb	r4, [r5, #0]
 800640e:	2701      	movs	r7, #1
 8006410:	1cb5      	adds	r5, r6, #2
 8006412:	2b00      	cmp	r3, #0
 8006414:	d05b      	beq.n	80064ce <_strtol_l.constprop.0+0xf6>
 8006416:	2b10      	cmp	r3, #16
 8006418:	d109      	bne.n	800642e <_strtol_l.constprop.0+0x56>
 800641a:	2c30      	cmp	r4, #48	; 0x30
 800641c:	d107      	bne.n	800642e <_strtol_l.constprop.0+0x56>
 800641e:	782c      	ldrb	r4, [r5, #0]
 8006420:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006424:	2c58      	cmp	r4, #88	; 0x58
 8006426:	d14d      	bne.n	80064c4 <_strtol_l.constprop.0+0xec>
 8006428:	786c      	ldrb	r4, [r5, #1]
 800642a:	2310      	movs	r3, #16
 800642c:	3502      	adds	r5, #2
 800642e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006432:	f108 38ff 	add.w	r8, r8, #4294967295
 8006436:	f04f 0c00 	mov.w	ip, #0
 800643a:	fbb8 f9f3 	udiv	r9, r8, r3
 800643e:	4666      	mov	r6, ip
 8006440:	fb03 8a19 	mls	sl, r3, r9, r8
 8006444:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006448:	f1be 0f09 	cmp.w	lr, #9
 800644c:	d816      	bhi.n	800647c <_strtol_l.constprop.0+0xa4>
 800644e:	4674      	mov	r4, lr
 8006450:	42a3      	cmp	r3, r4
 8006452:	dd24      	ble.n	800649e <_strtol_l.constprop.0+0xc6>
 8006454:	f1bc 0f00 	cmp.w	ip, #0
 8006458:	db1e      	blt.n	8006498 <_strtol_l.constprop.0+0xc0>
 800645a:	45b1      	cmp	r9, r6
 800645c:	d31c      	bcc.n	8006498 <_strtol_l.constprop.0+0xc0>
 800645e:	d101      	bne.n	8006464 <_strtol_l.constprop.0+0x8c>
 8006460:	45a2      	cmp	sl, r4
 8006462:	db19      	blt.n	8006498 <_strtol_l.constprop.0+0xc0>
 8006464:	fb06 4603 	mla	r6, r6, r3, r4
 8006468:	f04f 0c01 	mov.w	ip, #1
 800646c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006470:	e7e8      	b.n	8006444 <_strtol_l.constprop.0+0x6c>
 8006472:	2c2b      	cmp	r4, #43	; 0x2b
 8006474:	bf04      	itt	eq
 8006476:	782c      	ldrbeq	r4, [r5, #0]
 8006478:	1cb5      	addeq	r5, r6, #2
 800647a:	e7ca      	b.n	8006412 <_strtol_l.constprop.0+0x3a>
 800647c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006480:	f1be 0f19 	cmp.w	lr, #25
 8006484:	d801      	bhi.n	800648a <_strtol_l.constprop.0+0xb2>
 8006486:	3c37      	subs	r4, #55	; 0x37
 8006488:	e7e2      	b.n	8006450 <_strtol_l.constprop.0+0x78>
 800648a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800648e:	f1be 0f19 	cmp.w	lr, #25
 8006492:	d804      	bhi.n	800649e <_strtol_l.constprop.0+0xc6>
 8006494:	3c57      	subs	r4, #87	; 0x57
 8006496:	e7db      	b.n	8006450 <_strtol_l.constprop.0+0x78>
 8006498:	f04f 3cff 	mov.w	ip, #4294967295
 800649c:	e7e6      	b.n	800646c <_strtol_l.constprop.0+0x94>
 800649e:	f1bc 0f00 	cmp.w	ip, #0
 80064a2:	da05      	bge.n	80064b0 <_strtol_l.constprop.0+0xd8>
 80064a4:	2322      	movs	r3, #34	; 0x22
 80064a6:	6003      	str	r3, [r0, #0]
 80064a8:	4646      	mov	r6, r8
 80064aa:	b942      	cbnz	r2, 80064be <_strtol_l.constprop.0+0xe6>
 80064ac:	4630      	mov	r0, r6
 80064ae:	e79e      	b.n	80063ee <_strtol_l.constprop.0+0x16>
 80064b0:	b107      	cbz	r7, 80064b4 <_strtol_l.constprop.0+0xdc>
 80064b2:	4276      	negs	r6, r6
 80064b4:	2a00      	cmp	r2, #0
 80064b6:	d0f9      	beq.n	80064ac <_strtol_l.constprop.0+0xd4>
 80064b8:	f1bc 0f00 	cmp.w	ip, #0
 80064bc:	d000      	beq.n	80064c0 <_strtol_l.constprop.0+0xe8>
 80064be:	1e69      	subs	r1, r5, #1
 80064c0:	6011      	str	r1, [r2, #0]
 80064c2:	e7f3      	b.n	80064ac <_strtol_l.constprop.0+0xd4>
 80064c4:	2430      	movs	r4, #48	; 0x30
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1b1      	bne.n	800642e <_strtol_l.constprop.0+0x56>
 80064ca:	2308      	movs	r3, #8
 80064cc:	e7af      	b.n	800642e <_strtol_l.constprop.0+0x56>
 80064ce:	2c30      	cmp	r4, #48	; 0x30
 80064d0:	d0a5      	beq.n	800641e <_strtol_l.constprop.0+0x46>
 80064d2:	230a      	movs	r3, #10
 80064d4:	e7ab      	b.n	800642e <_strtol_l.constprop.0+0x56>
 80064d6:	bf00      	nop
 80064d8:	08007cd1 	.word	0x08007cd1

080064dc <strtol>:
 80064dc:	4613      	mov	r3, r2
 80064de:	460a      	mov	r2, r1
 80064e0:	4601      	mov	r1, r0
 80064e2:	4802      	ldr	r0, [pc, #8]	; (80064ec <strtol+0x10>)
 80064e4:	6800      	ldr	r0, [r0, #0]
 80064e6:	f7ff bf77 	b.w	80063d8 <_strtol_l.constprop.0>
 80064ea:	bf00      	nop
 80064ec:	2000000c 	.word	0x2000000c

080064f0 <__assert_func>:
 80064f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80064f2:	4614      	mov	r4, r2
 80064f4:	461a      	mov	r2, r3
 80064f6:	4b09      	ldr	r3, [pc, #36]	; (800651c <__assert_func+0x2c>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4605      	mov	r5, r0
 80064fc:	68d8      	ldr	r0, [r3, #12]
 80064fe:	b14c      	cbz	r4, 8006514 <__assert_func+0x24>
 8006500:	4b07      	ldr	r3, [pc, #28]	; (8006520 <__assert_func+0x30>)
 8006502:	9100      	str	r1, [sp, #0]
 8006504:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006508:	4906      	ldr	r1, [pc, #24]	; (8006524 <__assert_func+0x34>)
 800650a:	462b      	mov	r3, r5
 800650c:	f000 f80e 	bl	800652c <fiprintf>
 8006510:	f000 fe20 	bl	8007154 <abort>
 8006514:	4b04      	ldr	r3, [pc, #16]	; (8006528 <__assert_func+0x38>)
 8006516:	461c      	mov	r4, r3
 8006518:	e7f3      	b.n	8006502 <__assert_func+0x12>
 800651a:	bf00      	nop
 800651c:	2000000c 	.word	0x2000000c
 8006520:	08007c94 	.word	0x08007c94
 8006524:	08007ca1 	.word	0x08007ca1
 8006528:	08007ccf 	.word	0x08007ccf

0800652c <fiprintf>:
 800652c:	b40e      	push	{r1, r2, r3}
 800652e:	b503      	push	{r0, r1, lr}
 8006530:	4601      	mov	r1, r0
 8006532:	ab03      	add	r3, sp, #12
 8006534:	4805      	ldr	r0, [pc, #20]	; (800654c <fiprintf+0x20>)
 8006536:	f853 2b04 	ldr.w	r2, [r3], #4
 800653a:	6800      	ldr	r0, [r0, #0]
 800653c:	9301      	str	r3, [sp, #4]
 800653e:	f000 fa75 	bl	8006a2c <_vfiprintf_r>
 8006542:	b002      	add	sp, #8
 8006544:	f85d eb04 	ldr.w	lr, [sp], #4
 8006548:	b003      	add	sp, #12
 800654a:	4770      	bx	lr
 800654c:	2000000c 	.word	0x2000000c

08006550 <malloc>:
 8006550:	4b02      	ldr	r3, [pc, #8]	; (800655c <malloc+0xc>)
 8006552:	4601      	mov	r1, r0
 8006554:	6818      	ldr	r0, [r3, #0]
 8006556:	f000 b86f 	b.w	8006638 <_malloc_r>
 800655a:	bf00      	nop
 800655c:	2000000c 	.word	0x2000000c

08006560 <_free_r>:
 8006560:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006562:	2900      	cmp	r1, #0
 8006564:	d044      	beq.n	80065f0 <_free_r+0x90>
 8006566:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800656a:	9001      	str	r0, [sp, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	f1a1 0404 	sub.w	r4, r1, #4
 8006572:	bfb8      	it	lt
 8006574:	18e4      	addlt	r4, r4, r3
 8006576:	f001 f83d 	bl	80075f4 <__malloc_lock>
 800657a:	4a1e      	ldr	r2, [pc, #120]	; (80065f4 <_free_r+0x94>)
 800657c:	9801      	ldr	r0, [sp, #4]
 800657e:	6813      	ldr	r3, [r2, #0]
 8006580:	b933      	cbnz	r3, 8006590 <_free_r+0x30>
 8006582:	6063      	str	r3, [r4, #4]
 8006584:	6014      	str	r4, [r2, #0]
 8006586:	b003      	add	sp, #12
 8006588:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800658c:	f001 b838 	b.w	8007600 <__malloc_unlock>
 8006590:	42a3      	cmp	r3, r4
 8006592:	d908      	bls.n	80065a6 <_free_r+0x46>
 8006594:	6825      	ldr	r5, [r4, #0]
 8006596:	1961      	adds	r1, r4, r5
 8006598:	428b      	cmp	r3, r1
 800659a:	bf01      	itttt	eq
 800659c:	6819      	ldreq	r1, [r3, #0]
 800659e:	685b      	ldreq	r3, [r3, #4]
 80065a0:	1949      	addeq	r1, r1, r5
 80065a2:	6021      	streq	r1, [r4, #0]
 80065a4:	e7ed      	b.n	8006582 <_free_r+0x22>
 80065a6:	461a      	mov	r2, r3
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	b10b      	cbz	r3, 80065b0 <_free_r+0x50>
 80065ac:	42a3      	cmp	r3, r4
 80065ae:	d9fa      	bls.n	80065a6 <_free_r+0x46>
 80065b0:	6811      	ldr	r1, [r2, #0]
 80065b2:	1855      	adds	r5, r2, r1
 80065b4:	42a5      	cmp	r5, r4
 80065b6:	d10b      	bne.n	80065d0 <_free_r+0x70>
 80065b8:	6824      	ldr	r4, [r4, #0]
 80065ba:	4421      	add	r1, r4
 80065bc:	1854      	adds	r4, r2, r1
 80065be:	42a3      	cmp	r3, r4
 80065c0:	6011      	str	r1, [r2, #0]
 80065c2:	d1e0      	bne.n	8006586 <_free_r+0x26>
 80065c4:	681c      	ldr	r4, [r3, #0]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	6053      	str	r3, [r2, #4]
 80065ca:	4421      	add	r1, r4
 80065cc:	6011      	str	r1, [r2, #0]
 80065ce:	e7da      	b.n	8006586 <_free_r+0x26>
 80065d0:	d902      	bls.n	80065d8 <_free_r+0x78>
 80065d2:	230c      	movs	r3, #12
 80065d4:	6003      	str	r3, [r0, #0]
 80065d6:	e7d6      	b.n	8006586 <_free_r+0x26>
 80065d8:	6825      	ldr	r5, [r4, #0]
 80065da:	1961      	adds	r1, r4, r5
 80065dc:	428b      	cmp	r3, r1
 80065de:	bf04      	itt	eq
 80065e0:	6819      	ldreq	r1, [r3, #0]
 80065e2:	685b      	ldreq	r3, [r3, #4]
 80065e4:	6063      	str	r3, [r4, #4]
 80065e6:	bf04      	itt	eq
 80065e8:	1949      	addeq	r1, r1, r5
 80065ea:	6021      	streq	r1, [r4, #0]
 80065ec:	6054      	str	r4, [r2, #4]
 80065ee:	e7ca      	b.n	8006586 <_free_r+0x26>
 80065f0:	b003      	add	sp, #12
 80065f2:	bd30      	pop	{r4, r5, pc}
 80065f4:	20000274 	.word	0x20000274

080065f8 <sbrk_aligned>:
 80065f8:	b570      	push	{r4, r5, r6, lr}
 80065fa:	4e0e      	ldr	r6, [pc, #56]	; (8006634 <sbrk_aligned+0x3c>)
 80065fc:	460c      	mov	r4, r1
 80065fe:	6831      	ldr	r1, [r6, #0]
 8006600:	4605      	mov	r5, r0
 8006602:	b911      	cbnz	r1, 800660a <sbrk_aligned+0x12>
 8006604:	f000 fcd6 	bl	8006fb4 <_sbrk_r>
 8006608:	6030      	str	r0, [r6, #0]
 800660a:	4621      	mov	r1, r4
 800660c:	4628      	mov	r0, r5
 800660e:	f000 fcd1 	bl	8006fb4 <_sbrk_r>
 8006612:	1c43      	adds	r3, r0, #1
 8006614:	d00a      	beq.n	800662c <sbrk_aligned+0x34>
 8006616:	1cc4      	adds	r4, r0, #3
 8006618:	f024 0403 	bic.w	r4, r4, #3
 800661c:	42a0      	cmp	r0, r4
 800661e:	d007      	beq.n	8006630 <sbrk_aligned+0x38>
 8006620:	1a21      	subs	r1, r4, r0
 8006622:	4628      	mov	r0, r5
 8006624:	f000 fcc6 	bl	8006fb4 <_sbrk_r>
 8006628:	3001      	adds	r0, #1
 800662a:	d101      	bne.n	8006630 <sbrk_aligned+0x38>
 800662c:	f04f 34ff 	mov.w	r4, #4294967295
 8006630:	4620      	mov	r0, r4
 8006632:	bd70      	pop	{r4, r5, r6, pc}
 8006634:	20000278 	.word	0x20000278

08006638 <_malloc_r>:
 8006638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800663c:	1ccd      	adds	r5, r1, #3
 800663e:	f025 0503 	bic.w	r5, r5, #3
 8006642:	3508      	adds	r5, #8
 8006644:	2d0c      	cmp	r5, #12
 8006646:	bf38      	it	cc
 8006648:	250c      	movcc	r5, #12
 800664a:	2d00      	cmp	r5, #0
 800664c:	4607      	mov	r7, r0
 800664e:	db01      	blt.n	8006654 <_malloc_r+0x1c>
 8006650:	42a9      	cmp	r1, r5
 8006652:	d905      	bls.n	8006660 <_malloc_r+0x28>
 8006654:	230c      	movs	r3, #12
 8006656:	603b      	str	r3, [r7, #0]
 8006658:	2600      	movs	r6, #0
 800665a:	4630      	mov	r0, r6
 800665c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006660:	4e2e      	ldr	r6, [pc, #184]	; (800671c <_malloc_r+0xe4>)
 8006662:	f000 ffc7 	bl	80075f4 <__malloc_lock>
 8006666:	6833      	ldr	r3, [r6, #0]
 8006668:	461c      	mov	r4, r3
 800666a:	bb34      	cbnz	r4, 80066ba <_malloc_r+0x82>
 800666c:	4629      	mov	r1, r5
 800666e:	4638      	mov	r0, r7
 8006670:	f7ff ffc2 	bl	80065f8 <sbrk_aligned>
 8006674:	1c43      	adds	r3, r0, #1
 8006676:	4604      	mov	r4, r0
 8006678:	d14d      	bne.n	8006716 <_malloc_r+0xde>
 800667a:	6834      	ldr	r4, [r6, #0]
 800667c:	4626      	mov	r6, r4
 800667e:	2e00      	cmp	r6, #0
 8006680:	d140      	bne.n	8006704 <_malloc_r+0xcc>
 8006682:	6823      	ldr	r3, [r4, #0]
 8006684:	4631      	mov	r1, r6
 8006686:	4638      	mov	r0, r7
 8006688:	eb04 0803 	add.w	r8, r4, r3
 800668c:	f000 fc92 	bl	8006fb4 <_sbrk_r>
 8006690:	4580      	cmp	r8, r0
 8006692:	d13a      	bne.n	800670a <_malloc_r+0xd2>
 8006694:	6821      	ldr	r1, [r4, #0]
 8006696:	3503      	adds	r5, #3
 8006698:	1a6d      	subs	r5, r5, r1
 800669a:	f025 0503 	bic.w	r5, r5, #3
 800669e:	3508      	adds	r5, #8
 80066a0:	2d0c      	cmp	r5, #12
 80066a2:	bf38      	it	cc
 80066a4:	250c      	movcc	r5, #12
 80066a6:	4629      	mov	r1, r5
 80066a8:	4638      	mov	r0, r7
 80066aa:	f7ff ffa5 	bl	80065f8 <sbrk_aligned>
 80066ae:	3001      	adds	r0, #1
 80066b0:	d02b      	beq.n	800670a <_malloc_r+0xd2>
 80066b2:	6823      	ldr	r3, [r4, #0]
 80066b4:	442b      	add	r3, r5
 80066b6:	6023      	str	r3, [r4, #0]
 80066b8:	e00e      	b.n	80066d8 <_malloc_r+0xa0>
 80066ba:	6822      	ldr	r2, [r4, #0]
 80066bc:	1b52      	subs	r2, r2, r5
 80066be:	d41e      	bmi.n	80066fe <_malloc_r+0xc6>
 80066c0:	2a0b      	cmp	r2, #11
 80066c2:	d916      	bls.n	80066f2 <_malloc_r+0xba>
 80066c4:	1961      	adds	r1, r4, r5
 80066c6:	42a3      	cmp	r3, r4
 80066c8:	6025      	str	r5, [r4, #0]
 80066ca:	bf18      	it	ne
 80066cc:	6059      	strne	r1, [r3, #4]
 80066ce:	6863      	ldr	r3, [r4, #4]
 80066d0:	bf08      	it	eq
 80066d2:	6031      	streq	r1, [r6, #0]
 80066d4:	5162      	str	r2, [r4, r5]
 80066d6:	604b      	str	r3, [r1, #4]
 80066d8:	4638      	mov	r0, r7
 80066da:	f104 060b 	add.w	r6, r4, #11
 80066de:	f000 ff8f 	bl	8007600 <__malloc_unlock>
 80066e2:	f026 0607 	bic.w	r6, r6, #7
 80066e6:	1d23      	adds	r3, r4, #4
 80066e8:	1af2      	subs	r2, r6, r3
 80066ea:	d0b6      	beq.n	800665a <_malloc_r+0x22>
 80066ec:	1b9b      	subs	r3, r3, r6
 80066ee:	50a3      	str	r3, [r4, r2]
 80066f0:	e7b3      	b.n	800665a <_malloc_r+0x22>
 80066f2:	6862      	ldr	r2, [r4, #4]
 80066f4:	42a3      	cmp	r3, r4
 80066f6:	bf0c      	ite	eq
 80066f8:	6032      	streq	r2, [r6, #0]
 80066fa:	605a      	strne	r2, [r3, #4]
 80066fc:	e7ec      	b.n	80066d8 <_malloc_r+0xa0>
 80066fe:	4623      	mov	r3, r4
 8006700:	6864      	ldr	r4, [r4, #4]
 8006702:	e7b2      	b.n	800666a <_malloc_r+0x32>
 8006704:	4634      	mov	r4, r6
 8006706:	6876      	ldr	r6, [r6, #4]
 8006708:	e7b9      	b.n	800667e <_malloc_r+0x46>
 800670a:	230c      	movs	r3, #12
 800670c:	603b      	str	r3, [r7, #0]
 800670e:	4638      	mov	r0, r7
 8006710:	f000 ff76 	bl	8007600 <__malloc_unlock>
 8006714:	e7a1      	b.n	800665a <_malloc_r+0x22>
 8006716:	6025      	str	r5, [r4, #0]
 8006718:	e7de      	b.n	80066d8 <_malloc_r+0xa0>
 800671a:	bf00      	nop
 800671c:	20000274 	.word	0x20000274

08006720 <__ssputs_r>:
 8006720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006724:	688e      	ldr	r6, [r1, #8]
 8006726:	429e      	cmp	r6, r3
 8006728:	4682      	mov	sl, r0
 800672a:	460c      	mov	r4, r1
 800672c:	4690      	mov	r8, r2
 800672e:	461f      	mov	r7, r3
 8006730:	d838      	bhi.n	80067a4 <__ssputs_r+0x84>
 8006732:	898a      	ldrh	r2, [r1, #12]
 8006734:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006738:	d032      	beq.n	80067a0 <__ssputs_r+0x80>
 800673a:	6825      	ldr	r5, [r4, #0]
 800673c:	6909      	ldr	r1, [r1, #16]
 800673e:	eba5 0901 	sub.w	r9, r5, r1
 8006742:	6965      	ldr	r5, [r4, #20]
 8006744:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006748:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800674c:	3301      	adds	r3, #1
 800674e:	444b      	add	r3, r9
 8006750:	106d      	asrs	r5, r5, #1
 8006752:	429d      	cmp	r5, r3
 8006754:	bf38      	it	cc
 8006756:	461d      	movcc	r5, r3
 8006758:	0553      	lsls	r3, r2, #21
 800675a:	d531      	bpl.n	80067c0 <__ssputs_r+0xa0>
 800675c:	4629      	mov	r1, r5
 800675e:	f7ff ff6b 	bl	8006638 <_malloc_r>
 8006762:	4606      	mov	r6, r0
 8006764:	b950      	cbnz	r0, 800677c <__ssputs_r+0x5c>
 8006766:	230c      	movs	r3, #12
 8006768:	f8ca 3000 	str.w	r3, [sl]
 800676c:	89a3      	ldrh	r3, [r4, #12]
 800676e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006772:	81a3      	strh	r3, [r4, #12]
 8006774:	f04f 30ff 	mov.w	r0, #4294967295
 8006778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800677c:	6921      	ldr	r1, [r4, #16]
 800677e:	464a      	mov	r2, r9
 8006780:	f000 ff10 	bl	80075a4 <memcpy>
 8006784:	89a3      	ldrh	r3, [r4, #12]
 8006786:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800678a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800678e:	81a3      	strh	r3, [r4, #12]
 8006790:	6126      	str	r6, [r4, #16]
 8006792:	6165      	str	r5, [r4, #20]
 8006794:	444e      	add	r6, r9
 8006796:	eba5 0509 	sub.w	r5, r5, r9
 800679a:	6026      	str	r6, [r4, #0]
 800679c:	60a5      	str	r5, [r4, #8]
 800679e:	463e      	mov	r6, r7
 80067a0:	42be      	cmp	r6, r7
 80067a2:	d900      	bls.n	80067a6 <__ssputs_r+0x86>
 80067a4:	463e      	mov	r6, r7
 80067a6:	6820      	ldr	r0, [r4, #0]
 80067a8:	4632      	mov	r2, r6
 80067aa:	4641      	mov	r1, r8
 80067ac:	f000 ff08 	bl	80075c0 <memmove>
 80067b0:	68a3      	ldr	r3, [r4, #8]
 80067b2:	1b9b      	subs	r3, r3, r6
 80067b4:	60a3      	str	r3, [r4, #8]
 80067b6:	6823      	ldr	r3, [r4, #0]
 80067b8:	4433      	add	r3, r6
 80067ba:	6023      	str	r3, [r4, #0]
 80067bc:	2000      	movs	r0, #0
 80067be:	e7db      	b.n	8006778 <__ssputs_r+0x58>
 80067c0:	462a      	mov	r2, r5
 80067c2:	f000 ff23 	bl	800760c <_realloc_r>
 80067c6:	4606      	mov	r6, r0
 80067c8:	2800      	cmp	r0, #0
 80067ca:	d1e1      	bne.n	8006790 <__ssputs_r+0x70>
 80067cc:	6921      	ldr	r1, [r4, #16]
 80067ce:	4650      	mov	r0, sl
 80067d0:	f7ff fec6 	bl	8006560 <_free_r>
 80067d4:	e7c7      	b.n	8006766 <__ssputs_r+0x46>
	...

080067d8 <_svfiprintf_r>:
 80067d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067dc:	4698      	mov	r8, r3
 80067de:	898b      	ldrh	r3, [r1, #12]
 80067e0:	061b      	lsls	r3, r3, #24
 80067e2:	b09d      	sub	sp, #116	; 0x74
 80067e4:	4607      	mov	r7, r0
 80067e6:	460d      	mov	r5, r1
 80067e8:	4614      	mov	r4, r2
 80067ea:	d50e      	bpl.n	800680a <_svfiprintf_r+0x32>
 80067ec:	690b      	ldr	r3, [r1, #16]
 80067ee:	b963      	cbnz	r3, 800680a <_svfiprintf_r+0x32>
 80067f0:	2140      	movs	r1, #64	; 0x40
 80067f2:	f7ff ff21 	bl	8006638 <_malloc_r>
 80067f6:	6028      	str	r0, [r5, #0]
 80067f8:	6128      	str	r0, [r5, #16]
 80067fa:	b920      	cbnz	r0, 8006806 <_svfiprintf_r+0x2e>
 80067fc:	230c      	movs	r3, #12
 80067fe:	603b      	str	r3, [r7, #0]
 8006800:	f04f 30ff 	mov.w	r0, #4294967295
 8006804:	e0d1      	b.n	80069aa <_svfiprintf_r+0x1d2>
 8006806:	2340      	movs	r3, #64	; 0x40
 8006808:	616b      	str	r3, [r5, #20]
 800680a:	2300      	movs	r3, #0
 800680c:	9309      	str	r3, [sp, #36]	; 0x24
 800680e:	2320      	movs	r3, #32
 8006810:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006814:	f8cd 800c 	str.w	r8, [sp, #12]
 8006818:	2330      	movs	r3, #48	; 0x30
 800681a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80069c4 <_svfiprintf_r+0x1ec>
 800681e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006822:	f04f 0901 	mov.w	r9, #1
 8006826:	4623      	mov	r3, r4
 8006828:	469a      	mov	sl, r3
 800682a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800682e:	b10a      	cbz	r2, 8006834 <_svfiprintf_r+0x5c>
 8006830:	2a25      	cmp	r2, #37	; 0x25
 8006832:	d1f9      	bne.n	8006828 <_svfiprintf_r+0x50>
 8006834:	ebba 0b04 	subs.w	fp, sl, r4
 8006838:	d00b      	beq.n	8006852 <_svfiprintf_r+0x7a>
 800683a:	465b      	mov	r3, fp
 800683c:	4622      	mov	r2, r4
 800683e:	4629      	mov	r1, r5
 8006840:	4638      	mov	r0, r7
 8006842:	f7ff ff6d 	bl	8006720 <__ssputs_r>
 8006846:	3001      	adds	r0, #1
 8006848:	f000 80aa 	beq.w	80069a0 <_svfiprintf_r+0x1c8>
 800684c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800684e:	445a      	add	r2, fp
 8006850:	9209      	str	r2, [sp, #36]	; 0x24
 8006852:	f89a 3000 	ldrb.w	r3, [sl]
 8006856:	2b00      	cmp	r3, #0
 8006858:	f000 80a2 	beq.w	80069a0 <_svfiprintf_r+0x1c8>
 800685c:	2300      	movs	r3, #0
 800685e:	f04f 32ff 	mov.w	r2, #4294967295
 8006862:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006866:	f10a 0a01 	add.w	sl, sl, #1
 800686a:	9304      	str	r3, [sp, #16]
 800686c:	9307      	str	r3, [sp, #28]
 800686e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006872:	931a      	str	r3, [sp, #104]	; 0x68
 8006874:	4654      	mov	r4, sl
 8006876:	2205      	movs	r2, #5
 8006878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800687c:	4851      	ldr	r0, [pc, #324]	; (80069c4 <_svfiprintf_r+0x1ec>)
 800687e:	f7f9 fcdf 	bl	8000240 <memchr>
 8006882:	9a04      	ldr	r2, [sp, #16]
 8006884:	b9d8      	cbnz	r0, 80068be <_svfiprintf_r+0xe6>
 8006886:	06d0      	lsls	r0, r2, #27
 8006888:	bf44      	itt	mi
 800688a:	2320      	movmi	r3, #32
 800688c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006890:	0711      	lsls	r1, r2, #28
 8006892:	bf44      	itt	mi
 8006894:	232b      	movmi	r3, #43	; 0x2b
 8006896:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800689a:	f89a 3000 	ldrb.w	r3, [sl]
 800689e:	2b2a      	cmp	r3, #42	; 0x2a
 80068a0:	d015      	beq.n	80068ce <_svfiprintf_r+0xf6>
 80068a2:	9a07      	ldr	r2, [sp, #28]
 80068a4:	4654      	mov	r4, sl
 80068a6:	2000      	movs	r0, #0
 80068a8:	f04f 0c0a 	mov.w	ip, #10
 80068ac:	4621      	mov	r1, r4
 80068ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068b2:	3b30      	subs	r3, #48	; 0x30
 80068b4:	2b09      	cmp	r3, #9
 80068b6:	d94e      	bls.n	8006956 <_svfiprintf_r+0x17e>
 80068b8:	b1b0      	cbz	r0, 80068e8 <_svfiprintf_r+0x110>
 80068ba:	9207      	str	r2, [sp, #28]
 80068bc:	e014      	b.n	80068e8 <_svfiprintf_r+0x110>
 80068be:	eba0 0308 	sub.w	r3, r0, r8
 80068c2:	fa09 f303 	lsl.w	r3, r9, r3
 80068c6:	4313      	orrs	r3, r2
 80068c8:	9304      	str	r3, [sp, #16]
 80068ca:	46a2      	mov	sl, r4
 80068cc:	e7d2      	b.n	8006874 <_svfiprintf_r+0x9c>
 80068ce:	9b03      	ldr	r3, [sp, #12]
 80068d0:	1d19      	adds	r1, r3, #4
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	9103      	str	r1, [sp, #12]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	bfbb      	ittet	lt
 80068da:	425b      	neglt	r3, r3
 80068dc:	f042 0202 	orrlt.w	r2, r2, #2
 80068e0:	9307      	strge	r3, [sp, #28]
 80068e2:	9307      	strlt	r3, [sp, #28]
 80068e4:	bfb8      	it	lt
 80068e6:	9204      	strlt	r2, [sp, #16]
 80068e8:	7823      	ldrb	r3, [r4, #0]
 80068ea:	2b2e      	cmp	r3, #46	; 0x2e
 80068ec:	d10c      	bne.n	8006908 <_svfiprintf_r+0x130>
 80068ee:	7863      	ldrb	r3, [r4, #1]
 80068f0:	2b2a      	cmp	r3, #42	; 0x2a
 80068f2:	d135      	bne.n	8006960 <_svfiprintf_r+0x188>
 80068f4:	9b03      	ldr	r3, [sp, #12]
 80068f6:	1d1a      	adds	r2, r3, #4
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	9203      	str	r2, [sp, #12]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	bfb8      	it	lt
 8006900:	f04f 33ff 	movlt.w	r3, #4294967295
 8006904:	3402      	adds	r4, #2
 8006906:	9305      	str	r3, [sp, #20]
 8006908:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80069d4 <_svfiprintf_r+0x1fc>
 800690c:	7821      	ldrb	r1, [r4, #0]
 800690e:	2203      	movs	r2, #3
 8006910:	4650      	mov	r0, sl
 8006912:	f7f9 fc95 	bl	8000240 <memchr>
 8006916:	b140      	cbz	r0, 800692a <_svfiprintf_r+0x152>
 8006918:	2340      	movs	r3, #64	; 0x40
 800691a:	eba0 000a 	sub.w	r0, r0, sl
 800691e:	fa03 f000 	lsl.w	r0, r3, r0
 8006922:	9b04      	ldr	r3, [sp, #16]
 8006924:	4303      	orrs	r3, r0
 8006926:	3401      	adds	r4, #1
 8006928:	9304      	str	r3, [sp, #16]
 800692a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800692e:	4826      	ldr	r0, [pc, #152]	; (80069c8 <_svfiprintf_r+0x1f0>)
 8006930:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006934:	2206      	movs	r2, #6
 8006936:	f7f9 fc83 	bl	8000240 <memchr>
 800693a:	2800      	cmp	r0, #0
 800693c:	d038      	beq.n	80069b0 <_svfiprintf_r+0x1d8>
 800693e:	4b23      	ldr	r3, [pc, #140]	; (80069cc <_svfiprintf_r+0x1f4>)
 8006940:	bb1b      	cbnz	r3, 800698a <_svfiprintf_r+0x1b2>
 8006942:	9b03      	ldr	r3, [sp, #12]
 8006944:	3307      	adds	r3, #7
 8006946:	f023 0307 	bic.w	r3, r3, #7
 800694a:	3308      	adds	r3, #8
 800694c:	9303      	str	r3, [sp, #12]
 800694e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006950:	4433      	add	r3, r6
 8006952:	9309      	str	r3, [sp, #36]	; 0x24
 8006954:	e767      	b.n	8006826 <_svfiprintf_r+0x4e>
 8006956:	fb0c 3202 	mla	r2, ip, r2, r3
 800695a:	460c      	mov	r4, r1
 800695c:	2001      	movs	r0, #1
 800695e:	e7a5      	b.n	80068ac <_svfiprintf_r+0xd4>
 8006960:	2300      	movs	r3, #0
 8006962:	3401      	adds	r4, #1
 8006964:	9305      	str	r3, [sp, #20]
 8006966:	4619      	mov	r1, r3
 8006968:	f04f 0c0a 	mov.w	ip, #10
 800696c:	4620      	mov	r0, r4
 800696e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006972:	3a30      	subs	r2, #48	; 0x30
 8006974:	2a09      	cmp	r2, #9
 8006976:	d903      	bls.n	8006980 <_svfiprintf_r+0x1a8>
 8006978:	2b00      	cmp	r3, #0
 800697a:	d0c5      	beq.n	8006908 <_svfiprintf_r+0x130>
 800697c:	9105      	str	r1, [sp, #20]
 800697e:	e7c3      	b.n	8006908 <_svfiprintf_r+0x130>
 8006980:	fb0c 2101 	mla	r1, ip, r1, r2
 8006984:	4604      	mov	r4, r0
 8006986:	2301      	movs	r3, #1
 8006988:	e7f0      	b.n	800696c <_svfiprintf_r+0x194>
 800698a:	ab03      	add	r3, sp, #12
 800698c:	9300      	str	r3, [sp, #0]
 800698e:	462a      	mov	r2, r5
 8006990:	4b0f      	ldr	r3, [pc, #60]	; (80069d0 <_svfiprintf_r+0x1f8>)
 8006992:	a904      	add	r1, sp, #16
 8006994:	4638      	mov	r0, r7
 8006996:	f3af 8000 	nop.w
 800699a:	1c42      	adds	r2, r0, #1
 800699c:	4606      	mov	r6, r0
 800699e:	d1d6      	bne.n	800694e <_svfiprintf_r+0x176>
 80069a0:	89ab      	ldrh	r3, [r5, #12]
 80069a2:	065b      	lsls	r3, r3, #25
 80069a4:	f53f af2c 	bmi.w	8006800 <_svfiprintf_r+0x28>
 80069a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069aa:	b01d      	add	sp, #116	; 0x74
 80069ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069b0:	ab03      	add	r3, sp, #12
 80069b2:	9300      	str	r3, [sp, #0]
 80069b4:	462a      	mov	r2, r5
 80069b6:	4b06      	ldr	r3, [pc, #24]	; (80069d0 <_svfiprintf_r+0x1f8>)
 80069b8:	a904      	add	r1, sp, #16
 80069ba:	4638      	mov	r0, r7
 80069bc:	f000 f9d4 	bl	8006d68 <_printf_i>
 80069c0:	e7eb      	b.n	800699a <_svfiprintf_r+0x1c2>
 80069c2:	bf00      	nop
 80069c4:	08007dd1 	.word	0x08007dd1
 80069c8:	08007ddb 	.word	0x08007ddb
 80069cc:	00000000 	.word	0x00000000
 80069d0:	08006721 	.word	0x08006721
 80069d4:	08007dd7 	.word	0x08007dd7

080069d8 <__sfputc_r>:
 80069d8:	6893      	ldr	r3, [r2, #8]
 80069da:	3b01      	subs	r3, #1
 80069dc:	2b00      	cmp	r3, #0
 80069de:	b410      	push	{r4}
 80069e0:	6093      	str	r3, [r2, #8]
 80069e2:	da08      	bge.n	80069f6 <__sfputc_r+0x1e>
 80069e4:	6994      	ldr	r4, [r2, #24]
 80069e6:	42a3      	cmp	r3, r4
 80069e8:	db01      	blt.n	80069ee <__sfputc_r+0x16>
 80069ea:	290a      	cmp	r1, #10
 80069ec:	d103      	bne.n	80069f6 <__sfputc_r+0x1e>
 80069ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069f2:	f000 baef 	b.w	8006fd4 <__swbuf_r>
 80069f6:	6813      	ldr	r3, [r2, #0]
 80069f8:	1c58      	adds	r0, r3, #1
 80069fa:	6010      	str	r0, [r2, #0]
 80069fc:	7019      	strb	r1, [r3, #0]
 80069fe:	4608      	mov	r0, r1
 8006a00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a04:	4770      	bx	lr

08006a06 <__sfputs_r>:
 8006a06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a08:	4606      	mov	r6, r0
 8006a0a:	460f      	mov	r7, r1
 8006a0c:	4614      	mov	r4, r2
 8006a0e:	18d5      	adds	r5, r2, r3
 8006a10:	42ac      	cmp	r4, r5
 8006a12:	d101      	bne.n	8006a18 <__sfputs_r+0x12>
 8006a14:	2000      	movs	r0, #0
 8006a16:	e007      	b.n	8006a28 <__sfputs_r+0x22>
 8006a18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a1c:	463a      	mov	r2, r7
 8006a1e:	4630      	mov	r0, r6
 8006a20:	f7ff ffda 	bl	80069d8 <__sfputc_r>
 8006a24:	1c43      	adds	r3, r0, #1
 8006a26:	d1f3      	bne.n	8006a10 <__sfputs_r+0xa>
 8006a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006a2c <_vfiprintf_r>:
 8006a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a30:	460d      	mov	r5, r1
 8006a32:	b09d      	sub	sp, #116	; 0x74
 8006a34:	4614      	mov	r4, r2
 8006a36:	4698      	mov	r8, r3
 8006a38:	4606      	mov	r6, r0
 8006a3a:	b118      	cbz	r0, 8006a44 <_vfiprintf_r+0x18>
 8006a3c:	6983      	ldr	r3, [r0, #24]
 8006a3e:	b90b      	cbnz	r3, 8006a44 <_vfiprintf_r+0x18>
 8006a40:	f000 fcaa 	bl	8007398 <__sinit>
 8006a44:	4b89      	ldr	r3, [pc, #548]	; (8006c6c <_vfiprintf_r+0x240>)
 8006a46:	429d      	cmp	r5, r3
 8006a48:	d11b      	bne.n	8006a82 <_vfiprintf_r+0x56>
 8006a4a:	6875      	ldr	r5, [r6, #4]
 8006a4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a4e:	07d9      	lsls	r1, r3, #31
 8006a50:	d405      	bmi.n	8006a5e <_vfiprintf_r+0x32>
 8006a52:	89ab      	ldrh	r3, [r5, #12]
 8006a54:	059a      	lsls	r2, r3, #22
 8006a56:	d402      	bmi.n	8006a5e <_vfiprintf_r+0x32>
 8006a58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a5a:	f000 fd3b 	bl	80074d4 <__retarget_lock_acquire_recursive>
 8006a5e:	89ab      	ldrh	r3, [r5, #12]
 8006a60:	071b      	lsls	r3, r3, #28
 8006a62:	d501      	bpl.n	8006a68 <_vfiprintf_r+0x3c>
 8006a64:	692b      	ldr	r3, [r5, #16]
 8006a66:	b9eb      	cbnz	r3, 8006aa4 <_vfiprintf_r+0x78>
 8006a68:	4629      	mov	r1, r5
 8006a6a:	4630      	mov	r0, r6
 8006a6c:	f000 fb04 	bl	8007078 <__swsetup_r>
 8006a70:	b1c0      	cbz	r0, 8006aa4 <_vfiprintf_r+0x78>
 8006a72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a74:	07dc      	lsls	r4, r3, #31
 8006a76:	d50e      	bpl.n	8006a96 <_vfiprintf_r+0x6a>
 8006a78:	f04f 30ff 	mov.w	r0, #4294967295
 8006a7c:	b01d      	add	sp, #116	; 0x74
 8006a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a82:	4b7b      	ldr	r3, [pc, #492]	; (8006c70 <_vfiprintf_r+0x244>)
 8006a84:	429d      	cmp	r5, r3
 8006a86:	d101      	bne.n	8006a8c <_vfiprintf_r+0x60>
 8006a88:	68b5      	ldr	r5, [r6, #8]
 8006a8a:	e7df      	b.n	8006a4c <_vfiprintf_r+0x20>
 8006a8c:	4b79      	ldr	r3, [pc, #484]	; (8006c74 <_vfiprintf_r+0x248>)
 8006a8e:	429d      	cmp	r5, r3
 8006a90:	bf08      	it	eq
 8006a92:	68f5      	ldreq	r5, [r6, #12]
 8006a94:	e7da      	b.n	8006a4c <_vfiprintf_r+0x20>
 8006a96:	89ab      	ldrh	r3, [r5, #12]
 8006a98:	0598      	lsls	r0, r3, #22
 8006a9a:	d4ed      	bmi.n	8006a78 <_vfiprintf_r+0x4c>
 8006a9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a9e:	f000 fd1a 	bl	80074d6 <__retarget_lock_release_recursive>
 8006aa2:	e7e9      	b.n	8006a78 <_vfiprintf_r+0x4c>
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	9309      	str	r3, [sp, #36]	; 0x24
 8006aa8:	2320      	movs	r3, #32
 8006aaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006aae:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ab2:	2330      	movs	r3, #48	; 0x30
 8006ab4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006c78 <_vfiprintf_r+0x24c>
 8006ab8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006abc:	f04f 0901 	mov.w	r9, #1
 8006ac0:	4623      	mov	r3, r4
 8006ac2:	469a      	mov	sl, r3
 8006ac4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ac8:	b10a      	cbz	r2, 8006ace <_vfiprintf_r+0xa2>
 8006aca:	2a25      	cmp	r2, #37	; 0x25
 8006acc:	d1f9      	bne.n	8006ac2 <_vfiprintf_r+0x96>
 8006ace:	ebba 0b04 	subs.w	fp, sl, r4
 8006ad2:	d00b      	beq.n	8006aec <_vfiprintf_r+0xc0>
 8006ad4:	465b      	mov	r3, fp
 8006ad6:	4622      	mov	r2, r4
 8006ad8:	4629      	mov	r1, r5
 8006ada:	4630      	mov	r0, r6
 8006adc:	f7ff ff93 	bl	8006a06 <__sfputs_r>
 8006ae0:	3001      	adds	r0, #1
 8006ae2:	f000 80aa 	beq.w	8006c3a <_vfiprintf_r+0x20e>
 8006ae6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ae8:	445a      	add	r2, fp
 8006aea:	9209      	str	r2, [sp, #36]	; 0x24
 8006aec:	f89a 3000 	ldrb.w	r3, [sl]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f000 80a2 	beq.w	8006c3a <_vfiprintf_r+0x20e>
 8006af6:	2300      	movs	r3, #0
 8006af8:	f04f 32ff 	mov.w	r2, #4294967295
 8006afc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b00:	f10a 0a01 	add.w	sl, sl, #1
 8006b04:	9304      	str	r3, [sp, #16]
 8006b06:	9307      	str	r3, [sp, #28]
 8006b08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b0c:	931a      	str	r3, [sp, #104]	; 0x68
 8006b0e:	4654      	mov	r4, sl
 8006b10:	2205      	movs	r2, #5
 8006b12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b16:	4858      	ldr	r0, [pc, #352]	; (8006c78 <_vfiprintf_r+0x24c>)
 8006b18:	f7f9 fb92 	bl	8000240 <memchr>
 8006b1c:	9a04      	ldr	r2, [sp, #16]
 8006b1e:	b9d8      	cbnz	r0, 8006b58 <_vfiprintf_r+0x12c>
 8006b20:	06d1      	lsls	r1, r2, #27
 8006b22:	bf44      	itt	mi
 8006b24:	2320      	movmi	r3, #32
 8006b26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b2a:	0713      	lsls	r3, r2, #28
 8006b2c:	bf44      	itt	mi
 8006b2e:	232b      	movmi	r3, #43	; 0x2b
 8006b30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b34:	f89a 3000 	ldrb.w	r3, [sl]
 8006b38:	2b2a      	cmp	r3, #42	; 0x2a
 8006b3a:	d015      	beq.n	8006b68 <_vfiprintf_r+0x13c>
 8006b3c:	9a07      	ldr	r2, [sp, #28]
 8006b3e:	4654      	mov	r4, sl
 8006b40:	2000      	movs	r0, #0
 8006b42:	f04f 0c0a 	mov.w	ip, #10
 8006b46:	4621      	mov	r1, r4
 8006b48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b4c:	3b30      	subs	r3, #48	; 0x30
 8006b4e:	2b09      	cmp	r3, #9
 8006b50:	d94e      	bls.n	8006bf0 <_vfiprintf_r+0x1c4>
 8006b52:	b1b0      	cbz	r0, 8006b82 <_vfiprintf_r+0x156>
 8006b54:	9207      	str	r2, [sp, #28]
 8006b56:	e014      	b.n	8006b82 <_vfiprintf_r+0x156>
 8006b58:	eba0 0308 	sub.w	r3, r0, r8
 8006b5c:	fa09 f303 	lsl.w	r3, r9, r3
 8006b60:	4313      	orrs	r3, r2
 8006b62:	9304      	str	r3, [sp, #16]
 8006b64:	46a2      	mov	sl, r4
 8006b66:	e7d2      	b.n	8006b0e <_vfiprintf_r+0xe2>
 8006b68:	9b03      	ldr	r3, [sp, #12]
 8006b6a:	1d19      	adds	r1, r3, #4
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	9103      	str	r1, [sp, #12]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	bfbb      	ittet	lt
 8006b74:	425b      	neglt	r3, r3
 8006b76:	f042 0202 	orrlt.w	r2, r2, #2
 8006b7a:	9307      	strge	r3, [sp, #28]
 8006b7c:	9307      	strlt	r3, [sp, #28]
 8006b7e:	bfb8      	it	lt
 8006b80:	9204      	strlt	r2, [sp, #16]
 8006b82:	7823      	ldrb	r3, [r4, #0]
 8006b84:	2b2e      	cmp	r3, #46	; 0x2e
 8006b86:	d10c      	bne.n	8006ba2 <_vfiprintf_r+0x176>
 8006b88:	7863      	ldrb	r3, [r4, #1]
 8006b8a:	2b2a      	cmp	r3, #42	; 0x2a
 8006b8c:	d135      	bne.n	8006bfa <_vfiprintf_r+0x1ce>
 8006b8e:	9b03      	ldr	r3, [sp, #12]
 8006b90:	1d1a      	adds	r2, r3, #4
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	9203      	str	r2, [sp, #12]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	bfb8      	it	lt
 8006b9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b9e:	3402      	adds	r4, #2
 8006ba0:	9305      	str	r3, [sp, #20]
 8006ba2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006c88 <_vfiprintf_r+0x25c>
 8006ba6:	7821      	ldrb	r1, [r4, #0]
 8006ba8:	2203      	movs	r2, #3
 8006baa:	4650      	mov	r0, sl
 8006bac:	f7f9 fb48 	bl	8000240 <memchr>
 8006bb0:	b140      	cbz	r0, 8006bc4 <_vfiprintf_r+0x198>
 8006bb2:	2340      	movs	r3, #64	; 0x40
 8006bb4:	eba0 000a 	sub.w	r0, r0, sl
 8006bb8:	fa03 f000 	lsl.w	r0, r3, r0
 8006bbc:	9b04      	ldr	r3, [sp, #16]
 8006bbe:	4303      	orrs	r3, r0
 8006bc0:	3401      	adds	r4, #1
 8006bc2:	9304      	str	r3, [sp, #16]
 8006bc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bc8:	482c      	ldr	r0, [pc, #176]	; (8006c7c <_vfiprintf_r+0x250>)
 8006bca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006bce:	2206      	movs	r2, #6
 8006bd0:	f7f9 fb36 	bl	8000240 <memchr>
 8006bd4:	2800      	cmp	r0, #0
 8006bd6:	d03f      	beq.n	8006c58 <_vfiprintf_r+0x22c>
 8006bd8:	4b29      	ldr	r3, [pc, #164]	; (8006c80 <_vfiprintf_r+0x254>)
 8006bda:	bb1b      	cbnz	r3, 8006c24 <_vfiprintf_r+0x1f8>
 8006bdc:	9b03      	ldr	r3, [sp, #12]
 8006bde:	3307      	adds	r3, #7
 8006be0:	f023 0307 	bic.w	r3, r3, #7
 8006be4:	3308      	adds	r3, #8
 8006be6:	9303      	str	r3, [sp, #12]
 8006be8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bea:	443b      	add	r3, r7
 8006bec:	9309      	str	r3, [sp, #36]	; 0x24
 8006bee:	e767      	b.n	8006ac0 <_vfiprintf_r+0x94>
 8006bf0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006bf4:	460c      	mov	r4, r1
 8006bf6:	2001      	movs	r0, #1
 8006bf8:	e7a5      	b.n	8006b46 <_vfiprintf_r+0x11a>
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	3401      	adds	r4, #1
 8006bfe:	9305      	str	r3, [sp, #20]
 8006c00:	4619      	mov	r1, r3
 8006c02:	f04f 0c0a 	mov.w	ip, #10
 8006c06:	4620      	mov	r0, r4
 8006c08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c0c:	3a30      	subs	r2, #48	; 0x30
 8006c0e:	2a09      	cmp	r2, #9
 8006c10:	d903      	bls.n	8006c1a <_vfiprintf_r+0x1ee>
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d0c5      	beq.n	8006ba2 <_vfiprintf_r+0x176>
 8006c16:	9105      	str	r1, [sp, #20]
 8006c18:	e7c3      	b.n	8006ba2 <_vfiprintf_r+0x176>
 8006c1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c1e:	4604      	mov	r4, r0
 8006c20:	2301      	movs	r3, #1
 8006c22:	e7f0      	b.n	8006c06 <_vfiprintf_r+0x1da>
 8006c24:	ab03      	add	r3, sp, #12
 8006c26:	9300      	str	r3, [sp, #0]
 8006c28:	462a      	mov	r2, r5
 8006c2a:	4b16      	ldr	r3, [pc, #88]	; (8006c84 <_vfiprintf_r+0x258>)
 8006c2c:	a904      	add	r1, sp, #16
 8006c2e:	4630      	mov	r0, r6
 8006c30:	f3af 8000 	nop.w
 8006c34:	4607      	mov	r7, r0
 8006c36:	1c78      	adds	r0, r7, #1
 8006c38:	d1d6      	bne.n	8006be8 <_vfiprintf_r+0x1bc>
 8006c3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c3c:	07d9      	lsls	r1, r3, #31
 8006c3e:	d405      	bmi.n	8006c4c <_vfiprintf_r+0x220>
 8006c40:	89ab      	ldrh	r3, [r5, #12]
 8006c42:	059a      	lsls	r2, r3, #22
 8006c44:	d402      	bmi.n	8006c4c <_vfiprintf_r+0x220>
 8006c46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c48:	f000 fc45 	bl	80074d6 <__retarget_lock_release_recursive>
 8006c4c:	89ab      	ldrh	r3, [r5, #12]
 8006c4e:	065b      	lsls	r3, r3, #25
 8006c50:	f53f af12 	bmi.w	8006a78 <_vfiprintf_r+0x4c>
 8006c54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c56:	e711      	b.n	8006a7c <_vfiprintf_r+0x50>
 8006c58:	ab03      	add	r3, sp, #12
 8006c5a:	9300      	str	r3, [sp, #0]
 8006c5c:	462a      	mov	r2, r5
 8006c5e:	4b09      	ldr	r3, [pc, #36]	; (8006c84 <_vfiprintf_r+0x258>)
 8006c60:	a904      	add	r1, sp, #16
 8006c62:	4630      	mov	r0, r6
 8006c64:	f000 f880 	bl	8006d68 <_printf_i>
 8006c68:	e7e4      	b.n	8006c34 <_vfiprintf_r+0x208>
 8006c6a:	bf00      	nop
 8006c6c:	08007e24 	.word	0x08007e24
 8006c70:	08007e44 	.word	0x08007e44
 8006c74:	08007e04 	.word	0x08007e04
 8006c78:	08007dd1 	.word	0x08007dd1
 8006c7c:	08007ddb 	.word	0x08007ddb
 8006c80:	00000000 	.word	0x00000000
 8006c84:	08006a07 	.word	0x08006a07
 8006c88:	08007dd7 	.word	0x08007dd7

08006c8c <_printf_common>:
 8006c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c90:	4616      	mov	r6, r2
 8006c92:	4699      	mov	r9, r3
 8006c94:	688a      	ldr	r2, [r1, #8]
 8006c96:	690b      	ldr	r3, [r1, #16]
 8006c98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	bfb8      	it	lt
 8006ca0:	4613      	movlt	r3, r2
 8006ca2:	6033      	str	r3, [r6, #0]
 8006ca4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ca8:	4607      	mov	r7, r0
 8006caa:	460c      	mov	r4, r1
 8006cac:	b10a      	cbz	r2, 8006cb2 <_printf_common+0x26>
 8006cae:	3301      	adds	r3, #1
 8006cb0:	6033      	str	r3, [r6, #0]
 8006cb2:	6823      	ldr	r3, [r4, #0]
 8006cb4:	0699      	lsls	r1, r3, #26
 8006cb6:	bf42      	ittt	mi
 8006cb8:	6833      	ldrmi	r3, [r6, #0]
 8006cba:	3302      	addmi	r3, #2
 8006cbc:	6033      	strmi	r3, [r6, #0]
 8006cbe:	6825      	ldr	r5, [r4, #0]
 8006cc0:	f015 0506 	ands.w	r5, r5, #6
 8006cc4:	d106      	bne.n	8006cd4 <_printf_common+0x48>
 8006cc6:	f104 0a19 	add.w	sl, r4, #25
 8006cca:	68e3      	ldr	r3, [r4, #12]
 8006ccc:	6832      	ldr	r2, [r6, #0]
 8006cce:	1a9b      	subs	r3, r3, r2
 8006cd0:	42ab      	cmp	r3, r5
 8006cd2:	dc26      	bgt.n	8006d22 <_printf_common+0x96>
 8006cd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006cd8:	1e13      	subs	r3, r2, #0
 8006cda:	6822      	ldr	r2, [r4, #0]
 8006cdc:	bf18      	it	ne
 8006cde:	2301      	movne	r3, #1
 8006ce0:	0692      	lsls	r2, r2, #26
 8006ce2:	d42b      	bmi.n	8006d3c <_printf_common+0xb0>
 8006ce4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ce8:	4649      	mov	r1, r9
 8006cea:	4638      	mov	r0, r7
 8006cec:	47c0      	blx	r8
 8006cee:	3001      	adds	r0, #1
 8006cf0:	d01e      	beq.n	8006d30 <_printf_common+0xa4>
 8006cf2:	6823      	ldr	r3, [r4, #0]
 8006cf4:	68e5      	ldr	r5, [r4, #12]
 8006cf6:	6832      	ldr	r2, [r6, #0]
 8006cf8:	f003 0306 	and.w	r3, r3, #6
 8006cfc:	2b04      	cmp	r3, #4
 8006cfe:	bf08      	it	eq
 8006d00:	1aad      	subeq	r5, r5, r2
 8006d02:	68a3      	ldr	r3, [r4, #8]
 8006d04:	6922      	ldr	r2, [r4, #16]
 8006d06:	bf0c      	ite	eq
 8006d08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d0c:	2500      	movne	r5, #0
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	bfc4      	itt	gt
 8006d12:	1a9b      	subgt	r3, r3, r2
 8006d14:	18ed      	addgt	r5, r5, r3
 8006d16:	2600      	movs	r6, #0
 8006d18:	341a      	adds	r4, #26
 8006d1a:	42b5      	cmp	r5, r6
 8006d1c:	d11a      	bne.n	8006d54 <_printf_common+0xc8>
 8006d1e:	2000      	movs	r0, #0
 8006d20:	e008      	b.n	8006d34 <_printf_common+0xa8>
 8006d22:	2301      	movs	r3, #1
 8006d24:	4652      	mov	r2, sl
 8006d26:	4649      	mov	r1, r9
 8006d28:	4638      	mov	r0, r7
 8006d2a:	47c0      	blx	r8
 8006d2c:	3001      	adds	r0, #1
 8006d2e:	d103      	bne.n	8006d38 <_printf_common+0xac>
 8006d30:	f04f 30ff 	mov.w	r0, #4294967295
 8006d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d38:	3501      	adds	r5, #1
 8006d3a:	e7c6      	b.n	8006cca <_printf_common+0x3e>
 8006d3c:	18e1      	adds	r1, r4, r3
 8006d3e:	1c5a      	adds	r2, r3, #1
 8006d40:	2030      	movs	r0, #48	; 0x30
 8006d42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d46:	4422      	add	r2, r4
 8006d48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d50:	3302      	adds	r3, #2
 8006d52:	e7c7      	b.n	8006ce4 <_printf_common+0x58>
 8006d54:	2301      	movs	r3, #1
 8006d56:	4622      	mov	r2, r4
 8006d58:	4649      	mov	r1, r9
 8006d5a:	4638      	mov	r0, r7
 8006d5c:	47c0      	blx	r8
 8006d5e:	3001      	adds	r0, #1
 8006d60:	d0e6      	beq.n	8006d30 <_printf_common+0xa4>
 8006d62:	3601      	adds	r6, #1
 8006d64:	e7d9      	b.n	8006d1a <_printf_common+0x8e>
	...

08006d68 <_printf_i>:
 8006d68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d6c:	7e0f      	ldrb	r7, [r1, #24]
 8006d6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d70:	2f78      	cmp	r7, #120	; 0x78
 8006d72:	4691      	mov	r9, r2
 8006d74:	4680      	mov	r8, r0
 8006d76:	460c      	mov	r4, r1
 8006d78:	469a      	mov	sl, r3
 8006d7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006d7e:	d807      	bhi.n	8006d90 <_printf_i+0x28>
 8006d80:	2f62      	cmp	r7, #98	; 0x62
 8006d82:	d80a      	bhi.n	8006d9a <_printf_i+0x32>
 8006d84:	2f00      	cmp	r7, #0
 8006d86:	f000 80d8 	beq.w	8006f3a <_printf_i+0x1d2>
 8006d8a:	2f58      	cmp	r7, #88	; 0x58
 8006d8c:	f000 80a3 	beq.w	8006ed6 <_printf_i+0x16e>
 8006d90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d98:	e03a      	b.n	8006e10 <_printf_i+0xa8>
 8006d9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d9e:	2b15      	cmp	r3, #21
 8006da0:	d8f6      	bhi.n	8006d90 <_printf_i+0x28>
 8006da2:	a101      	add	r1, pc, #4	; (adr r1, 8006da8 <_printf_i+0x40>)
 8006da4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006da8:	08006e01 	.word	0x08006e01
 8006dac:	08006e15 	.word	0x08006e15
 8006db0:	08006d91 	.word	0x08006d91
 8006db4:	08006d91 	.word	0x08006d91
 8006db8:	08006d91 	.word	0x08006d91
 8006dbc:	08006d91 	.word	0x08006d91
 8006dc0:	08006e15 	.word	0x08006e15
 8006dc4:	08006d91 	.word	0x08006d91
 8006dc8:	08006d91 	.word	0x08006d91
 8006dcc:	08006d91 	.word	0x08006d91
 8006dd0:	08006d91 	.word	0x08006d91
 8006dd4:	08006f21 	.word	0x08006f21
 8006dd8:	08006e45 	.word	0x08006e45
 8006ddc:	08006f03 	.word	0x08006f03
 8006de0:	08006d91 	.word	0x08006d91
 8006de4:	08006d91 	.word	0x08006d91
 8006de8:	08006f43 	.word	0x08006f43
 8006dec:	08006d91 	.word	0x08006d91
 8006df0:	08006e45 	.word	0x08006e45
 8006df4:	08006d91 	.word	0x08006d91
 8006df8:	08006d91 	.word	0x08006d91
 8006dfc:	08006f0b 	.word	0x08006f0b
 8006e00:	682b      	ldr	r3, [r5, #0]
 8006e02:	1d1a      	adds	r2, r3, #4
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	602a      	str	r2, [r5, #0]
 8006e08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e10:	2301      	movs	r3, #1
 8006e12:	e0a3      	b.n	8006f5c <_printf_i+0x1f4>
 8006e14:	6820      	ldr	r0, [r4, #0]
 8006e16:	6829      	ldr	r1, [r5, #0]
 8006e18:	0606      	lsls	r6, r0, #24
 8006e1a:	f101 0304 	add.w	r3, r1, #4
 8006e1e:	d50a      	bpl.n	8006e36 <_printf_i+0xce>
 8006e20:	680e      	ldr	r6, [r1, #0]
 8006e22:	602b      	str	r3, [r5, #0]
 8006e24:	2e00      	cmp	r6, #0
 8006e26:	da03      	bge.n	8006e30 <_printf_i+0xc8>
 8006e28:	232d      	movs	r3, #45	; 0x2d
 8006e2a:	4276      	negs	r6, r6
 8006e2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e30:	485e      	ldr	r0, [pc, #376]	; (8006fac <_printf_i+0x244>)
 8006e32:	230a      	movs	r3, #10
 8006e34:	e019      	b.n	8006e6a <_printf_i+0x102>
 8006e36:	680e      	ldr	r6, [r1, #0]
 8006e38:	602b      	str	r3, [r5, #0]
 8006e3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e3e:	bf18      	it	ne
 8006e40:	b236      	sxthne	r6, r6
 8006e42:	e7ef      	b.n	8006e24 <_printf_i+0xbc>
 8006e44:	682b      	ldr	r3, [r5, #0]
 8006e46:	6820      	ldr	r0, [r4, #0]
 8006e48:	1d19      	adds	r1, r3, #4
 8006e4a:	6029      	str	r1, [r5, #0]
 8006e4c:	0601      	lsls	r1, r0, #24
 8006e4e:	d501      	bpl.n	8006e54 <_printf_i+0xec>
 8006e50:	681e      	ldr	r6, [r3, #0]
 8006e52:	e002      	b.n	8006e5a <_printf_i+0xf2>
 8006e54:	0646      	lsls	r6, r0, #25
 8006e56:	d5fb      	bpl.n	8006e50 <_printf_i+0xe8>
 8006e58:	881e      	ldrh	r6, [r3, #0]
 8006e5a:	4854      	ldr	r0, [pc, #336]	; (8006fac <_printf_i+0x244>)
 8006e5c:	2f6f      	cmp	r7, #111	; 0x6f
 8006e5e:	bf0c      	ite	eq
 8006e60:	2308      	moveq	r3, #8
 8006e62:	230a      	movne	r3, #10
 8006e64:	2100      	movs	r1, #0
 8006e66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e6a:	6865      	ldr	r5, [r4, #4]
 8006e6c:	60a5      	str	r5, [r4, #8]
 8006e6e:	2d00      	cmp	r5, #0
 8006e70:	bfa2      	ittt	ge
 8006e72:	6821      	ldrge	r1, [r4, #0]
 8006e74:	f021 0104 	bicge.w	r1, r1, #4
 8006e78:	6021      	strge	r1, [r4, #0]
 8006e7a:	b90e      	cbnz	r6, 8006e80 <_printf_i+0x118>
 8006e7c:	2d00      	cmp	r5, #0
 8006e7e:	d04d      	beq.n	8006f1c <_printf_i+0x1b4>
 8006e80:	4615      	mov	r5, r2
 8006e82:	fbb6 f1f3 	udiv	r1, r6, r3
 8006e86:	fb03 6711 	mls	r7, r3, r1, r6
 8006e8a:	5dc7      	ldrb	r7, [r0, r7]
 8006e8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006e90:	4637      	mov	r7, r6
 8006e92:	42bb      	cmp	r3, r7
 8006e94:	460e      	mov	r6, r1
 8006e96:	d9f4      	bls.n	8006e82 <_printf_i+0x11a>
 8006e98:	2b08      	cmp	r3, #8
 8006e9a:	d10b      	bne.n	8006eb4 <_printf_i+0x14c>
 8006e9c:	6823      	ldr	r3, [r4, #0]
 8006e9e:	07de      	lsls	r6, r3, #31
 8006ea0:	d508      	bpl.n	8006eb4 <_printf_i+0x14c>
 8006ea2:	6923      	ldr	r3, [r4, #16]
 8006ea4:	6861      	ldr	r1, [r4, #4]
 8006ea6:	4299      	cmp	r1, r3
 8006ea8:	bfde      	ittt	le
 8006eaa:	2330      	movle	r3, #48	; 0x30
 8006eac:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006eb0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006eb4:	1b52      	subs	r2, r2, r5
 8006eb6:	6122      	str	r2, [r4, #16]
 8006eb8:	f8cd a000 	str.w	sl, [sp]
 8006ebc:	464b      	mov	r3, r9
 8006ebe:	aa03      	add	r2, sp, #12
 8006ec0:	4621      	mov	r1, r4
 8006ec2:	4640      	mov	r0, r8
 8006ec4:	f7ff fee2 	bl	8006c8c <_printf_common>
 8006ec8:	3001      	adds	r0, #1
 8006eca:	d14c      	bne.n	8006f66 <_printf_i+0x1fe>
 8006ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ed0:	b004      	add	sp, #16
 8006ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ed6:	4835      	ldr	r0, [pc, #212]	; (8006fac <_printf_i+0x244>)
 8006ed8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006edc:	6829      	ldr	r1, [r5, #0]
 8006ede:	6823      	ldr	r3, [r4, #0]
 8006ee0:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ee4:	6029      	str	r1, [r5, #0]
 8006ee6:	061d      	lsls	r5, r3, #24
 8006ee8:	d514      	bpl.n	8006f14 <_printf_i+0x1ac>
 8006eea:	07df      	lsls	r7, r3, #31
 8006eec:	bf44      	itt	mi
 8006eee:	f043 0320 	orrmi.w	r3, r3, #32
 8006ef2:	6023      	strmi	r3, [r4, #0]
 8006ef4:	b91e      	cbnz	r6, 8006efe <_printf_i+0x196>
 8006ef6:	6823      	ldr	r3, [r4, #0]
 8006ef8:	f023 0320 	bic.w	r3, r3, #32
 8006efc:	6023      	str	r3, [r4, #0]
 8006efe:	2310      	movs	r3, #16
 8006f00:	e7b0      	b.n	8006e64 <_printf_i+0xfc>
 8006f02:	6823      	ldr	r3, [r4, #0]
 8006f04:	f043 0320 	orr.w	r3, r3, #32
 8006f08:	6023      	str	r3, [r4, #0]
 8006f0a:	2378      	movs	r3, #120	; 0x78
 8006f0c:	4828      	ldr	r0, [pc, #160]	; (8006fb0 <_printf_i+0x248>)
 8006f0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f12:	e7e3      	b.n	8006edc <_printf_i+0x174>
 8006f14:	0659      	lsls	r1, r3, #25
 8006f16:	bf48      	it	mi
 8006f18:	b2b6      	uxthmi	r6, r6
 8006f1a:	e7e6      	b.n	8006eea <_printf_i+0x182>
 8006f1c:	4615      	mov	r5, r2
 8006f1e:	e7bb      	b.n	8006e98 <_printf_i+0x130>
 8006f20:	682b      	ldr	r3, [r5, #0]
 8006f22:	6826      	ldr	r6, [r4, #0]
 8006f24:	6961      	ldr	r1, [r4, #20]
 8006f26:	1d18      	adds	r0, r3, #4
 8006f28:	6028      	str	r0, [r5, #0]
 8006f2a:	0635      	lsls	r5, r6, #24
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	d501      	bpl.n	8006f34 <_printf_i+0x1cc>
 8006f30:	6019      	str	r1, [r3, #0]
 8006f32:	e002      	b.n	8006f3a <_printf_i+0x1d2>
 8006f34:	0670      	lsls	r0, r6, #25
 8006f36:	d5fb      	bpl.n	8006f30 <_printf_i+0x1c8>
 8006f38:	8019      	strh	r1, [r3, #0]
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	6123      	str	r3, [r4, #16]
 8006f3e:	4615      	mov	r5, r2
 8006f40:	e7ba      	b.n	8006eb8 <_printf_i+0x150>
 8006f42:	682b      	ldr	r3, [r5, #0]
 8006f44:	1d1a      	adds	r2, r3, #4
 8006f46:	602a      	str	r2, [r5, #0]
 8006f48:	681d      	ldr	r5, [r3, #0]
 8006f4a:	6862      	ldr	r2, [r4, #4]
 8006f4c:	2100      	movs	r1, #0
 8006f4e:	4628      	mov	r0, r5
 8006f50:	f7f9 f976 	bl	8000240 <memchr>
 8006f54:	b108      	cbz	r0, 8006f5a <_printf_i+0x1f2>
 8006f56:	1b40      	subs	r0, r0, r5
 8006f58:	6060      	str	r0, [r4, #4]
 8006f5a:	6863      	ldr	r3, [r4, #4]
 8006f5c:	6123      	str	r3, [r4, #16]
 8006f5e:	2300      	movs	r3, #0
 8006f60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f64:	e7a8      	b.n	8006eb8 <_printf_i+0x150>
 8006f66:	6923      	ldr	r3, [r4, #16]
 8006f68:	462a      	mov	r2, r5
 8006f6a:	4649      	mov	r1, r9
 8006f6c:	4640      	mov	r0, r8
 8006f6e:	47d0      	blx	sl
 8006f70:	3001      	adds	r0, #1
 8006f72:	d0ab      	beq.n	8006ecc <_printf_i+0x164>
 8006f74:	6823      	ldr	r3, [r4, #0]
 8006f76:	079b      	lsls	r3, r3, #30
 8006f78:	d413      	bmi.n	8006fa2 <_printf_i+0x23a>
 8006f7a:	68e0      	ldr	r0, [r4, #12]
 8006f7c:	9b03      	ldr	r3, [sp, #12]
 8006f7e:	4298      	cmp	r0, r3
 8006f80:	bfb8      	it	lt
 8006f82:	4618      	movlt	r0, r3
 8006f84:	e7a4      	b.n	8006ed0 <_printf_i+0x168>
 8006f86:	2301      	movs	r3, #1
 8006f88:	4632      	mov	r2, r6
 8006f8a:	4649      	mov	r1, r9
 8006f8c:	4640      	mov	r0, r8
 8006f8e:	47d0      	blx	sl
 8006f90:	3001      	adds	r0, #1
 8006f92:	d09b      	beq.n	8006ecc <_printf_i+0x164>
 8006f94:	3501      	adds	r5, #1
 8006f96:	68e3      	ldr	r3, [r4, #12]
 8006f98:	9903      	ldr	r1, [sp, #12]
 8006f9a:	1a5b      	subs	r3, r3, r1
 8006f9c:	42ab      	cmp	r3, r5
 8006f9e:	dcf2      	bgt.n	8006f86 <_printf_i+0x21e>
 8006fa0:	e7eb      	b.n	8006f7a <_printf_i+0x212>
 8006fa2:	2500      	movs	r5, #0
 8006fa4:	f104 0619 	add.w	r6, r4, #25
 8006fa8:	e7f5      	b.n	8006f96 <_printf_i+0x22e>
 8006faa:	bf00      	nop
 8006fac:	08007de2 	.word	0x08007de2
 8006fb0:	08007df3 	.word	0x08007df3

08006fb4 <_sbrk_r>:
 8006fb4:	b538      	push	{r3, r4, r5, lr}
 8006fb6:	4d06      	ldr	r5, [pc, #24]	; (8006fd0 <_sbrk_r+0x1c>)
 8006fb8:	2300      	movs	r3, #0
 8006fba:	4604      	mov	r4, r0
 8006fbc:	4608      	mov	r0, r1
 8006fbe:	602b      	str	r3, [r5, #0]
 8006fc0:	f7f9 ff50 	bl	8000e64 <_sbrk>
 8006fc4:	1c43      	adds	r3, r0, #1
 8006fc6:	d102      	bne.n	8006fce <_sbrk_r+0x1a>
 8006fc8:	682b      	ldr	r3, [r5, #0]
 8006fca:	b103      	cbz	r3, 8006fce <_sbrk_r+0x1a>
 8006fcc:	6023      	str	r3, [r4, #0]
 8006fce:	bd38      	pop	{r3, r4, r5, pc}
 8006fd0:	20000280 	.word	0x20000280

08006fd4 <__swbuf_r>:
 8006fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fd6:	460e      	mov	r6, r1
 8006fd8:	4614      	mov	r4, r2
 8006fda:	4605      	mov	r5, r0
 8006fdc:	b118      	cbz	r0, 8006fe6 <__swbuf_r+0x12>
 8006fde:	6983      	ldr	r3, [r0, #24]
 8006fe0:	b90b      	cbnz	r3, 8006fe6 <__swbuf_r+0x12>
 8006fe2:	f000 f9d9 	bl	8007398 <__sinit>
 8006fe6:	4b21      	ldr	r3, [pc, #132]	; (800706c <__swbuf_r+0x98>)
 8006fe8:	429c      	cmp	r4, r3
 8006fea:	d12b      	bne.n	8007044 <__swbuf_r+0x70>
 8006fec:	686c      	ldr	r4, [r5, #4]
 8006fee:	69a3      	ldr	r3, [r4, #24]
 8006ff0:	60a3      	str	r3, [r4, #8]
 8006ff2:	89a3      	ldrh	r3, [r4, #12]
 8006ff4:	071a      	lsls	r2, r3, #28
 8006ff6:	d52f      	bpl.n	8007058 <__swbuf_r+0x84>
 8006ff8:	6923      	ldr	r3, [r4, #16]
 8006ffa:	b36b      	cbz	r3, 8007058 <__swbuf_r+0x84>
 8006ffc:	6923      	ldr	r3, [r4, #16]
 8006ffe:	6820      	ldr	r0, [r4, #0]
 8007000:	1ac0      	subs	r0, r0, r3
 8007002:	6963      	ldr	r3, [r4, #20]
 8007004:	b2f6      	uxtb	r6, r6
 8007006:	4283      	cmp	r3, r0
 8007008:	4637      	mov	r7, r6
 800700a:	dc04      	bgt.n	8007016 <__swbuf_r+0x42>
 800700c:	4621      	mov	r1, r4
 800700e:	4628      	mov	r0, r5
 8007010:	f000 f92e 	bl	8007270 <_fflush_r>
 8007014:	bb30      	cbnz	r0, 8007064 <__swbuf_r+0x90>
 8007016:	68a3      	ldr	r3, [r4, #8]
 8007018:	3b01      	subs	r3, #1
 800701a:	60a3      	str	r3, [r4, #8]
 800701c:	6823      	ldr	r3, [r4, #0]
 800701e:	1c5a      	adds	r2, r3, #1
 8007020:	6022      	str	r2, [r4, #0]
 8007022:	701e      	strb	r6, [r3, #0]
 8007024:	6963      	ldr	r3, [r4, #20]
 8007026:	3001      	adds	r0, #1
 8007028:	4283      	cmp	r3, r0
 800702a:	d004      	beq.n	8007036 <__swbuf_r+0x62>
 800702c:	89a3      	ldrh	r3, [r4, #12]
 800702e:	07db      	lsls	r3, r3, #31
 8007030:	d506      	bpl.n	8007040 <__swbuf_r+0x6c>
 8007032:	2e0a      	cmp	r6, #10
 8007034:	d104      	bne.n	8007040 <__swbuf_r+0x6c>
 8007036:	4621      	mov	r1, r4
 8007038:	4628      	mov	r0, r5
 800703a:	f000 f919 	bl	8007270 <_fflush_r>
 800703e:	b988      	cbnz	r0, 8007064 <__swbuf_r+0x90>
 8007040:	4638      	mov	r0, r7
 8007042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007044:	4b0a      	ldr	r3, [pc, #40]	; (8007070 <__swbuf_r+0x9c>)
 8007046:	429c      	cmp	r4, r3
 8007048:	d101      	bne.n	800704e <__swbuf_r+0x7a>
 800704a:	68ac      	ldr	r4, [r5, #8]
 800704c:	e7cf      	b.n	8006fee <__swbuf_r+0x1a>
 800704e:	4b09      	ldr	r3, [pc, #36]	; (8007074 <__swbuf_r+0xa0>)
 8007050:	429c      	cmp	r4, r3
 8007052:	bf08      	it	eq
 8007054:	68ec      	ldreq	r4, [r5, #12]
 8007056:	e7ca      	b.n	8006fee <__swbuf_r+0x1a>
 8007058:	4621      	mov	r1, r4
 800705a:	4628      	mov	r0, r5
 800705c:	f000 f80c 	bl	8007078 <__swsetup_r>
 8007060:	2800      	cmp	r0, #0
 8007062:	d0cb      	beq.n	8006ffc <__swbuf_r+0x28>
 8007064:	f04f 37ff 	mov.w	r7, #4294967295
 8007068:	e7ea      	b.n	8007040 <__swbuf_r+0x6c>
 800706a:	bf00      	nop
 800706c:	08007e24 	.word	0x08007e24
 8007070:	08007e44 	.word	0x08007e44
 8007074:	08007e04 	.word	0x08007e04

08007078 <__swsetup_r>:
 8007078:	4b32      	ldr	r3, [pc, #200]	; (8007144 <__swsetup_r+0xcc>)
 800707a:	b570      	push	{r4, r5, r6, lr}
 800707c:	681d      	ldr	r5, [r3, #0]
 800707e:	4606      	mov	r6, r0
 8007080:	460c      	mov	r4, r1
 8007082:	b125      	cbz	r5, 800708e <__swsetup_r+0x16>
 8007084:	69ab      	ldr	r3, [r5, #24]
 8007086:	b913      	cbnz	r3, 800708e <__swsetup_r+0x16>
 8007088:	4628      	mov	r0, r5
 800708a:	f000 f985 	bl	8007398 <__sinit>
 800708e:	4b2e      	ldr	r3, [pc, #184]	; (8007148 <__swsetup_r+0xd0>)
 8007090:	429c      	cmp	r4, r3
 8007092:	d10f      	bne.n	80070b4 <__swsetup_r+0x3c>
 8007094:	686c      	ldr	r4, [r5, #4]
 8007096:	89a3      	ldrh	r3, [r4, #12]
 8007098:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800709c:	0719      	lsls	r1, r3, #28
 800709e:	d42c      	bmi.n	80070fa <__swsetup_r+0x82>
 80070a0:	06dd      	lsls	r5, r3, #27
 80070a2:	d411      	bmi.n	80070c8 <__swsetup_r+0x50>
 80070a4:	2309      	movs	r3, #9
 80070a6:	6033      	str	r3, [r6, #0]
 80070a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80070ac:	81a3      	strh	r3, [r4, #12]
 80070ae:	f04f 30ff 	mov.w	r0, #4294967295
 80070b2:	e03e      	b.n	8007132 <__swsetup_r+0xba>
 80070b4:	4b25      	ldr	r3, [pc, #148]	; (800714c <__swsetup_r+0xd4>)
 80070b6:	429c      	cmp	r4, r3
 80070b8:	d101      	bne.n	80070be <__swsetup_r+0x46>
 80070ba:	68ac      	ldr	r4, [r5, #8]
 80070bc:	e7eb      	b.n	8007096 <__swsetup_r+0x1e>
 80070be:	4b24      	ldr	r3, [pc, #144]	; (8007150 <__swsetup_r+0xd8>)
 80070c0:	429c      	cmp	r4, r3
 80070c2:	bf08      	it	eq
 80070c4:	68ec      	ldreq	r4, [r5, #12]
 80070c6:	e7e6      	b.n	8007096 <__swsetup_r+0x1e>
 80070c8:	0758      	lsls	r0, r3, #29
 80070ca:	d512      	bpl.n	80070f2 <__swsetup_r+0x7a>
 80070cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070ce:	b141      	cbz	r1, 80070e2 <__swsetup_r+0x6a>
 80070d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070d4:	4299      	cmp	r1, r3
 80070d6:	d002      	beq.n	80070de <__swsetup_r+0x66>
 80070d8:	4630      	mov	r0, r6
 80070da:	f7ff fa41 	bl	8006560 <_free_r>
 80070de:	2300      	movs	r3, #0
 80070e0:	6363      	str	r3, [r4, #52]	; 0x34
 80070e2:	89a3      	ldrh	r3, [r4, #12]
 80070e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80070e8:	81a3      	strh	r3, [r4, #12]
 80070ea:	2300      	movs	r3, #0
 80070ec:	6063      	str	r3, [r4, #4]
 80070ee:	6923      	ldr	r3, [r4, #16]
 80070f0:	6023      	str	r3, [r4, #0]
 80070f2:	89a3      	ldrh	r3, [r4, #12]
 80070f4:	f043 0308 	orr.w	r3, r3, #8
 80070f8:	81a3      	strh	r3, [r4, #12]
 80070fa:	6923      	ldr	r3, [r4, #16]
 80070fc:	b94b      	cbnz	r3, 8007112 <__swsetup_r+0x9a>
 80070fe:	89a3      	ldrh	r3, [r4, #12]
 8007100:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007108:	d003      	beq.n	8007112 <__swsetup_r+0x9a>
 800710a:	4621      	mov	r1, r4
 800710c:	4630      	mov	r0, r6
 800710e:	f000 fa09 	bl	8007524 <__smakebuf_r>
 8007112:	89a0      	ldrh	r0, [r4, #12]
 8007114:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007118:	f010 0301 	ands.w	r3, r0, #1
 800711c:	d00a      	beq.n	8007134 <__swsetup_r+0xbc>
 800711e:	2300      	movs	r3, #0
 8007120:	60a3      	str	r3, [r4, #8]
 8007122:	6963      	ldr	r3, [r4, #20]
 8007124:	425b      	negs	r3, r3
 8007126:	61a3      	str	r3, [r4, #24]
 8007128:	6923      	ldr	r3, [r4, #16]
 800712a:	b943      	cbnz	r3, 800713e <__swsetup_r+0xc6>
 800712c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007130:	d1ba      	bne.n	80070a8 <__swsetup_r+0x30>
 8007132:	bd70      	pop	{r4, r5, r6, pc}
 8007134:	0781      	lsls	r1, r0, #30
 8007136:	bf58      	it	pl
 8007138:	6963      	ldrpl	r3, [r4, #20]
 800713a:	60a3      	str	r3, [r4, #8]
 800713c:	e7f4      	b.n	8007128 <__swsetup_r+0xb0>
 800713e:	2000      	movs	r0, #0
 8007140:	e7f7      	b.n	8007132 <__swsetup_r+0xba>
 8007142:	bf00      	nop
 8007144:	2000000c 	.word	0x2000000c
 8007148:	08007e24 	.word	0x08007e24
 800714c:	08007e44 	.word	0x08007e44
 8007150:	08007e04 	.word	0x08007e04

08007154 <abort>:
 8007154:	b508      	push	{r3, lr}
 8007156:	2006      	movs	r0, #6
 8007158:	f000 fab0 	bl	80076bc <raise>
 800715c:	2001      	movs	r0, #1
 800715e:	f7f9 fe09 	bl	8000d74 <_exit>
	...

08007164 <__sflush_r>:
 8007164:	898a      	ldrh	r2, [r1, #12]
 8007166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800716a:	4605      	mov	r5, r0
 800716c:	0710      	lsls	r0, r2, #28
 800716e:	460c      	mov	r4, r1
 8007170:	d458      	bmi.n	8007224 <__sflush_r+0xc0>
 8007172:	684b      	ldr	r3, [r1, #4]
 8007174:	2b00      	cmp	r3, #0
 8007176:	dc05      	bgt.n	8007184 <__sflush_r+0x20>
 8007178:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800717a:	2b00      	cmp	r3, #0
 800717c:	dc02      	bgt.n	8007184 <__sflush_r+0x20>
 800717e:	2000      	movs	r0, #0
 8007180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007184:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007186:	2e00      	cmp	r6, #0
 8007188:	d0f9      	beq.n	800717e <__sflush_r+0x1a>
 800718a:	2300      	movs	r3, #0
 800718c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007190:	682f      	ldr	r7, [r5, #0]
 8007192:	602b      	str	r3, [r5, #0]
 8007194:	d032      	beq.n	80071fc <__sflush_r+0x98>
 8007196:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007198:	89a3      	ldrh	r3, [r4, #12]
 800719a:	075a      	lsls	r2, r3, #29
 800719c:	d505      	bpl.n	80071aa <__sflush_r+0x46>
 800719e:	6863      	ldr	r3, [r4, #4]
 80071a0:	1ac0      	subs	r0, r0, r3
 80071a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80071a4:	b10b      	cbz	r3, 80071aa <__sflush_r+0x46>
 80071a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80071a8:	1ac0      	subs	r0, r0, r3
 80071aa:	2300      	movs	r3, #0
 80071ac:	4602      	mov	r2, r0
 80071ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071b0:	6a21      	ldr	r1, [r4, #32]
 80071b2:	4628      	mov	r0, r5
 80071b4:	47b0      	blx	r6
 80071b6:	1c43      	adds	r3, r0, #1
 80071b8:	89a3      	ldrh	r3, [r4, #12]
 80071ba:	d106      	bne.n	80071ca <__sflush_r+0x66>
 80071bc:	6829      	ldr	r1, [r5, #0]
 80071be:	291d      	cmp	r1, #29
 80071c0:	d82c      	bhi.n	800721c <__sflush_r+0xb8>
 80071c2:	4a2a      	ldr	r2, [pc, #168]	; (800726c <__sflush_r+0x108>)
 80071c4:	40ca      	lsrs	r2, r1
 80071c6:	07d6      	lsls	r6, r2, #31
 80071c8:	d528      	bpl.n	800721c <__sflush_r+0xb8>
 80071ca:	2200      	movs	r2, #0
 80071cc:	6062      	str	r2, [r4, #4]
 80071ce:	04d9      	lsls	r1, r3, #19
 80071d0:	6922      	ldr	r2, [r4, #16]
 80071d2:	6022      	str	r2, [r4, #0]
 80071d4:	d504      	bpl.n	80071e0 <__sflush_r+0x7c>
 80071d6:	1c42      	adds	r2, r0, #1
 80071d8:	d101      	bne.n	80071de <__sflush_r+0x7a>
 80071da:	682b      	ldr	r3, [r5, #0]
 80071dc:	b903      	cbnz	r3, 80071e0 <__sflush_r+0x7c>
 80071de:	6560      	str	r0, [r4, #84]	; 0x54
 80071e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071e2:	602f      	str	r7, [r5, #0]
 80071e4:	2900      	cmp	r1, #0
 80071e6:	d0ca      	beq.n	800717e <__sflush_r+0x1a>
 80071e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071ec:	4299      	cmp	r1, r3
 80071ee:	d002      	beq.n	80071f6 <__sflush_r+0x92>
 80071f0:	4628      	mov	r0, r5
 80071f2:	f7ff f9b5 	bl	8006560 <_free_r>
 80071f6:	2000      	movs	r0, #0
 80071f8:	6360      	str	r0, [r4, #52]	; 0x34
 80071fa:	e7c1      	b.n	8007180 <__sflush_r+0x1c>
 80071fc:	6a21      	ldr	r1, [r4, #32]
 80071fe:	2301      	movs	r3, #1
 8007200:	4628      	mov	r0, r5
 8007202:	47b0      	blx	r6
 8007204:	1c41      	adds	r1, r0, #1
 8007206:	d1c7      	bne.n	8007198 <__sflush_r+0x34>
 8007208:	682b      	ldr	r3, [r5, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d0c4      	beq.n	8007198 <__sflush_r+0x34>
 800720e:	2b1d      	cmp	r3, #29
 8007210:	d001      	beq.n	8007216 <__sflush_r+0xb2>
 8007212:	2b16      	cmp	r3, #22
 8007214:	d101      	bne.n	800721a <__sflush_r+0xb6>
 8007216:	602f      	str	r7, [r5, #0]
 8007218:	e7b1      	b.n	800717e <__sflush_r+0x1a>
 800721a:	89a3      	ldrh	r3, [r4, #12]
 800721c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007220:	81a3      	strh	r3, [r4, #12]
 8007222:	e7ad      	b.n	8007180 <__sflush_r+0x1c>
 8007224:	690f      	ldr	r7, [r1, #16]
 8007226:	2f00      	cmp	r7, #0
 8007228:	d0a9      	beq.n	800717e <__sflush_r+0x1a>
 800722a:	0793      	lsls	r3, r2, #30
 800722c:	680e      	ldr	r6, [r1, #0]
 800722e:	bf08      	it	eq
 8007230:	694b      	ldreq	r3, [r1, #20]
 8007232:	600f      	str	r7, [r1, #0]
 8007234:	bf18      	it	ne
 8007236:	2300      	movne	r3, #0
 8007238:	eba6 0807 	sub.w	r8, r6, r7
 800723c:	608b      	str	r3, [r1, #8]
 800723e:	f1b8 0f00 	cmp.w	r8, #0
 8007242:	dd9c      	ble.n	800717e <__sflush_r+0x1a>
 8007244:	6a21      	ldr	r1, [r4, #32]
 8007246:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007248:	4643      	mov	r3, r8
 800724a:	463a      	mov	r2, r7
 800724c:	4628      	mov	r0, r5
 800724e:	47b0      	blx	r6
 8007250:	2800      	cmp	r0, #0
 8007252:	dc06      	bgt.n	8007262 <__sflush_r+0xfe>
 8007254:	89a3      	ldrh	r3, [r4, #12]
 8007256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800725a:	81a3      	strh	r3, [r4, #12]
 800725c:	f04f 30ff 	mov.w	r0, #4294967295
 8007260:	e78e      	b.n	8007180 <__sflush_r+0x1c>
 8007262:	4407      	add	r7, r0
 8007264:	eba8 0800 	sub.w	r8, r8, r0
 8007268:	e7e9      	b.n	800723e <__sflush_r+0xda>
 800726a:	bf00      	nop
 800726c:	20400001 	.word	0x20400001

08007270 <_fflush_r>:
 8007270:	b538      	push	{r3, r4, r5, lr}
 8007272:	690b      	ldr	r3, [r1, #16]
 8007274:	4605      	mov	r5, r0
 8007276:	460c      	mov	r4, r1
 8007278:	b913      	cbnz	r3, 8007280 <_fflush_r+0x10>
 800727a:	2500      	movs	r5, #0
 800727c:	4628      	mov	r0, r5
 800727e:	bd38      	pop	{r3, r4, r5, pc}
 8007280:	b118      	cbz	r0, 800728a <_fflush_r+0x1a>
 8007282:	6983      	ldr	r3, [r0, #24]
 8007284:	b90b      	cbnz	r3, 800728a <_fflush_r+0x1a>
 8007286:	f000 f887 	bl	8007398 <__sinit>
 800728a:	4b14      	ldr	r3, [pc, #80]	; (80072dc <_fflush_r+0x6c>)
 800728c:	429c      	cmp	r4, r3
 800728e:	d11b      	bne.n	80072c8 <_fflush_r+0x58>
 8007290:	686c      	ldr	r4, [r5, #4]
 8007292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d0ef      	beq.n	800727a <_fflush_r+0xa>
 800729a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800729c:	07d0      	lsls	r0, r2, #31
 800729e:	d404      	bmi.n	80072aa <_fflush_r+0x3a>
 80072a0:	0599      	lsls	r1, r3, #22
 80072a2:	d402      	bmi.n	80072aa <_fflush_r+0x3a>
 80072a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072a6:	f000 f915 	bl	80074d4 <__retarget_lock_acquire_recursive>
 80072aa:	4628      	mov	r0, r5
 80072ac:	4621      	mov	r1, r4
 80072ae:	f7ff ff59 	bl	8007164 <__sflush_r>
 80072b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072b4:	07da      	lsls	r2, r3, #31
 80072b6:	4605      	mov	r5, r0
 80072b8:	d4e0      	bmi.n	800727c <_fflush_r+0xc>
 80072ba:	89a3      	ldrh	r3, [r4, #12]
 80072bc:	059b      	lsls	r3, r3, #22
 80072be:	d4dd      	bmi.n	800727c <_fflush_r+0xc>
 80072c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072c2:	f000 f908 	bl	80074d6 <__retarget_lock_release_recursive>
 80072c6:	e7d9      	b.n	800727c <_fflush_r+0xc>
 80072c8:	4b05      	ldr	r3, [pc, #20]	; (80072e0 <_fflush_r+0x70>)
 80072ca:	429c      	cmp	r4, r3
 80072cc:	d101      	bne.n	80072d2 <_fflush_r+0x62>
 80072ce:	68ac      	ldr	r4, [r5, #8]
 80072d0:	e7df      	b.n	8007292 <_fflush_r+0x22>
 80072d2:	4b04      	ldr	r3, [pc, #16]	; (80072e4 <_fflush_r+0x74>)
 80072d4:	429c      	cmp	r4, r3
 80072d6:	bf08      	it	eq
 80072d8:	68ec      	ldreq	r4, [r5, #12]
 80072da:	e7da      	b.n	8007292 <_fflush_r+0x22>
 80072dc:	08007e24 	.word	0x08007e24
 80072e0:	08007e44 	.word	0x08007e44
 80072e4:	08007e04 	.word	0x08007e04

080072e8 <std>:
 80072e8:	2300      	movs	r3, #0
 80072ea:	b510      	push	{r4, lr}
 80072ec:	4604      	mov	r4, r0
 80072ee:	e9c0 3300 	strd	r3, r3, [r0]
 80072f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80072f6:	6083      	str	r3, [r0, #8]
 80072f8:	8181      	strh	r1, [r0, #12]
 80072fa:	6643      	str	r3, [r0, #100]	; 0x64
 80072fc:	81c2      	strh	r2, [r0, #14]
 80072fe:	6183      	str	r3, [r0, #24]
 8007300:	4619      	mov	r1, r3
 8007302:	2208      	movs	r2, #8
 8007304:	305c      	adds	r0, #92	; 0x5c
 8007306:	f7fe ffcf 	bl	80062a8 <memset>
 800730a:	4b05      	ldr	r3, [pc, #20]	; (8007320 <std+0x38>)
 800730c:	6263      	str	r3, [r4, #36]	; 0x24
 800730e:	4b05      	ldr	r3, [pc, #20]	; (8007324 <std+0x3c>)
 8007310:	62a3      	str	r3, [r4, #40]	; 0x28
 8007312:	4b05      	ldr	r3, [pc, #20]	; (8007328 <std+0x40>)
 8007314:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007316:	4b05      	ldr	r3, [pc, #20]	; (800732c <std+0x44>)
 8007318:	6224      	str	r4, [r4, #32]
 800731a:	6323      	str	r3, [r4, #48]	; 0x30
 800731c:	bd10      	pop	{r4, pc}
 800731e:	bf00      	nop
 8007320:	080076f5 	.word	0x080076f5
 8007324:	08007717 	.word	0x08007717
 8007328:	0800774f 	.word	0x0800774f
 800732c:	08007773 	.word	0x08007773

08007330 <_cleanup_r>:
 8007330:	4901      	ldr	r1, [pc, #4]	; (8007338 <_cleanup_r+0x8>)
 8007332:	f000 b8af 	b.w	8007494 <_fwalk_reent>
 8007336:	bf00      	nop
 8007338:	08007271 	.word	0x08007271

0800733c <__sfmoreglue>:
 800733c:	b570      	push	{r4, r5, r6, lr}
 800733e:	2268      	movs	r2, #104	; 0x68
 8007340:	1e4d      	subs	r5, r1, #1
 8007342:	4355      	muls	r5, r2
 8007344:	460e      	mov	r6, r1
 8007346:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800734a:	f7ff f975 	bl	8006638 <_malloc_r>
 800734e:	4604      	mov	r4, r0
 8007350:	b140      	cbz	r0, 8007364 <__sfmoreglue+0x28>
 8007352:	2100      	movs	r1, #0
 8007354:	e9c0 1600 	strd	r1, r6, [r0]
 8007358:	300c      	adds	r0, #12
 800735a:	60a0      	str	r0, [r4, #8]
 800735c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007360:	f7fe ffa2 	bl	80062a8 <memset>
 8007364:	4620      	mov	r0, r4
 8007366:	bd70      	pop	{r4, r5, r6, pc}

08007368 <__sfp_lock_acquire>:
 8007368:	4801      	ldr	r0, [pc, #4]	; (8007370 <__sfp_lock_acquire+0x8>)
 800736a:	f000 b8b3 	b.w	80074d4 <__retarget_lock_acquire_recursive>
 800736e:	bf00      	nop
 8007370:	2000027d 	.word	0x2000027d

08007374 <__sfp_lock_release>:
 8007374:	4801      	ldr	r0, [pc, #4]	; (800737c <__sfp_lock_release+0x8>)
 8007376:	f000 b8ae 	b.w	80074d6 <__retarget_lock_release_recursive>
 800737a:	bf00      	nop
 800737c:	2000027d 	.word	0x2000027d

08007380 <__sinit_lock_acquire>:
 8007380:	4801      	ldr	r0, [pc, #4]	; (8007388 <__sinit_lock_acquire+0x8>)
 8007382:	f000 b8a7 	b.w	80074d4 <__retarget_lock_acquire_recursive>
 8007386:	bf00      	nop
 8007388:	2000027e 	.word	0x2000027e

0800738c <__sinit_lock_release>:
 800738c:	4801      	ldr	r0, [pc, #4]	; (8007394 <__sinit_lock_release+0x8>)
 800738e:	f000 b8a2 	b.w	80074d6 <__retarget_lock_release_recursive>
 8007392:	bf00      	nop
 8007394:	2000027e 	.word	0x2000027e

08007398 <__sinit>:
 8007398:	b510      	push	{r4, lr}
 800739a:	4604      	mov	r4, r0
 800739c:	f7ff fff0 	bl	8007380 <__sinit_lock_acquire>
 80073a0:	69a3      	ldr	r3, [r4, #24]
 80073a2:	b11b      	cbz	r3, 80073ac <__sinit+0x14>
 80073a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073a8:	f7ff bff0 	b.w	800738c <__sinit_lock_release>
 80073ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80073b0:	6523      	str	r3, [r4, #80]	; 0x50
 80073b2:	4b13      	ldr	r3, [pc, #76]	; (8007400 <__sinit+0x68>)
 80073b4:	4a13      	ldr	r2, [pc, #76]	; (8007404 <__sinit+0x6c>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80073ba:	42a3      	cmp	r3, r4
 80073bc:	bf04      	itt	eq
 80073be:	2301      	moveq	r3, #1
 80073c0:	61a3      	streq	r3, [r4, #24]
 80073c2:	4620      	mov	r0, r4
 80073c4:	f000 f820 	bl	8007408 <__sfp>
 80073c8:	6060      	str	r0, [r4, #4]
 80073ca:	4620      	mov	r0, r4
 80073cc:	f000 f81c 	bl	8007408 <__sfp>
 80073d0:	60a0      	str	r0, [r4, #8]
 80073d2:	4620      	mov	r0, r4
 80073d4:	f000 f818 	bl	8007408 <__sfp>
 80073d8:	2200      	movs	r2, #0
 80073da:	60e0      	str	r0, [r4, #12]
 80073dc:	2104      	movs	r1, #4
 80073de:	6860      	ldr	r0, [r4, #4]
 80073e0:	f7ff ff82 	bl	80072e8 <std>
 80073e4:	68a0      	ldr	r0, [r4, #8]
 80073e6:	2201      	movs	r2, #1
 80073e8:	2109      	movs	r1, #9
 80073ea:	f7ff ff7d 	bl	80072e8 <std>
 80073ee:	68e0      	ldr	r0, [r4, #12]
 80073f0:	2202      	movs	r2, #2
 80073f2:	2112      	movs	r1, #18
 80073f4:	f7ff ff78 	bl	80072e8 <std>
 80073f8:	2301      	movs	r3, #1
 80073fa:	61a3      	str	r3, [r4, #24]
 80073fc:	e7d2      	b.n	80073a4 <__sinit+0xc>
 80073fe:	bf00      	nop
 8007400:	08007c1c 	.word	0x08007c1c
 8007404:	08007331 	.word	0x08007331

08007408 <__sfp>:
 8007408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800740a:	4607      	mov	r7, r0
 800740c:	f7ff ffac 	bl	8007368 <__sfp_lock_acquire>
 8007410:	4b1e      	ldr	r3, [pc, #120]	; (800748c <__sfp+0x84>)
 8007412:	681e      	ldr	r6, [r3, #0]
 8007414:	69b3      	ldr	r3, [r6, #24]
 8007416:	b913      	cbnz	r3, 800741e <__sfp+0x16>
 8007418:	4630      	mov	r0, r6
 800741a:	f7ff ffbd 	bl	8007398 <__sinit>
 800741e:	3648      	adds	r6, #72	; 0x48
 8007420:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007424:	3b01      	subs	r3, #1
 8007426:	d503      	bpl.n	8007430 <__sfp+0x28>
 8007428:	6833      	ldr	r3, [r6, #0]
 800742a:	b30b      	cbz	r3, 8007470 <__sfp+0x68>
 800742c:	6836      	ldr	r6, [r6, #0]
 800742e:	e7f7      	b.n	8007420 <__sfp+0x18>
 8007430:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007434:	b9d5      	cbnz	r5, 800746c <__sfp+0x64>
 8007436:	4b16      	ldr	r3, [pc, #88]	; (8007490 <__sfp+0x88>)
 8007438:	60e3      	str	r3, [r4, #12]
 800743a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800743e:	6665      	str	r5, [r4, #100]	; 0x64
 8007440:	f000 f847 	bl	80074d2 <__retarget_lock_init_recursive>
 8007444:	f7ff ff96 	bl	8007374 <__sfp_lock_release>
 8007448:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800744c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007450:	6025      	str	r5, [r4, #0]
 8007452:	61a5      	str	r5, [r4, #24]
 8007454:	2208      	movs	r2, #8
 8007456:	4629      	mov	r1, r5
 8007458:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800745c:	f7fe ff24 	bl	80062a8 <memset>
 8007460:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007464:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007468:	4620      	mov	r0, r4
 800746a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800746c:	3468      	adds	r4, #104	; 0x68
 800746e:	e7d9      	b.n	8007424 <__sfp+0x1c>
 8007470:	2104      	movs	r1, #4
 8007472:	4638      	mov	r0, r7
 8007474:	f7ff ff62 	bl	800733c <__sfmoreglue>
 8007478:	4604      	mov	r4, r0
 800747a:	6030      	str	r0, [r6, #0]
 800747c:	2800      	cmp	r0, #0
 800747e:	d1d5      	bne.n	800742c <__sfp+0x24>
 8007480:	f7ff ff78 	bl	8007374 <__sfp_lock_release>
 8007484:	230c      	movs	r3, #12
 8007486:	603b      	str	r3, [r7, #0]
 8007488:	e7ee      	b.n	8007468 <__sfp+0x60>
 800748a:	bf00      	nop
 800748c:	08007c1c 	.word	0x08007c1c
 8007490:	ffff0001 	.word	0xffff0001

08007494 <_fwalk_reent>:
 8007494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007498:	4606      	mov	r6, r0
 800749a:	4688      	mov	r8, r1
 800749c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80074a0:	2700      	movs	r7, #0
 80074a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80074a6:	f1b9 0901 	subs.w	r9, r9, #1
 80074aa:	d505      	bpl.n	80074b8 <_fwalk_reent+0x24>
 80074ac:	6824      	ldr	r4, [r4, #0]
 80074ae:	2c00      	cmp	r4, #0
 80074b0:	d1f7      	bne.n	80074a2 <_fwalk_reent+0xe>
 80074b2:	4638      	mov	r0, r7
 80074b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074b8:	89ab      	ldrh	r3, [r5, #12]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d907      	bls.n	80074ce <_fwalk_reent+0x3a>
 80074be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80074c2:	3301      	adds	r3, #1
 80074c4:	d003      	beq.n	80074ce <_fwalk_reent+0x3a>
 80074c6:	4629      	mov	r1, r5
 80074c8:	4630      	mov	r0, r6
 80074ca:	47c0      	blx	r8
 80074cc:	4307      	orrs	r7, r0
 80074ce:	3568      	adds	r5, #104	; 0x68
 80074d0:	e7e9      	b.n	80074a6 <_fwalk_reent+0x12>

080074d2 <__retarget_lock_init_recursive>:
 80074d2:	4770      	bx	lr

080074d4 <__retarget_lock_acquire_recursive>:
 80074d4:	4770      	bx	lr

080074d6 <__retarget_lock_release_recursive>:
 80074d6:	4770      	bx	lr

080074d8 <__swhatbuf_r>:
 80074d8:	b570      	push	{r4, r5, r6, lr}
 80074da:	460e      	mov	r6, r1
 80074dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074e0:	2900      	cmp	r1, #0
 80074e2:	b096      	sub	sp, #88	; 0x58
 80074e4:	4614      	mov	r4, r2
 80074e6:	461d      	mov	r5, r3
 80074e8:	da08      	bge.n	80074fc <__swhatbuf_r+0x24>
 80074ea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80074ee:	2200      	movs	r2, #0
 80074f0:	602a      	str	r2, [r5, #0]
 80074f2:	061a      	lsls	r2, r3, #24
 80074f4:	d410      	bmi.n	8007518 <__swhatbuf_r+0x40>
 80074f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074fa:	e00e      	b.n	800751a <__swhatbuf_r+0x42>
 80074fc:	466a      	mov	r2, sp
 80074fe:	f000 f95f 	bl	80077c0 <_fstat_r>
 8007502:	2800      	cmp	r0, #0
 8007504:	dbf1      	blt.n	80074ea <__swhatbuf_r+0x12>
 8007506:	9a01      	ldr	r2, [sp, #4]
 8007508:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800750c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007510:	425a      	negs	r2, r3
 8007512:	415a      	adcs	r2, r3
 8007514:	602a      	str	r2, [r5, #0]
 8007516:	e7ee      	b.n	80074f6 <__swhatbuf_r+0x1e>
 8007518:	2340      	movs	r3, #64	; 0x40
 800751a:	2000      	movs	r0, #0
 800751c:	6023      	str	r3, [r4, #0]
 800751e:	b016      	add	sp, #88	; 0x58
 8007520:	bd70      	pop	{r4, r5, r6, pc}
	...

08007524 <__smakebuf_r>:
 8007524:	898b      	ldrh	r3, [r1, #12]
 8007526:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007528:	079d      	lsls	r5, r3, #30
 800752a:	4606      	mov	r6, r0
 800752c:	460c      	mov	r4, r1
 800752e:	d507      	bpl.n	8007540 <__smakebuf_r+0x1c>
 8007530:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007534:	6023      	str	r3, [r4, #0]
 8007536:	6123      	str	r3, [r4, #16]
 8007538:	2301      	movs	r3, #1
 800753a:	6163      	str	r3, [r4, #20]
 800753c:	b002      	add	sp, #8
 800753e:	bd70      	pop	{r4, r5, r6, pc}
 8007540:	ab01      	add	r3, sp, #4
 8007542:	466a      	mov	r2, sp
 8007544:	f7ff ffc8 	bl	80074d8 <__swhatbuf_r>
 8007548:	9900      	ldr	r1, [sp, #0]
 800754a:	4605      	mov	r5, r0
 800754c:	4630      	mov	r0, r6
 800754e:	f7ff f873 	bl	8006638 <_malloc_r>
 8007552:	b948      	cbnz	r0, 8007568 <__smakebuf_r+0x44>
 8007554:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007558:	059a      	lsls	r2, r3, #22
 800755a:	d4ef      	bmi.n	800753c <__smakebuf_r+0x18>
 800755c:	f023 0303 	bic.w	r3, r3, #3
 8007560:	f043 0302 	orr.w	r3, r3, #2
 8007564:	81a3      	strh	r3, [r4, #12]
 8007566:	e7e3      	b.n	8007530 <__smakebuf_r+0xc>
 8007568:	4b0d      	ldr	r3, [pc, #52]	; (80075a0 <__smakebuf_r+0x7c>)
 800756a:	62b3      	str	r3, [r6, #40]	; 0x28
 800756c:	89a3      	ldrh	r3, [r4, #12]
 800756e:	6020      	str	r0, [r4, #0]
 8007570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007574:	81a3      	strh	r3, [r4, #12]
 8007576:	9b00      	ldr	r3, [sp, #0]
 8007578:	6163      	str	r3, [r4, #20]
 800757a:	9b01      	ldr	r3, [sp, #4]
 800757c:	6120      	str	r0, [r4, #16]
 800757e:	b15b      	cbz	r3, 8007598 <__smakebuf_r+0x74>
 8007580:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007584:	4630      	mov	r0, r6
 8007586:	f000 f92d 	bl	80077e4 <_isatty_r>
 800758a:	b128      	cbz	r0, 8007598 <__smakebuf_r+0x74>
 800758c:	89a3      	ldrh	r3, [r4, #12]
 800758e:	f023 0303 	bic.w	r3, r3, #3
 8007592:	f043 0301 	orr.w	r3, r3, #1
 8007596:	81a3      	strh	r3, [r4, #12]
 8007598:	89a0      	ldrh	r0, [r4, #12]
 800759a:	4305      	orrs	r5, r0
 800759c:	81a5      	strh	r5, [r4, #12]
 800759e:	e7cd      	b.n	800753c <__smakebuf_r+0x18>
 80075a0:	08007331 	.word	0x08007331

080075a4 <memcpy>:
 80075a4:	440a      	add	r2, r1
 80075a6:	4291      	cmp	r1, r2
 80075a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80075ac:	d100      	bne.n	80075b0 <memcpy+0xc>
 80075ae:	4770      	bx	lr
 80075b0:	b510      	push	{r4, lr}
 80075b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075ba:	4291      	cmp	r1, r2
 80075bc:	d1f9      	bne.n	80075b2 <memcpy+0xe>
 80075be:	bd10      	pop	{r4, pc}

080075c0 <memmove>:
 80075c0:	4288      	cmp	r0, r1
 80075c2:	b510      	push	{r4, lr}
 80075c4:	eb01 0402 	add.w	r4, r1, r2
 80075c8:	d902      	bls.n	80075d0 <memmove+0x10>
 80075ca:	4284      	cmp	r4, r0
 80075cc:	4623      	mov	r3, r4
 80075ce:	d807      	bhi.n	80075e0 <memmove+0x20>
 80075d0:	1e43      	subs	r3, r0, #1
 80075d2:	42a1      	cmp	r1, r4
 80075d4:	d008      	beq.n	80075e8 <memmove+0x28>
 80075d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80075da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80075de:	e7f8      	b.n	80075d2 <memmove+0x12>
 80075e0:	4402      	add	r2, r0
 80075e2:	4601      	mov	r1, r0
 80075e4:	428a      	cmp	r2, r1
 80075e6:	d100      	bne.n	80075ea <memmove+0x2a>
 80075e8:	bd10      	pop	{r4, pc}
 80075ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80075ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80075f2:	e7f7      	b.n	80075e4 <memmove+0x24>

080075f4 <__malloc_lock>:
 80075f4:	4801      	ldr	r0, [pc, #4]	; (80075fc <__malloc_lock+0x8>)
 80075f6:	f7ff bf6d 	b.w	80074d4 <__retarget_lock_acquire_recursive>
 80075fa:	bf00      	nop
 80075fc:	2000027c 	.word	0x2000027c

08007600 <__malloc_unlock>:
 8007600:	4801      	ldr	r0, [pc, #4]	; (8007608 <__malloc_unlock+0x8>)
 8007602:	f7ff bf68 	b.w	80074d6 <__retarget_lock_release_recursive>
 8007606:	bf00      	nop
 8007608:	2000027c 	.word	0x2000027c

0800760c <_realloc_r>:
 800760c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007610:	4680      	mov	r8, r0
 8007612:	4614      	mov	r4, r2
 8007614:	460e      	mov	r6, r1
 8007616:	b921      	cbnz	r1, 8007622 <_realloc_r+0x16>
 8007618:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800761c:	4611      	mov	r1, r2
 800761e:	f7ff b80b 	b.w	8006638 <_malloc_r>
 8007622:	b92a      	cbnz	r2, 8007630 <_realloc_r+0x24>
 8007624:	f7fe ff9c 	bl	8006560 <_free_r>
 8007628:	4625      	mov	r5, r4
 800762a:	4628      	mov	r0, r5
 800762c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007630:	f000 f8fa 	bl	8007828 <_malloc_usable_size_r>
 8007634:	4284      	cmp	r4, r0
 8007636:	4607      	mov	r7, r0
 8007638:	d802      	bhi.n	8007640 <_realloc_r+0x34>
 800763a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800763e:	d812      	bhi.n	8007666 <_realloc_r+0x5a>
 8007640:	4621      	mov	r1, r4
 8007642:	4640      	mov	r0, r8
 8007644:	f7fe fff8 	bl	8006638 <_malloc_r>
 8007648:	4605      	mov	r5, r0
 800764a:	2800      	cmp	r0, #0
 800764c:	d0ed      	beq.n	800762a <_realloc_r+0x1e>
 800764e:	42bc      	cmp	r4, r7
 8007650:	4622      	mov	r2, r4
 8007652:	4631      	mov	r1, r6
 8007654:	bf28      	it	cs
 8007656:	463a      	movcs	r2, r7
 8007658:	f7ff ffa4 	bl	80075a4 <memcpy>
 800765c:	4631      	mov	r1, r6
 800765e:	4640      	mov	r0, r8
 8007660:	f7fe ff7e 	bl	8006560 <_free_r>
 8007664:	e7e1      	b.n	800762a <_realloc_r+0x1e>
 8007666:	4635      	mov	r5, r6
 8007668:	e7df      	b.n	800762a <_realloc_r+0x1e>

0800766a <_raise_r>:
 800766a:	291f      	cmp	r1, #31
 800766c:	b538      	push	{r3, r4, r5, lr}
 800766e:	4604      	mov	r4, r0
 8007670:	460d      	mov	r5, r1
 8007672:	d904      	bls.n	800767e <_raise_r+0x14>
 8007674:	2316      	movs	r3, #22
 8007676:	6003      	str	r3, [r0, #0]
 8007678:	f04f 30ff 	mov.w	r0, #4294967295
 800767c:	bd38      	pop	{r3, r4, r5, pc}
 800767e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007680:	b112      	cbz	r2, 8007688 <_raise_r+0x1e>
 8007682:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007686:	b94b      	cbnz	r3, 800769c <_raise_r+0x32>
 8007688:	4620      	mov	r0, r4
 800768a:	f000 f831 	bl	80076f0 <_getpid_r>
 800768e:	462a      	mov	r2, r5
 8007690:	4601      	mov	r1, r0
 8007692:	4620      	mov	r0, r4
 8007694:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007698:	f000 b818 	b.w	80076cc <_kill_r>
 800769c:	2b01      	cmp	r3, #1
 800769e:	d00a      	beq.n	80076b6 <_raise_r+0x4c>
 80076a0:	1c59      	adds	r1, r3, #1
 80076a2:	d103      	bne.n	80076ac <_raise_r+0x42>
 80076a4:	2316      	movs	r3, #22
 80076a6:	6003      	str	r3, [r0, #0]
 80076a8:	2001      	movs	r0, #1
 80076aa:	e7e7      	b.n	800767c <_raise_r+0x12>
 80076ac:	2400      	movs	r4, #0
 80076ae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80076b2:	4628      	mov	r0, r5
 80076b4:	4798      	blx	r3
 80076b6:	2000      	movs	r0, #0
 80076b8:	e7e0      	b.n	800767c <_raise_r+0x12>
	...

080076bc <raise>:
 80076bc:	4b02      	ldr	r3, [pc, #8]	; (80076c8 <raise+0xc>)
 80076be:	4601      	mov	r1, r0
 80076c0:	6818      	ldr	r0, [r3, #0]
 80076c2:	f7ff bfd2 	b.w	800766a <_raise_r>
 80076c6:	bf00      	nop
 80076c8:	2000000c 	.word	0x2000000c

080076cc <_kill_r>:
 80076cc:	b538      	push	{r3, r4, r5, lr}
 80076ce:	4d07      	ldr	r5, [pc, #28]	; (80076ec <_kill_r+0x20>)
 80076d0:	2300      	movs	r3, #0
 80076d2:	4604      	mov	r4, r0
 80076d4:	4608      	mov	r0, r1
 80076d6:	4611      	mov	r1, r2
 80076d8:	602b      	str	r3, [r5, #0]
 80076da:	f7f9 fb3b 	bl	8000d54 <_kill>
 80076de:	1c43      	adds	r3, r0, #1
 80076e0:	d102      	bne.n	80076e8 <_kill_r+0x1c>
 80076e2:	682b      	ldr	r3, [r5, #0]
 80076e4:	b103      	cbz	r3, 80076e8 <_kill_r+0x1c>
 80076e6:	6023      	str	r3, [r4, #0]
 80076e8:	bd38      	pop	{r3, r4, r5, pc}
 80076ea:	bf00      	nop
 80076ec:	20000280 	.word	0x20000280

080076f0 <_getpid_r>:
 80076f0:	f7f9 bb28 	b.w	8000d44 <_getpid>

080076f4 <__sread>:
 80076f4:	b510      	push	{r4, lr}
 80076f6:	460c      	mov	r4, r1
 80076f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076fc:	f000 f89c 	bl	8007838 <_read_r>
 8007700:	2800      	cmp	r0, #0
 8007702:	bfab      	itete	ge
 8007704:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007706:	89a3      	ldrhlt	r3, [r4, #12]
 8007708:	181b      	addge	r3, r3, r0
 800770a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800770e:	bfac      	ite	ge
 8007710:	6563      	strge	r3, [r4, #84]	; 0x54
 8007712:	81a3      	strhlt	r3, [r4, #12]
 8007714:	bd10      	pop	{r4, pc}

08007716 <__swrite>:
 8007716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800771a:	461f      	mov	r7, r3
 800771c:	898b      	ldrh	r3, [r1, #12]
 800771e:	05db      	lsls	r3, r3, #23
 8007720:	4605      	mov	r5, r0
 8007722:	460c      	mov	r4, r1
 8007724:	4616      	mov	r6, r2
 8007726:	d505      	bpl.n	8007734 <__swrite+0x1e>
 8007728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800772c:	2302      	movs	r3, #2
 800772e:	2200      	movs	r2, #0
 8007730:	f000 f868 	bl	8007804 <_lseek_r>
 8007734:	89a3      	ldrh	r3, [r4, #12]
 8007736:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800773a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800773e:	81a3      	strh	r3, [r4, #12]
 8007740:	4632      	mov	r2, r6
 8007742:	463b      	mov	r3, r7
 8007744:	4628      	mov	r0, r5
 8007746:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800774a:	f000 b817 	b.w	800777c <_write_r>

0800774e <__sseek>:
 800774e:	b510      	push	{r4, lr}
 8007750:	460c      	mov	r4, r1
 8007752:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007756:	f000 f855 	bl	8007804 <_lseek_r>
 800775a:	1c43      	adds	r3, r0, #1
 800775c:	89a3      	ldrh	r3, [r4, #12]
 800775e:	bf15      	itete	ne
 8007760:	6560      	strne	r0, [r4, #84]	; 0x54
 8007762:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007766:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800776a:	81a3      	strheq	r3, [r4, #12]
 800776c:	bf18      	it	ne
 800776e:	81a3      	strhne	r3, [r4, #12]
 8007770:	bd10      	pop	{r4, pc}

08007772 <__sclose>:
 8007772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007776:	f000 b813 	b.w	80077a0 <_close_r>
	...

0800777c <_write_r>:
 800777c:	b538      	push	{r3, r4, r5, lr}
 800777e:	4d07      	ldr	r5, [pc, #28]	; (800779c <_write_r+0x20>)
 8007780:	4604      	mov	r4, r0
 8007782:	4608      	mov	r0, r1
 8007784:	4611      	mov	r1, r2
 8007786:	2200      	movs	r2, #0
 8007788:	602a      	str	r2, [r5, #0]
 800778a:	461a      	mov	r2, r3
 800778c:	f7f9 fb19 	bl	8000dc2 <_write>
 8007790:	1c43      	adds	r3, r0, #1
 8007792:	d102      	bne.n	800779a <_write_r+0x1e>
 8007794:	682b      	ldr	r3, [r5, #0]
 8007796:	b103      	cbz	r3, 800779a <_write_r+0x1e>
 8007798:	6023      	str	r3, [r4, #0]
 800779a:	bd38      	pop	{r3, r4, r5, pc}
 800779c:	20000280 	.word	0x20000280

080077a0 <_close_r>:
 80077a0:	b538      	push	{r3, r4, r5, lr}
 80077a2:	4d06      	ldr	r5, [pc, #24]	; (80077bc <_close_r+0x1c>)
 80077a4:	2300      	movs	r3, #0
 80077a6:	4604      	mov	r4, r0
 80077a8:	4608      	mov	r0, r1
 80077aa:	602b      	str	r3, [r5, #0]
 80077ac:	f7f9 fb25 	bl	8000dfa <_close>
 80077b0:	1c43      	adds	r3, r0, #1
 80077b2:	d102      	bne.n	80077ba <_close_r+0x1a>
 80077b4:	682b      	ldr	r3, [r5, #0]
 80077b6:	b103      	cbz	r3, 80077ba <_close_r+0x1a>
 80077b8:	6023      	str	r3, [r4, #0]
 80077ba:	bd38      	pop	{r3, r4, r5, pc}
 80077bc:	20000280 	.word	0x20000280

080077c0 <_fstat_r>:
 80077c0:	b538      	push	{r3, r4, r5, lr}
 80077c2:	4d07      	ldr	r5, [pc, #28]	; (80077e0 <_fstat_r+0x20>)
 80077c4:	2300      	movs	r3, #0
 80077c6:	4604      	mov	r4, r0
 80077c8:	4608      	mov	r0, r1
 80077ca:	4611      	mov	r1, r2
 80077cc:	602b      	str	r3, [r5, #0]
 80077ce:	f7f9 fb20 	bl	8000e12 <_fstat>
 80077d2:	1c43      	adds	r3, r0, #1
 80077d4:	d102      	bne.n	80077dc <_fstat_r+0x1c>
 80077d6:	682b      	ldr	r3, [r5, #0]
 80077d8:	b103      	cbz	r3, 80077dc <_fstat_r+0x1c>
 80077da:	6023      	str	r3, [r4, #0]
 80077dc:	bd38      	pop	{r3, r4, r5, pc}
 80077de:	bf00      	nop
 80077e0:	20000280 	.word	0x20000280

080077e4 <_isatty_r>:
 80077e4:	b538      	push	{r3, r4, r5, lr}
 80077e6:	4d06      	ldr	r5, [pc, #24]	; (8007800 <_isatty_r+0x1c>)
 80077e8:	2300      	movs	r3, #0
 80077ea:	4604      	mov	r4, r0
 80077ec:	4608      	mov	r0, r1
 80077ee:	602b      	str	r3, [r5, #0]
 80077f0:	f7f9 fb1f 	bl	8000e32 <_isatty>
 80077f4:	1c43      	adds	r3, r0, #1
 80077f6:	d102      	bne.n	80077fe <_isatty_r+0x1a>
 80077f8:	682b      	ldr	r3, [r5, #0]
 80077fa:	b103      	cbz	r3, 80077fe <_isatty_r+0x1a>
 80077fc:	6023      	str	r3, [r4, #0]
 80077fe:	bd38      	pop	{r3, r4, r5, pc}
 8007800:	20000280 	.word	0x20000280

08007804 <_lseek_r>:
 8007804:	b538      	push	{r3, r4, r5, lr}
 8007806:	4d07      	ldr	r5, [pc, #28]	; (8007824 <_lseek_r+0x20>)
 8007808:	4604      	mov	r4, r0
 800780a:	4608      	mov	r0, r1
 800780c:	4611      	mov	r1, r2
 800780e:	2200      	movs	r2, #0
 8007810:	602a      	str	r2, [r5, #0]
 8007812:	461a      	mov	r2, r3
 8007814:	f7f9 fb18 	bl	8000e48 <_lseek>
 8007818:	1c43      	adds	r3, r0, #1
 800781a:	d102      	bne.n	8007822 <_lseek_r+0x1e>
 800781c:	682b      	ldr	r3, [r5, #0]
 800781e:	b103      	cbz	r3, 8007822 <_lseek_r+0x1e>
 8007820:	6023      	str	r3, [r4, #0]
 8007822:	bd38      	pop	{r3, r4, r5, pc}
 8007824:	20000280 	.word	0x20000280

08007828 <_malloc_usable_size_r>:
 8007828:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800782c:	1f18      	subs	r0, r3, #4
 800782e:	2b00      	cmp	r3, #0
 8007830:	bfbc      	itt	lt
 8007832:	580b      	ldrlt	r3, [r1, r0]
 8007834:	18c0      	addlt	r0, r0, r3
 8007836:	4770      	bx	lr

08007838 <_read_r>:
 8007838:	b538      	push	{r3, r4, r5, lr}
 800783a:	4d07      	ldr	r5, [pc, #28]	; (8007858 <_read_r+0x20>)
 800783c:	4604      	mov	r4, r0
 800783e:	4608      	mov	r0, r1
 8007840:	4611      	mov	r1, r2
 8007842:	2200      	movs	r2, #0
 8007844:	602a      	str	r2, [r5, #0]
 8007846:	461a      	mov	r2, r3
 8007848:	f7f9 fa9e 	bl	8000d88 <_read>
 800784c:	1c43      	adds	r3, r0, #1
 800784e:	d102      	bne.n	8007856 <_read_r+0x1e>
 8007850:	682b      	ldr	r3, [r5, #0]
 8007852:	b103      	cbz	r3, 8007856 <_read_r+0x1e>
 8007854:	6023      	str	r3, [r4, #0]
 8007856:	bd38      	pop	{r3, r4, r5, pc}
 8007858:	20000280 	.word	0x20000280

0800785c <_init>:
 800785c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800785e:	bf00      	nop
 8007860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007862:	bc08      	pop	{r3}
 8007864:	469e      	mov	lr, r3
 8007866:	4770      	bx	lr

08007868 <_fini>:
 8007868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800786a:	bf00      	nop
 800786c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800786e:	bc08      	pop	{r3}
 8007870:	469e      	mov	lr, r3
 8007872:	4770      	bx	lr
